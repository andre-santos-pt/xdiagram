grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"



Model:
	colors+=CustomColor*
	images+=ImageFile*
	elements+=ConnectableElement*
	links+=LinkElement*
;

ConnectableElement:
	Rectangle | Rhombus | Ellipse | Polygon | Label | Image 
;



RGB:
	R=INT ',' G=INT ',' B=INT
;

ImageFile:
	'image' name=ID src=STRING
;

Color:
	(custom?='rgb=' rgb=[CustomColor]) | (default=DefaultColor)
;

CustomColor:
	('color' name=ID rgb=RGB)
;


// 16 standard
enum DefaultColor:
	RED='red' |
	BLUE='blue' |
	YELLOW='yellow'
;


Rectangle:
	(rectangle?='rectangle' | square?='square') '{'
		features+=PolygonFeature*
	'}'
;


RectangleFeature returns Feature:
	PolygonFeature | Corner
;

Rhombus:
	'rhombus' '{'
		features+=PolygonFeature
	'}'
;

Ellipse:
	(ellipse?='ellipse' | circle?='circle') '{'
		features+=PolygonFeature*
	'}'
;


Polygon: 
	(polygon?='polygon' | polyline?='polyline') '{'
		features+=Point
		features+=Point
		features+=PolygonFeature*
	'}'
;

PolygonFeature returns Feature:
	Position | Size | ColorFeature | LineStyle | LineWidth
;

//enum FigureShape:
//	SQUARE = 'square' |
//	RECTANGLE = 'rectangle' |
//	ROUNDED_RECTANGLE = 'round rectangle' |
//	CIRCLE = 'circle' |
//	ELLIPSE = 'ellipse' |
//	ARROW = 'triangle' |
//	RHOMBUS = 'rhombus' |
//	POLYGON = 'polygon' |
//	POLYLINE = 'polyline'
//;

AtributeExpression:
	'(' key=ID operator=('='|'<>') value=AtributeValue '->' ')'
;

// enum?
AtributeValue:
	(valueINT=INT) |
	(valueINT=INT '.' valueDEC=INT) |
	(valueID=ID) |
	(valueBOOL=('true'|'false')) |
	(valueSTRING=STRING) |
	(valueDAY=INT '-' valueMONTH=INT '-' valueYEAR=INT)
;


Feature:
	(ColorFeature | Size | Position | Point | FontFace | FontSize | FontStyle | LineStyle | LineWidth | Transparency | Corner)
	(expression=AtributeExpression)?
;




//Figure:
//	'figure' figure=FigureShape '{'
//	features+=FigureFeature*
//	'}'
//;

FigureFeature returns Feature:
	ColorFeature | Size | Position | Point | LineStyle
;


Label:
	{Label}
	'label' (editable?='editable')? '{'
	features+=LabelFeature*
	'}'
;

LabelFeature returns Feature:
	Foreground | Background | FontFace | FontSize | FontStyle
;



Image:
	'image' image=[ImageFile] '{'
	features+=ImageFeature*
	'}'
;

ImageFeature returns Feature:
	Size | Position | Transparency
;









LinkElement:
	'line' lineType=LineType '{'
	features+=LinkFeature*
	'}'
;

LinkFeature returns Feature:
	Foreground | LineStyle | LineWidth
;


ColorFeature:
	Foreground | Background | Border
;

Foreground:
	'foreground' ':' color=Color
;

Background:
	'background' ':' color=Color
;

Border:
	'border' ':' color=Color
;

// validation
Transparency:
	'transparency' ':' percent=PERCENT
;


//Width:
//	'width' ':' width=INT
//;

Size:
	'size' ':' width=INT 'x' height=INT
;

Point:
	'point' ':' x=INT ',' y=INT
;

Position:
	'position' ':' x=INT ',' y=INT
;

Corner:
	'corner' ':' angle=INT
;



FontFace:
	'font-face' ':' face=FontFaceType
;

FontSize:
	'font-size' ':' size=INT
;

FontStyle:
	'font-style' ':' styles+=FontStyleType (',' styles+=FontStyleType)*
;




enum FontFaceType:
	ARIAL='arial' |
	VERDANA='verdana' |
	TIMES='times' |
	COURIER='courier'
;

enum FontStyleType:
	ITALICS='italics' |
	BOLD='bold' |
	UNDERLINE='underline'
;



LineStyle:
	'line-style' ':' style=LineType
;

enum LineType:
	SOLID='solid' |
	DASH='dash' 
;

LineWidth:
	'line-width' ':' width=INT
;


terminal PERCENT: ('0'|('1'..'9')(('0'..'9'))?|'100') '%';


