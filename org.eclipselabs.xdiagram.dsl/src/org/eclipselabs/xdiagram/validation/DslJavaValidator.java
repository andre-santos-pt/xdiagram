/*
 * generated by Xtext
 */
package org.eclipselabs.xdiagram.validation;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipselabs.xdiagram.dsl.ConnectableElement;
import org.eclipselabs.xdiagram.dsl.Decorator;
import org.eclipselabs.xdiagram.dsl.DiagramElement;
import org.eclipselabs.xdiagram.dsl.DslPackage;
import org.eclipselabs.xdiagram.dsl.Ellipse;
import org.eclipselabs.xdiagram.dsl.Feature;
import org.eclipselabs.xdiagram.dsl.FeatureContainer;
import org.eclipselabs.xdiagram.dsl.Label;
import org.eclipselabs.xdiagram.dsl.Layout;
import org.eclipselabs.xdiagram.dsl.Line;
import org.eclipselabs.xdiagram.dsl.Link;
import org.eclipselabs.xdiagram.dsl.Node;
import org.eclipselabs.xdiagram.dsl.Position;
import org.eclipselabs.xdiagram.dsl.Rectangle;
import org.eclipselabs.xdiagram.dsl.Size;
import org.eclipselabs.xdiagram.dsl.TextPart;
import org.eclipselabs.xdiagram.dsl.TextValue;
import org.eclipselabs.xdiagram.dsl.XDiagram;

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
public class DslJavaValidator extends org.eclipselabs.xdiagram.validation.AbstractDslJavaValidator {
	@Check
	public void checkEcoreExists(XDiagram diagram) {
		String ecoreUri = diagram.getImportURI();
		URI uri = URI.createURI(ecoreUri);
		if(!uri.isPlatform())
			error("invalid ecore model", DslPackage.Literals.XDIAGRAM__IMPORT_URI);
	}


	//?
	public void validateUniqueNodes(XDiagram diagram) {

	}

	@Check
	public void checkTextValue(TextValue v) {
		boolean modelRef = false;
		for(TextPart part : v.getParts()) {
			if(part.getModelAttribute() != null) {
				if(part.isEditable() && modelRef)
					error("at most one binding to the model may be editable", v, null);

				modelRef = true;
				Label label = (Label) v.eContainer();
				EObject labelContainer = label.eContainer();
				while(!(labelContainer instanceof DiagramElement))
					labelContainer = labelContainer.eContainer();


				if(labelContainer instanceof Node) {
					Node node = (Node) labelContainer;
					EClass clazz = node.getModelClass();
					if(!clazz.getEAllAttributes().contains(part.getModelAttribute()))
						error("attribute must be owned by class " + clazz.getName(), part, null);
				}
				else if(labelContainer instanceof Link) {
					Link link = (Link) labelContainer;
					if(link.isComplex()) {
						EClass clazz = link.getModelClass();
						if(!clazz.getEAllAttributes().contains(part.getModelAttribute()))
							error("attribute must be owned by class " + clazz.getName(), part, null);
					}
					else {
						error("dynamic labels in simple links are not supported", part, null);
					}
				}
			}
		}
	}

	@Check
	public void checkDiagramElements(DiagramElement node) {

		EClass clazz = node.getModelClass();
		if(clazz != null && clazz.isAbstract())
			error("model class cannot be abstract", DslPackage.Literals.DIAGRAM_ELEMENT__MODEL_CLASS);

	}


	//	@Check
	//	public void checkContainer(NodeContainer container) {
	//		Node parent = (Node) container.eContainer();
	//		EReference ref = container.getModelReference();
	//		if(!ref.getEContainingClass().equals(parent.getModelClass()))
	//			error("reference must be owned by the node model class", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);
	//
	//		if(!ref.isContainment())
	//			error("reference must be containment", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);
	//
	//
	//	}

	@Check
	public void checkGreetingStartsWithCapital(Link link) {
		if (link.isComplex() && link.getModelClass().getName().startsWith("C")) {
			//			warning("ERRO!", link, XdiagramPackage.Literals.LINK__MODEL_CLASS);
		}
	}

	/**
	 * child figures cannot define Position if parent defines Layout
	 */
	@Check
	public void checkLayout(ConnectableElement element) {

		for(Feature f : element.getFeatures()) {
			if(f instanceof Layout) {
				for(FeatureContainer child : element.getChildren()) {
					for(Feature fc : child.getFeatures())
						if(fc instanceof Position) {
							String l = ((Layout) f).isVertical() ? "vertical" : "horizontal";
							error("child element cannot have position feature, given that parent defines layout (" + l + ")", 
									fc, null);
						}
				}
			}
		}
	}

	@Check
	public void checkSizeSquareCircleLine(Size size) {
		if(size.getHeight() == 0)
			return;

		EObject parent = size.eContainer();
		String t = null;

		if(parent instanceof Rectangle && ((Rectangle) parent).isSquare())
			t = "square";
		else if(parent instanceof Ellipse && ((Ellipse) parent).isCircle())
			t = "square";
		else if(parent instanceof Line)
			t = "line";

		if(t != null)
			error("size should have only one dimension, given that parent is a " + t, size, null);
	}
}
