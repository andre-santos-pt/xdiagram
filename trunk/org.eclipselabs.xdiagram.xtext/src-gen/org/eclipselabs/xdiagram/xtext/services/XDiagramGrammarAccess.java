/*
* generated by Xtext
*/
package org.eclipselabs.xdiagram.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XDiagramGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Keyword cDiagramKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModelClassEClassCrossReference_4_0 = (CrossReference)cModelClassAssignment_4.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cModelClassEClassCrossReference_4_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cNodesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_5_0_0 = (RuleCall)cNodesAssignment_5_0.eContents().get(0);
		private final Assignment cLinksAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_5_1_0 = (RuleCall)cLinksAssignment_5_1.eContents().get(0);
		private final Assignment cStylesAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cStylesStyleParserRuleCall_5_2_0 = (RuleCall)cStylesAssignment_5_2.eContents().get(0);
		private final Assignment cColorsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cColorsCustomColorParserRuleCall_5_3_0 = (RuleCall)cColorsAssignment_5_3.eContents().get(0);
		private final Assignment cImagesAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cImagesImageFileParserRuleCall_5_4_0 = (RuleCall)cImagesAssignment_5_4.eContents().get(0);
		
		//XDiagram:
		//	"metamodel" importURI=STRING imports+=ImportStatement "diagram" modelClass=[ecore::EClass|QualifiedName] (nodes+=Node
		//	| links+=Link | styles+=Style | colors+=CustomColor | images+=ImageFile)*;
		public ParserRule getRule() { return rule; }

		//"metamodel" importURI=STRING imports+=ImportStatement "diagram" modelClass=[ecore::EClass|QualifiedName] (nodes+=Node |
		//links+=Link | styles+=Style | colors+=CustomColor | images+=ImageFile)*
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//imports+=ImportStatement
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_2_0() { return cImportsImportStatementParserRuleCall_2_0; }

		//"diagram"
		public Keyword getDiagramKeyword_3() { return cDiagramKeyword_3; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_4() { return cModelClassAssignment_4; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_4_0() { return cModelClassEClassCrossReference_4_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_4_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_4_0_1; }

		//(nodes+=Node | links+=Link | styles+=Style | colors+=CustomColor | images+=ImageFile)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//nodes+=Node
		public Assignment getNodesAssignment_5_0() { return cNodesAssignment_5_0; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_5_0_0() { return cNodesNodeParserRuleCall_5_0_0; }

		//links+=Link
		public Assignment getLinksAssignment_5_1() { return cLinksAssignment_5_1; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_5_1_0() { return cLinksLinkParserRuleCall_5_1_0; }

		//styles+=Style
		public Assignment getStylesAssignment_5_2() { return cStylesAssignment_5_2; }

		//Style
		public RuleCall getStylesStyleParserRuleCall_5_2_0() { return cStylesStyleParserRuleCall_5_2_0; }

		//colors+=CustomColor
		public Assignment getColorsAssignment_5_3() { return cColorsAssignment_5_3; }

		//CustomColor
		public RuleCall getColorsCustomColorParserRuleCall_5_3_0() { return cColorsCustomColorParserRuleCall_5_3_0; }

		//images+=ImageFile
		public Assignment getImagesAssignment_5_4() { return cImagesAssignment_5_4; }

		//ImageFile
		public RuleCall getImagesImageFileParserRuleCall_5_4_0() { return cImagesImageFileParserRuleCall_5_4_0; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		
		//// importedNamespace apparently cannot be on the root element
		//ImportStatement:
		//	{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?;
		public ParserRule getRule() { return rule; }

		//{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup() { return cGroup; }

		//{ImportStatement}
		public Action getImportStatementAction_0() { return cImportStatementAction_0; }

		//("import" importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup_1() { return cGroup_1; }

		//"import"
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Style:
		//	"style" ":" name=ID "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//"style" ":" name=ID "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DiagramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiagramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: common: text / icon / tooltip
		//DiagramElement:
		//	Node | Link;
		public ParserRule getRule() { return rule; }

		//Node | Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }

		//Link
		public RuleCall getLinkParserRuleCall_1() { return cLinkParserRuleCall_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_0 = (CrossReference)cModelClassAssignment_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cResizableAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cResizableResizableKeyword_3_2_0 = (Keyword)cResizableAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStyleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStyleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStyleIDTerminalRuleCall_4_1_0 = (RuleCall)cStyleAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIconKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIconAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIconIDTerminalRuleCall_5_1_0 = (RuleCall)cIconAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNameKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Assignment cMainFigureAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMainFigureConnectableElementParserRuleCall_7_0 = (RuleCall)cMainFigureAssignment_7.eContents().get(0);
		private final Assignment cAttributesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAttributesAttributeParserRuleCall_8_0 = (RuleCall)cAttributesAssignment_8.eContents().get(0);
		private final Assignment cAnchorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnchorsAnchorParserRuleCall_9_0 = (RuleCall)cAnchorsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// resizable default?
		//// TODO validation: unique nodes
		//// notation inheritance?
		//Node:
		//	"node" modelClass=[ecore::EClass|QualifiedName] "{" ("set" ":" resizable?="resizable"?)? ("style" style=ID)? ("icon"
		//	icon=ID)? ("name" name=STRING)? mainFigure=ConnectableElement attributes+=Attribute* //    	(figures += NodeFigure2) |
		//
		//	//	(containers += NodeContainer) |
		//	anchors+=Anchor* "}";
		public ParserRule getRule() { return rule; }

		//"node" modelClass=[ecore::EClass|QualifiedName] "{" ("set" ":" resizable?="resizable"?)? ("style" style=ID)? ("icon"
		//icon=ID)? ("name" name=STRING)? mainFigure=ConnectableElement attributes+=Attribute* //    	(figures += NodeFigure2) |
		////	(containers += NodeContainer) |
		//anchors+=Anchor* "}"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1() { return cModelClassAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_0() { return cModelClassEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("set" ":" resizable?="resizable"?)?
		public Group getGroup_3() { return cGroup_3; }

		//"set"
		public Keyword getSetKeyword_3_0() { return cSetKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//resizable?="resizable"?
		public Assignment getResizableAssignment_3_2() { return cResizableAssignment_3_2; }

		//"resizable"
		public Keyword getResizableResizableKeyword_3_2_0() { return cResizableResizableKeyword_3_2_0; }

		//("style" style=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"style"
		public Keyword getStyleKeyword_4_0() { return cStyleKeyword_4_0; }

		//style=ID
		public Assignment getStyleAssignment_4_1() { return cStyleAssignment_4_1; }

		//ID
		public RuleCall getStyleIDTerminalRuleCall_4_1_0() { return cStyleIDTerminalRuleCall_4_1_0; }

		//("icon" icon=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"icon"
		public Keyword getIconKeyword_5_0() { return cIconKeyword_5_0; }

		//icon=ID
		public Assignment getIconAssignment_5_1() { return cIconAssignment_5_1; }

		//ID
		public RuleCall getIconIDTerminalRuleCall_5_1_0() { return cIconIDTerminalRuleCall_5_1_0; }

		//("name" name=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"name"
		public Keyword getNameKeyword_6_0() { return cNameKeyword_6_0; }

		//name=STRING
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_1_0() { return cNameSTRINGTerminalRuleCall_6_1_0; }

		//mainFigure=ConnectableElement
		public Assignment getMainFigureAssignment_7() { return cMainFigureAssignment_7; }

		//ConnectableElement
		public RuleCall getMainFigureConnectableElementParserRuleCall_7_0() { return cMainFigureConnectableElementParserRuleCall_7_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_8() { return cAttributesAssignment_8; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_8_0() { return cAttributesAttributeParserRuleCall_8_0; }

		//anchors+=Anchor*
		public Assignment getAnchorsAssignment_9() { return cAnchorsAssignment_9; }

		//Anchor
		public RuleCall getAnchorsAnchorParserRuleCall_9_0() { return cAnchorsAnchorParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAtributeValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// TODO : EMF default value
		//Attribute:
		//	"set" key=ID "=" value=AtributeValue;
		public ParserRule getRule() { return rule; }

		//"set" key=ID "=" value=AtributeValue
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//key=ID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0() { return cKeyIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=AtributeValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AtributeValue
		public RuleCall getValueAtributeValueParserRuleCall_3_0() { return cValueAtributeValueParserRuleCall_3_0; }
	}

	public class NodeContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayoutContainerLayoutEnumRuleCall_1_0 = (RuleCall)cLayoutAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModelReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cModelReferenceEReferenceCrossReference_2_1_0 = (CrossReference)cModelReferenceAssignment_2_1.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cFormatAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cFormatAlternatives_3_2_0 = (Alternatives)cFormatAssignment_3_2.eContents().get(0);
		private final Keyword cFormatPercentSignKeyword_3_2_0_0 = (Keyword)cFormatAlternatives_3_2_0.eContents().get(0);
		private final Keyword cFormatPxKeyword_3_2_0_1 = (Keyword)cFormatAlternatives_3_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFiguresAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFiguresConnectableElementParserRuleCall_5_0 = (RuleCall)cFiguresAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// main? só Figure?
		////NodeFigure:
		////	'figure' (option=('main'))? ':' element=ConnectableElement (',' 'style' ':' style=ID)?
		////;
		////NodeFigure:
		////	'figure' ':' element=ConnectableElement
		////;
		//// TODO validation
		//// for passar para figura? so uma figura?
		//NodeContainer:
		//	"container" layout=ContainerLayout? ("for" modelReference=[ecore::EReference|QualifiedName])? (":" value=INT
		//	format=("%" | "px"))? "{" figures+=ConnectableElement+ "}";
		public ParserRule getRule() { return rule; }

		//"container" layout=ContainerLayout? ("for" modelReference=[ecore::EReference|QualifiedName])? (":" value=INT format=("%"
		//| "px"))? "{" figures+=ConnectableElement+ "}"
		public Group getGroup() { return cGroup; }

		//"container"
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }

		//layout=ContainerLayout?
		public Assignment getLayoutAssignment_1() { return cLayoutAssignment_1; }

		//ContainerLayout
		public RuleCall getLayoutContainerLayoutEnumRuleCall_1_0() { return cLayoutContainerLayoutEnumRuleCall_1_0; }

		//("for" modelReference=[ecore::EReference|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_2_1() { return cModelReferenceAssignment_2_1; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_2_1_0() { return cModelReferenceEReferenceCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_2_1_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_2_1_0_1; }

		//(":" value=INT format=("%" | "px"))?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }

		//format=("%" | "px")
		public Assignment getFormatAssignment_3_2() { return cFormatAssignment_3_2; }

		//"%" | "px"
		public Alternatives getFormatAlternatives_3_2_0() { return cFormatAlternatives_3_2_0; }

		//"%"
		public Keyword getFormatPercentSignKeyword_3_2_0_0() { return cFormatPercentSignKeyword_3_2_0_0; }

		//"px"
		public Keyword getFormatPxKeyword_3_2_0_1() { return cFormatPxKeyword_3_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//figures+=ConnectableElement+
		public Assignment getFiguresAssignment_5() { return cFiguresAssignment_5; }

		//ConnectableElement
		public RuleCall getFiguresConnectableElementParserRuleCall_5_0() { return cFiguresConnectableElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cModelReferenceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cModelReferenceEReferenceCrossReference_1_0_0 = (CrossReference)cModelReferenceAssignment_1_0.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cComplexAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cComplexObjectKeyword_1_1_0_0 = (Keyword)cComplexAssignment_1_1_0.eContents().get(0);
		private final Assignment cModelClassAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_1_1_0 = (CrossReference)cModelClassAssignment_1_1_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cSourceKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cSourceReferenceAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cSourceReferenceEReferenceCrossReference_1_1_3_0 = (CrossReference)cSourceReferenceAssignment_1_1_3.eContents().get(0);
		private final RuleCall cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1 = (RuleCall)cSourceReferenceEReferenceCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cTargetKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cTargetReferenceAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final CrossReference cTargetReferenceEReferenceCrossReference_1_1_5_0 = (CrossReference)cTargetReferenceAssignment_1_1_5.eContents().get(0);
		private final RuleCall cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1 = (RuleCall)cTargetReferenceEReferenceCrossReference_1_1_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManhattanAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManhattanManhattanKeyword_3_0 = (Keyword)cManhattanAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStyleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStyleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStyleIDTerminalRuleCall_4_1_0 = (RuleCall)cStyleAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIconKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIconAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIconIDTerminalRuleCall_5_1_0 = (RuleCall)cIconAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNameKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Assignment cAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttributesAttributeParserRuleCall_7_0 = (RuleCall)cAttributesAssignment_7.eContents().get(0);
		private final Assignment cFeaturesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFeaturesLinkFeatureParserRuleCall_8_0 = (RuleCall)cFeaturesAssignment_8.eContents().get(0);
		private final Assignment cDecoratorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDecoratorsDecoratorParserRuleCall_9_0 = (RuleCall)cDecoratorsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// TODO: validation - complex requires source e target, complex structure
		//// TODO text / icon
		//Link:
		//	"link" (modelReference=[ecore::EReference|QualifiedName] | complex?="object" modelClass=[ecore::EClass|QualifiedName]
		//	"source" sourceReference=[ecore::EReference|QualifiedName] "target" targetReference=[ecore::EReference|QualifiedName])
		//	"{" manhattan?="manhattan"? ("style" style=ID)? ("icon" icon=ID)? ("name" name=STRING)? attributes+=Attribute*
		//	features+=LinkFeature* decorators+=Decorator* "}";
		public ParserRule getRule() { return rule; }

		//"link" (modelReference=[ecore::EReference|QualifiedName] | complex?="object" modelClass=[ecore::EClass|QualifiedName]
		//"source" sourceReference=[ecore::EReference|QualifiedName] "target" targetReference=[ecore::EReference|QualifiedName])
		//"{" manhattan?="manhattan"? ("style" style=ID)? ("icon" icon=ID)? ("name" name=STRING)? attributes+=Attribute*
		//features+=LinkFeature* decorators+=Decorator* "}"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//modelReference=[ecore::EReference|QualifiedName] | complex?="object" modelClass=[ecore::EClass|QualifiedName] "source"
		//sourceReference=[ecore::EReference|QualifiedName] "target" targetReference=[ecore::EReference|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_1_0() { return cModelReferenceAssignment_1_0; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_1_0_0() { return cModelReferenceEReferenceCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_0_1; }

		//complex?="object" modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName]
		//"target" targetReference=[ecore::EReference|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//complex?="object"
		public Assignment getComplexAssignment_1_1_0() { return cComplexAssignment_1_1_0; }

		//"object"
		public Keyword getComplexObjectKeyword_1_1_0_0() { return cComplexObjectKeyword_1_1_0_0; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1_1_1() { return cModelClassAssignment_1_1_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_1_1_0() { return cModelClassEClassCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1; }

		//"source"
		public Keyword getSourceKeyword_1_1_2() { return cSourceKeyword_1_1_2; }

		//sourceReference=[ecore::EReference|QualifiedName]
		public Assignment getSourceReferenceAssignment_1_1_3() { return cSourceReferenceAssignment_1_1_3; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getSourceReferenceEReferenceCrossReference_1_1_3_0() { return cSourceReferenceEReferenceCrossReference_1_1_3_0; }

		//QualifiedName
		public RuleCall getSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1() { return cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1; }

		//"target"
		public Keyword getTargetKeyword_1_1_4() { return cTargetKeyword_1_1_4; }

		//targetReference=[ecore::EReference|QualifiedName]
		public Assignment getTargetReferenceAssignment_1_1_5() { return cTargetReferenceAssignment_1_1_5; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getTargetReferenceEReferenceCrossReference_1_1_5_0() { return cTargetReferenceEReferenceCrossReference_1_1_5_0; }

		//QualifiedName
		public RuleCall getTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1() { return cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//manhattan?="manhattan"?
		public Assignment getManhattanAssignment_3() { return cManhattanAssignment_3; }

		//"manhattan"
		public Keyword getManhattanManhattanKeyword_3_0() { return cManhattanManhattanKeyword_3_0; }

		//("style" style=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"style"
		public Keyword getStyleKeyword_4_0() { return cStyleKeyword_4_0; }

		//style=ID
		public Assignment getStyleAssignment_4_1() { return cStyleAssignment_4_1; }

		//ID
		public RuleCall getStyleIDTerminalRuleCall_4_1_0() { return cStyleIDTerminalRuleCall_4_1_0; }

		//("icon" icon=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"icon"
		public Keyword getIconKeyword_5_0() { return cIconKeyword_5_0; }

		//icon=ID
		public Assignment getIconAssignment_5_1() { return cIconAssignment_5_1; }

		//ID
		public RuleCall getIconIDTerminalRuleCall_5_1_0() { return cIconIDTerminalRuleCall_5_1_0; }

		//("name" name=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"name"
		public Keyword getNameKeyword_6_0() { return cNameKeyword_6_0; }

		//name=STRING
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_1_0() { return cNameSTRINGTerminalRuleCall_6_1_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_7() { return cAttributesAssignment_7; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_7_0() { return cAttributesAttributeParserRuleCall_7_0; }

		//features+=LinkFeature*
		public Assignment getFeaturesAssignment_8() { return cFeaturesAssignment_8; }

		//LinkFeature
		public RuleCall getFeaturesLinkFeatureParserRuleCall_8_0() { return cFeaturesLinkFeatureParserRuleCall_8_0; }

		//decorators+=Decorator*
		public Assignment getDecoratorsAssignment_9() { return cDecoratorsAssignment_9; }

		//Decorator
		public RuleCall getDecoratorsDecoratorParserRuleCall_9_0() { return cDecoratorsDecoratorParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DecoratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decorator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecoratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAtKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPositionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPositionINTTerminalRuleCall_1_0_1_0 = (RuleCall)cPositionAssignment_1_0_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cSourceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSourceSourceKeyword_1_1_0 = (Keyword)cSourceAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cTargetTargetKeyword_1_2_0 = (Keyword)cTargetAssignment_1_2.eContents().get(0);
		private final Assignment cMiddleAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cMiddleMiddleKeyword_1_3_0 = (Keyword)cMiddleAssignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStaticElementAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStaticElementStaticElementParserRuleCall_2_0_0 = (RuleCall)cStaticElementAssignment_2_0.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		
		//// % opcional? ou considerar pixeis?
		//// ter "constantes" para origem destino
		////	'}'
		//Decorator:
		//	"decorator" ("at" position=INT "%" | source?="source" | target?="target" | middle?="middle")
		//	(staticElement=StaticElement //	'{'			
		//	| label=Label)?;
		public ParserRule getRule() { return rule; }

		//"decorator" ("at" position=INT "%" | source?="source" | target?="target" | middle?="middle")
		//(staticElement=StaticElement //	'{'			
		//| label=Label)?
		public Group getGroup() { return cGroup; }

		//"decorator"
		public Keyword getDecoratorKeyword_0() { return cDecoratorKeyword_0; }

		//"at" position=INT "%" | source?="source" | target?="target" | middle?="middle"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"at" position=INT "%"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"at"
		public Keyword getAtKeyword_1_0_0() { return cAtKeyword_1_0_0; }

		//position=INT
		public Assignment getPositionAssignment_1_0_1() { return cPositionAssignment_1_0_1; }

		//INT
		public RuleCall getPositionINTTerminalRuleCall_1_0_1_0() { return cPositionINTTerminalRuleCall_1_0_1_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//source?="source"
		public Assignment getSourceAssignment_1_1() { return cSourceAssignment_1_1; }

		//"source"
		public Keyword getSourceSourceKeyword_1_1_0() { return cSourceSourceKeyword_1_1_0; }

		//target?="target"
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }

		//"target"
		public Keyword getTargetTargetKeyword_1_2_0() { return cTargetTargetKeyword_1_2_0; }

		//middle?="middle"
		public Assignment getMiddleAssignment_1_3() { return cMiddleAssignment_1_3; }

		//"middle"
		public Keyword getMiddleMiddleKeyword_1_3_0() { return cMiddleMiddleKeyword_1_3_0; }

		//(staticElement=StaticElement //	'{'			
		//| label=Label)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//staticElement=StaticElement
		public Assignment getStaticElementAssignment_2_0() { return cStaticElementAssignment_2_0; }

		//StaticElement
		public RuleCall getStaticElementStaticElementParserRuleCall_2_0_0() { return cStaticElementStaticElementParserRuleCall_2_0_0; }

		//label=Label
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_2_1_0() { return cLabelLabelParserRuleCall_2_1_0; }
	}

	public class StaticElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRhombusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPolylineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StaticElement returns ConnectableElement:
		//	Rhombus | //| Arrow | Triangle
		//	Polyline;
		public ParserRule getRule() { return rule; }

		//Rhombus | //| Arrow | Triangle
		//Polyline
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rhombus
		public RuleCall getRhombusParserRuleCall_0() { return cRhombusParserRuleCall_0; }

		////| Arrow | Triangle
		//Polyline
		public RuleCall getPolylineParserRuleCall_1() { return cPolylineParserRuleCall_1; }
	}

	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Anchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnchorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectIDTerminalRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPassXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cPassXHyphenMinusKeyword_3_0 = (Keyword)cPassXAssignment_3.eContents().get(0);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Assignment cFormatXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cFormatXAlternatives_5_0 = (Alternatives)cFormatXAssignment_5.eContents().get(0);
		private final Keyword cFormatXPercentSignKeyword_5_0_0 = (Keyword)cFormatXAlternatives_5_0.eContents().get(0);
		private final Keyword cFormatXLfKeyword_5_0_1 = (Keyword)cFormatXAlternatives_5_0.eContents().get(1);
		private final Keyword cFormatXRgKeyword_5_0_2 = (Keyword)cFormatXAlternatives_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPassYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cPassYHyphenMinusKeyword_7_0 = (Keyword)cPassYAssignment_7.eContents().get(0);
		private final Assignment cYAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cYINTTerminalRuleCall_8_0 = (RuleCall)cYAssignment_8.eContents().get(0);
		private final Assignment cFormatYAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Alternatives cFormatYAlternatives_9_0 = (Alternatives)cFormatYAssignment_9.eContents().get(0);
		private final Keyword cFormatYPercentSignKeyword_9_0_0 = (Keyword)cFormatYAlternatives_9_0.eContents().get(0);
		private final Keyword cFormatYUpKeyword_9_0_1 = (Keyword)cFormatYAlternatives_9_0.eContents().get(1);
		private final Keyword cFormatYDwKeyword_9_0_2 = (Keyword)cFormatYAlternatives_9_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cFiguresAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cFiguresConnectableElementParserRuleCall_11_0 = (RuleCall)cFiguresAssignment_11.eContents().get(0);
		private final Assignment cConstraintsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cConstraintsAnchorConstraintParserRuleCall_12_0 = (RuleCall)cConstraintsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// TODO: model ids / name Anchor
		//// anchor to?
		//Anchor:
		//	"anchor" ("to" object=ID)? ":" passX="-"? X=INT formatX=("%" | "lf" | "rg") "," passY="-"? Y=INT formatY=("%" | "up" |
		//	"dw") "{" figures+=ConnectableElement* constraints+=AnchorConstraint* "}";
		public ParserRule getRule() { return rule; }

		//"anchor" ("to" object=ID)? ":" passX="-"? X=INT formatX=("%" | "lf" | "rg") "," passY="-"? Y=INT formatY=("%" | "up" |
		//"dw") "{" figures+=ConnectableElement* constraints+=AnchorConstraint* "}"
		public Group getGroup() { return cGroup; }

		//"anchor"
		public Keyword getAnchorKeyword_0() { return cAnchorKeyword_0; }

		//("to" object=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//object=ID
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }

		//ID
		public RuleCall getObjectIDTerminalRuleCall_1_1_0() { return cObjectIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//passX="-"?
		public Assignment getPassXAssignment_3() { return cPassXAssignment_3; }

		//"-"
		public Keyword getPassXHyphenMinusKeyword_3_0() { return cPassXHyphenMinusKeyword_3_0; }

		//X=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }

		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }

		//formatX=("%" | "lf" | "rg")
		public Assignment getFormatXAssignment_5() { return cFormatXAssignment_5; }

		//"%" | "lf" | "rg"
		public Alternatives getFormatXAlternatives_5_0() { return cFormatXAlternatives_5_0; }

		//"%"
		public Keyword getFormatXPercentSignKeyword_5_0_0() { return cFormatXPercentSignKeyword_5_0_0; }

		//"lf"
		public Keyword getFormatXLfKeyword_5_0_1() { return cFormatXLfKeyword_5_0_1; }

		//"rg"
		public Keyword getFormatXRgKeyword_5_0_2() { return cFormatXRgKeyword_5_0_2; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//passY="-"?
		public Assignment getPassYAssignment_7() { return cPassYAssignment_7; }

		//"-"
		public Keyword getPassYHyphenMinusKeyword_7_0() { return cPassYHyphenMinusKeyword_7_0; }

		//Y=INT
		public Assignment getYAssignment_8() { return cYAssignment_8; }

		//INT
		public RuleCall getYINTTerminalRuleCall_8_0() { return cYINTTerminalRuleCall_8_0; }

		//formatY=("%" | "up" | "dw")
		public Assignment getFormatYAssignment_9() { return cFormatYAssignment_9; }

		//"%" | "up" | "dw"
		public Alternatives getFormatYAlternatives_9_0() { return cFormatYAlternatives_9_0; }

		//"%"
		public Keyword getFormatYPercentSignKeyword_9_0_0() { return cFormatYPercentSignKeyword_9_0_0; }

		//"up"
		public Keyword getFormatYUpKeyword_9_0_1() { return cFormatYUpKeyword_9_0_1; }

		//"dw"
		public Keyword getFormatYDwKeyword_9_0_2() { return cFormatYDwKeyword_9_0_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//figures+=ConnectableElement*
		public Assignment getFiguresAssignment_11() { return cFiguresAssignment_11; }

		//ConnectableElement
		public RuleCall getFiguresConnectableElementParserRuleCall_11_0() { return cFiguresConnectableElementParserRuleCall_11_0; }

		//constraints+=AnchorConstraint*
		public Assignment getConstraintsAssignment_12() { return cConstraintsAssignment_12; }

		//AnchorConstraint
		public RuleCall getConstraintsAnchorConstraintParserRuleCall_12_0() { return cConstraintsAnchorConstraintParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class AnchorConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAnchorConstraintTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferenceIDTerminalRuleCall_2_0 = (RuleCall)cReferenceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMaxAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_3_2_0 = (RuleCall)cMaxAssignment_3_2.eContents().get(0);
		
		//// TODO: model ids - change syntax / name AnchorConstraint -- N connections?
		//AnchorConstraint:
		//	"for" type=AnchorConstraintType? reference=ID ("max" ":" max=INT)?;
		public ParserRule getRule() { return rule; }

		//"for" type=AnchorConstraintType? reference=ID ("max" ":" max=INT)?
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//type=AnchorConstraintType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AnchorConstraintType
		public RuleCall getTypeAnchorConstraintTypeEnumRuleCall_1_0() { return cTypeAnchorConstraintTypeEnumRuleCall_1_0; }

		//reference=ID
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//ID
		public RuleCall getReferenceIDTerminalRuleCall_2_0() { return cReferenceIDTerminalRuleCall_2_0; }

		//("max" ":" max=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"max"
		public Keyword getMaxKeyword_3_0() { return cMaxKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//max=INT
		public Assignment getMaxAssignment_3_2() { return cMaxAssignment_3_2; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_2_0() { return cMaxINTTerminalRuleCall_3_2_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	ConnectableElement | Link;
		public ParserRule getRule() { return rule; }

		//ConnectableElement | Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectableElement
		public RuleCall getConnectableElementParserRuleCall_0() { return cConnectableElementParserRuleCall_0; }

		//Link
		public RuleCall getLinkParserRuleCall_1() { return cLinkParserRuleCall_1; }
	}

	public class ConnectableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPolylineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// TODO: invisible figure?
		//ConnectableElement:
		//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image;
		public ParserRule getRule() { return rule; }

		//Rectangle | Rhombus | Ellipse | Polyline | Label | Image
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rectangle
		public RuleCall getRectangleParserRuleCall_0() { return cRectangleParserRuleCall_0; }

		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }

		//Ellipse
		public RuleCall getEllipseParserRuleCall_2() { return cEllipseParserRuleCall_2; }

		//Polyline
		public RuleCall getPolylineParserRuleCall_3() { return cPolylineParserRuleCall_3; }

		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }

		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }
	}

	public class RGBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRINTTerminalRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGINTTerminalRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBINTTerminalRuleCall_4_0 = (RuleCall)cBAssignment_4.eContents().get(0);
		
		//RGB:
		//	R=INT "," G=INT "," B=INT;
		public ParserRule getRule() { return rule; }

		//R=INT "," G=INT "," B=INT
		public Group getGroup() { return cGroup; }

		//R=INT
		public Assignment getRAssignment_0() { return cRAssignment_0; }

		//INT
		public RuleCall getRINTTerminalRuleCall_0_0() { return cRINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//G=INT
		public Assignment getGAssignment_2() { return cGAssignment_2; }

		//INT
		public RuleCall getGINTTerminalRuleCall_2_0() { return cGINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//B=INT
		public Assignment getBAssignment_4() { return cBAssignment_4; }

		//INT
		public RuleCall getBINTTerminalRuleCall_4_0() { return cBINTTerminalRuleCall_4_0; }
	}

	public class ImageFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSrcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrcSTRINGTerminalRuleCall_2_0 = (RuleCall)cSrcAssignment_2.eContents().get(0);
		
		//ImageFile:
		//	"image" name=ID src=STRING;
		public ParserRule getRule() { return rule; }

		//"image" name=ID src=STRING
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//src=STRING
		public Assignment getSrcAssignment_2() { return cSrcAssignment_2; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_2_0() { return cSrcSTRINGTerminalRuleCall_2_0; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultDefaultColorEnumRuleCall_0_0 = (RuleCall)cDefaultAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomCustomColorCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomCustomColorIDTerminalRuleCall_1_0_1 = (RuleCall)cCustomCustomColorCrossReference_1_0.eContents().get(1);
		
		//Color:
		//	default=DefaultColor | custom=[CustomColor];
		public ParserRule getRule() { return rule; }

		//default=DefaultColor | custom=[CustomColor]
		public Alternatives getAlternatives() { return cAlternatives; }

		//default=DefaultColor
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }

		//DefaultColor
		public RuleCall getDefaultDefaultColorEnumRuleCall_0_0() { return cDefaultDefaultColorEnumRuleCall_0_0; }

		//custom=[CustomColor]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }

		//[CustomColor]
		public CrossReference getCustomCustomColorCrossReference_1_0() { return cCustomCustomColorCrossReference_1_0; }

		//ID
		public RuleCall getCustomCustomColorIDTerminalRuleCall_1_0_1() { return cCustomCustomColorIDTerminalRuleCall_1_0_1; }
	}

	public class CustomColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRgbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRgbRGBParserRuleCall_2_0 = (RuleCall)cRgbAssignment_2.eContents().get(0);
		
		//CustomColor:
		//	"color" name=ID rgb=RGB;
		public ParserRule getRule() { return rule; }

		//"color" name=ID rgb=RGB
		public Group getGroup() { return cGroup; }

		//"color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//rgb=RGB
		public Assignment getRgbAssignment_2() { return cRgbAssignment_2; }

		//RGB
		public RuleCall getRgbRGBParserRuleCall_2_0() { return cRgbRGBParserRuleCall_2_0; }
	}

	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRectangleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRectangleRectangleKeyword_0_0_0 = (Keyword)cRectangleAssignment_0_0.eContents().get(0);
		private final Assignment cSquareAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSquareSquareKeyword_0_1_0 = (Keyword)cSquareAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesRectangleFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildrenConnectableElementParserRuleCall_3_0 = (RuleCall)cChildrenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rectangle:
		//	(rectangle?="rectangle" | square?="square") "{" features+=RectangleFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//(rectangle?="rectangle" | square?="square") "{" features+=RectangleFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//rectangle?="rectangle" | square?="square"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//rectangle?="rectangle"
		public Assignment getRectangleAssignment_0_0() { return cRectangleAssignment_0_0; }

		//"rectangle"
		public Keyword getRectangleRectangleKeyword_0_0_0() { return cRectangleRectangleKeyword_0_0_0; }

		//square?="square"
		public Assignment getSquareAssignment_0_1() { return cSquareAssignment_0_1; }

		//"square"
		public Keyword getSquareSquareKeyword_0_1_0() { return cSquareSquareKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=RectangleFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//RectangleFeature
		public RuleCall getFeaturesRectangleFeatureParserRuleCall_2_0() { return cFeaturesRectangleFeatureParserRuleCall_2_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_3() { return cChildrenAssignment_3; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_3_0() { return cChildrenConnectableElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RectangleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RectangleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCornerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RectangleFeature returns Feature:
		//	ConnectableElementFeature | Corner;
		public ParserRule getRule() { return rule; }

		//ConnectableElementFeature | Corner
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectableElementFeature
		public RuleCall getConnectableElementFeatureParserRuleCall_0() { return cConnectableElementFeatureParserRuleCall_0; }

		//Corner
		public RuleCall getCornerParserRuleCall_1() { return cCornerParserRuleCall_1; }
	}

	public class RhombusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rhombus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRhombusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRhombusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenConnectableElementParserRuleCall_4_0 = (RuleCall)cChildrenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rhombus:
		//	{Rhombus} "rhombus" "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//{Rhombus} "rhombus" "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//{Rhombus}
		public Action getRhombusAction_0() { return cRhombusAction_0; }

		//"rhombus"
		public Keyword getRhombusKeyword_1() { return cRhombusKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_3_0() { return cFeaturesConnectableElementFeatureParserRuleCall_3_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_4() { return cChildrenAssignment_4; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_4_0() { return cChildrenConnectableElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEllipseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEllipseEllipseKeyword_0_0_0 = (Keyword)cEllipseAssignment_0_0.eContents().get(0);
		private final Assignment cCircleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCircleCircleKeyword_0_1_0 = (Keyword)cCircleAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildrenConnectableElementParserRuleCall_3_0 = (RuleCall)cChildrenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ellipse:
		//	(ellipse?="ellipse" | circle?="circle") "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//(ellipse?="ellipse" | circle?="circle") "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//ellipse?="ellipse" | circle?="circle"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ellipse?="ellipse"
		public Assignment getEllipseAssignment_0_0() { return cEllipseAssignment_0_0; }

		//"ellipse"
		public Keyword getEllipseEllipseKeyword_0_0_0() { return cEllipseEllipseKeyword_0_0_0; }

		//circle?="circle"
		public Assignment getCircleAssignment_0_1() { return cCircleAssignment_0_1; }

		//"circle"
		public Keyword getCircleCircleKeyword_0_1_0() { return cCircleCircleKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_2_0() { return cFeaturesConnectableElementFeatureParserRuleCall_2_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_3() { return cChildrenAssignment_3; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_3_0() { return cChildrenConnectableElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPolygonAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPolygonPolygonKeyword_0_0_0 = (Keyword)cPolygonAssignment_0_0.eContents().get(0);
		private final Assignment cPolylineAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cPolylinePolylineKeyword_0_1_0 = (Keyword)cPolylineAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPointParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesPointParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesPointParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Assignment cChildrenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChildrenConnectableElementParserRuleCall_6_0 = (RuleCall)cChildrenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Polyline:
		//	(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=Point*
		//	features+=ConnectableElementFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=Point*
		//features+=ConnectableElementFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//polygon?="polygon" | polyline?="polyline"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//polygon?="polygon"
		public Assignment getPolygonAssignment_0_0() { return cPolygonAssignment_0_0; }

		//"polygon"
		public Keyword getPolygonPolygonKeyword_0_0_0() { return cPolygonPolygonKeyword_0_0_0; }

		//polyline?="polyline"
		public Assignment getPolylineAssignment_0_1() { return cPolylineAssignment_0_1; }

		//"polyline"
		public Keyword getPolylinePolylineKeyword_0_1_0() { return cPolylinePolylineKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=Point
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_2_0() { return cFeaturesPointParserRuleCall_2_0; }

		//features+=Point
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_3_0() { return cFeaturesPointParserRuleCall_3_0; }

		//features+=Point*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_4_0() { return cFeaturesPointParserRuleCall_4_0; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_5_0() { return cFeaturesConnectableElementFeatureParserRuleCall_5_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_6() { return cChildrenAssignment_6; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_6_0() { return cChildrenConnectableElementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConnectableElementFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectableElementFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLineStyleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineWidthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContainsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ConnectableElementFeature returns Feature:
		//	Position | Size | ColorFeature | LineStyle | LineWidth | Contains;
		public ParserRule getRule() { return rule; }

		//Position | Size | ColorFeature | LineStyle | LineWidth | Contains
		public Alternatives getAlternatives() { return cAlternatives; }

		//Position
		public RuleCall getPositionParserRuleCall_0() { return cPositionParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_2() { return cColorFeatureParserRuleCall_2; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_3() { return cLineStyleParserRuleCall_3; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_4() { return cLineWidthParserRuleCall_4; }

		//Contains
		public RuleCall getContainsParserRuleCall_5() { return cContainsParserRuleCall_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBackgroundParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForegroundParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTextValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFontFaceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFontSizeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFontStyleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLineStyleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLineWidthParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTransparencyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cCornerParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cContainsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		/// **
		// * Every feature has to be added here, and have:
		// * (conditional=FeatureConditional)?
		// * / Feature:
		//	Size | Position | Point | Background | Foreground | TextValue | FontFace | FontSize | FontStyle | LineStyle |
		//	LineWidth | Transparency | Corner | Contains;
		public ParserRule getRule() { return rule; }

		//Size | Position | Point | Background | Foreground | TextValue | FontFace | FontSize | FontStyle | LineStyle | LineWidth
		//| Transparency | Corner | Contains
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//Point
		public RuleCall getPointParserRuleCall_2() { return cPointParserRuleCall_2; }

		//Background
		public RuleCall getBackgroundParserRuleCall_3() { return cBackgroundParserRuleCall_3; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_4() { return cForegroundParserRuleCall_4; }

		//TextValue
		public RuleCall getTextValueParserRuleCall_5() { return cTextValueParserRuleCall_5; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_6() { return cFontFaceParserRuleCall_6; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_7() { return cFontSizeParserRuleCall_7; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_8() { return cFontStyleParserRuleCall_8; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_9() { return cLineStyleParserRuleCall_9; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_10() { return cLineWidthParserRuleCall_10; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_11() { return cTransparencyParserRuleCall_11; }

		//Corner
		public RuleCall getCornerParserRuleCall_12() { return cCornerParserRuleCall_12; }

		//Contains
		public RuleCall getContainsParserRuleCall_13() { return cContainsParserRuleCall_13; }
	}

	public class FeatureConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_1_0 = (CrossReference)cModelAttributeAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// validate ATT / Value
		//FeatureConditional:
		//	"(" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value ")";
		public ParserRule getRule() { return rule; }

		//"(" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_1() { return cModelAttributeAssignment_1; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_1_0() { return cModelAttributeEAttributeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelReferenceEReferenceCrossReference_2_0 = (CrossReference)cModelReferenceAssignment_2.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_2_0.eContents().get(1);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//Contains:
		//	"contains" ":" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"contains" ":" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_2() { return cModelReferenceAssignment_2; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_2_0() { return cModelReferenceEReferenceCrossReference_2_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// TODO include object type
		//Value:
		//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
		public ParserRule getRule() { return rule; }

		//IntValue | DoubleValue | StringValue | BooleanValue | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_1() { return cDoubleValueParserRuleCall_1; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_4() { return cEnumValueParserRuleCall_4; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueIntAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIntINTTerminalRuleCall_0_0 = (RuleCall)cValueIntAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueDecimalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDecimalINTTerminalRuleCall_2_0 = (RuleCall)cValueDecimalAssignment_2.eContents().get(0);
		
		//DoubleValue:
		//	valueInt=INT "." valueDecimal=INT;
		public ParserRule getRule() { return rule; }

		//valueInt=INT "." valueDecimal=INT
		public Group getGroup() { return cGroup; }

		//valueInt=INT
		public Assignment getValueIntAssignment_0() { return cValueIntAssignment_0; }

		//INT
		public RuleCall getValueIntINTTerminalRuleCall_0_0() { return cValueIntINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//valueDecimal=INT
		public Assignment getValueDecimalAssignment_2() { return cValueDecimalAssignment_2; }

		//INT
		public RuleCall getValueDecimalINTTerminalRuleCall_2_0() { return cValueDecimalINTTerminalRuleCall_2_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNullAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNullNullKeyword_0_0 = (Keyword)cNullAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue:
		//	null?="null" | value=STRING;
		public ParserRule getRule() { return rule; }

		//null?="null" | value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//null?="null"
		public Assignment getNullAssignment_0() { return cNullAssignment_0; }

		//"null"
		public Keyword getNullNullKeyword_0_0() { return cNullNullKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//value=BooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralEnumRuleCall_0() { return cValueBooleanLiteralEnumRuleCall_0; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// TODO validation
		//EnumValue:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AtributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueINTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTINTTerminalRuleCall_0_0 = (RuleCall)cValueINTAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValueINTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueINTINTTerminalRuleCall_1_0_0 = (RuleCall)cValueINTAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueDECAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueDECINTTerminalRuleCall_1_2_0 = (RuleCall)cValueDECAssignment_1_2.eContents().get(0);
		private final Assignment cValueIDAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueIDIDTerminalRuleCall_2_0 = (RuleCall)cValueIDAssignment_2.eContents().get(0);
		private final Assignment cValueBOOLAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cValueBOOLAlternatives_3_0 = (Alternatives)cValueBOOLAssignment_3.eContents().get(0);
		private final Keyword cValueBOOLTrueKeyword_3_0_0 = (Keyword)cValueBOOLAlternatives_3_0.eContents().get(0);
		private final Keyword cValueBOOLFalseKeyword_3_0_1 = (Keyword)cValueBOOLAlternatives_3_0.eContents().get(1);
		private final Assignment cValueSTRINGAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueSTRINGSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueSTRINGAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cValueDAYAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cValueDAYINTTerminalRuleCall_5_0_0 = (RuleCall)cValueDAYAssignment_5_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueMONTHAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueMONTHINTTerminalRuleCall_5_2_0 = (RuleCall)cValueMONTHAssignment_5_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValueYEARAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cValueYEARINTTerminalRuleCall_5_4_0 = (RuleCall)cValueYEARAssignment_5_4.eContents().get(0);
		
		//// enum?
		//AtributeValue:
		//	valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
		//	valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT;
		public ParserRule getRule() { return rule; }

		//valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
		//valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//valueINT=INT
		public Assignment getValueINTAssignment_0() { return cValueINTAssignment_0; }

		//INT
		public RuleCall getValueINTINTTerminalRuleCall_0_0() { return cValueINTINTTerminalRuleCall_0_0; }

		//valueINT=INT "." valueDEC=INT
		public Group getGroup_1() { return cGroup_1; }

		//valueINT=INT
		public Assignment getValueINTAssignment_1_0() { return cValueINTAssignment_1_0; }

		//INT
		public RuleCall getValueINTINTTerminalRuleCall_1_0_0() { return cValueINTINTTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//valueDEC=INT
		public Assignment getValueDECAssignment_1_2() { return cValueDECAssignment_1_2; }

		//INT
		public RuleCall getValueDECINTTerminalRuleCall_1_2_0() { return cValueDECINTTerminalRuleCall_1_2_0; }

		//valueID=ID
		public Assignment getValueIDAssignment_2() { return cValueIDAssignment_2; }

		//ID
		public RuleCall getValueIDIDTerminalRuleCall_2_0() { return cValueIDIDTerminalRuleCall_2_0; }

		//valueBOOL=("true" | "false")
		public Assignment getValueBOOLAssignment_3() { return cValueBOOLAssignment_3; }

		//"true" | "false"
		public Alternatives getValueBOOLAlternatives_3_0() { return cValueBOOLAlternatives_3_0; }

		//"true"
		public Keyword getValueBOOLTrueKeyword_3_0_0() { return cValueBOOLTrueKeyword_3_0_0; }

		//"false"
		public Keyword getValueBOOLFalseKeyword_3_0_1() { return cValueBOOLFalseKeyword_3_0_1; }

		//valueSTRING=STRING
		public Assignment getValueSTRINGAssignment_4() { return cValueSTRINGAssignment_4; }

		//STRING
		public RuleCall getValueSTRINGSTRINGTerminalRuleCall_4_0() { return cValueSTRINGSTRINGTerminalRuleCall_4_0; }

		//valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT
		public Group getGroup_5() { return cGroup_5; }

		//valueDAY=INT
		public Assignment getValueDAYAssignment_5_0() { return cValueDAYAssignment_5_0; }

		//INT
		public RuleCall getValueDAYINTTerminalRuleCall_5_0_0() { return cValueDAYINTTerminalRuleCall_5_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_1() { return cHyphenMinusKeyword_5_1; }

		//valueMONTH=INT
		public Assignment getValueMONTHAssignment_5_2() { return cValueMONTHAssignment_5_2; }

		//INT
		public RuleCall getValueMONTHINTTerminalRuleCall_5_2_0() { return cValueMONTHINTTerminalRuleCall_5_2_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_3() { return cHyphenMinusKeyword_5_3; }

		//valueYEAR=INT
		public Assignment getValueYEARAssignment_5_4() { return cValueYEARAssignment_5_4; }

		//INT
		public RuleCall getValueYEARINTTerminalRuleCall_5_4_0() { return cValueYEARINTTerminalRuleCall_5_4_0; }
	}

	public class FigureFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FigureFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FigureFeature returns Feature:
		//	ColorFeature | Size | Position | Point | LineStyle;
		public ParserRule getRule() { return rule; }

		//ColorFeature | Size | Position | Point | LineStyle
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_0() { return cColorFeatureParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//Position
		public RuleCall getPositionParserRuleCall_2() { return cPositionParserRuleCall_2; }

		//Point
		public RuleCall getPointParserRuleCall_3() { return cPointParserRuleCall_3; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_4() { return cLineStyleParserRuleCall_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEditableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cEditableEditableKeyword_2_0 = (Keyword)cEditableAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLabelFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenConnectableElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO: validation  at most one editable
		//Label:
		//	{Label} "label" editable?="editable"? "{" features+=LabelFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//{Label} "label" editable?="editable"? "{" features+=LabelFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }

		//"label"
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }

		//editable?="editable"?
		public Assignment getEditableAssignment_2() { return cEditableAssignment_2; }

		//"editable"
		public Keyword getEditableEditableKeyword_2_0() { return cEditableEditableKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LabelFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LabelFeature
		public RuleCall getFeaturesLabelFeatureParserRuleCall_4_0() { return cFeaturesLabelFeatureParserRuleCall_4_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_5_0() { return cChildrenConnectableElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LabelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForegroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBackgroundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontFaceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFontSizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFontStyleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//LabelFeature returns Feature:
		//	TextValue | Foreground | Background | FontFace | FontSize | FontStyle;
		public ParserRule getRule() { return rule; }

		//TextValue | Foreground | Background | FontFace | FontSize | FontStyle
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextValue
		public RuleCall getTextValueParserRuleCall_0() { return cTextValueParserRuleCall_0; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_1() { return cForegroundParserRuleCall_1; }

		//Background
		public RuleCall getBackgroundParserRuleCall_2() { return cBackgroundParserRuleCall_2; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_3() { return cFontFaceParserRuleCall_3; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_4() { return cFontSizeParserRuleCall_4; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_5() { return cFontStyleParserRuleCall_5; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImageImageFileCrossReference_1_0 = (CrossReference)cImageAssignment_1.eContents().get(0);
		private final RuleCall cImageImageFileIDTerminalRuleCall_1_0_1 = (RuleCall)cImageImageFileCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesImageFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenConnectableElementParserRuleCall_4_0 = (RuleCall)cChildrenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Image:
		//	"image" image=[ImageFile] "{" features+=ImageFeature* children+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//"image" image=[ImageFile] "{" features+=ImageFeature* children+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//image=[ImageFile]
		public Assignment getImageAssignment_1() { return cImageAssignment_1; }

		//[ImageFile]
		public CrossReference getImageImageFileCrossReference_1_0() { return cImageImageFileCrossReference_1_0; }

		//ID
		public RuleCall getImageImageFileIDTerminalRuleCall_1_0_1() { return cImageImageFileIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=ImageFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//ImageFeature
		public RuleCall getFeaturesImageFeatureParserRuleCall_3_0() { return cFeaturesImageFeatureParserRuleCall_3_0; }

		//children+=ConnectableElement*
		public Assignment getChildrenAssignment_4() { return cChildrenAssignment_4; }

		//ConnectableElement
		public RuleCall getChildrenConnectableElementParserRuleCall_4_0() { return cChildrenConnectableElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransparencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ImageFeature returns Feature:
		//	Size | Position | Transparency;
		public ParserRule getRule() { return rule; }

		//Size | Position | Transparency
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_2() { return cTransparencyParserRuleCall_2; }
	}

	public class LinkFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////LinkElement:
		////	'line' lineType=LineType '{'
		////	features+=LinkFeature*
		////	'}'
		////;
		//LinkFeature returns Feature:
		//	Foreground | LineStyle | LineWidth;
		public ParserRule getRule() { return rule; }

		//Foreground | LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_1() { return cLineStyleParserRuleCall_1; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_2() { return cLineWidthParserRuleCall_2; }
	}

	public class ColorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColorFeature:
		//	Foreground | //| Border
		//	Background;
		public ParserRule getRule() { return rule; }

		//Foreground | //| Border
		//Background
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		////| Border
		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }
	}

	public class ForegroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreground");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForegroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//Foreground:
		//	"foreground" ":" color=Color conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"foreground" ":" color=Color conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"foreground"
		public Keyword getForegroundKeyword_0() { return cForegroundKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackgroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//Background:
		//	"background" ":" color=Color conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"background" ":" color=Color conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"background"
		public Keyword getBackgroundKeyword_0() { return cBackgroundKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class TransparencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transparency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransparencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPercentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPercentPERCENTTerminalRuleCall_2_0 = (RuleCall)cPercentAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		////Border:
		////	'border' ':' color=Color
		////;
		//// validation
		//Transparency:
		//	"transparency" ":" percent=PERCENT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"transparency" ":" percent=PERCENT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"transparency"
		public Keyword getTransparencyKeyword_0() { return cTransparencyKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//percent=PERCENT
		public Assignment getPercentAssignment_2() { return cPercentAssignment_2; }

		//PERCENT
		public RuleCall getPercentPERCENTTerminalRuleCall_2_0() { return cPercentPERCENTTerminalRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeightINTTerminalRuleCall_4_0 = (RuleCall)cHeightAssignment_4.eContents().get(0);
		private final Assignment cConditionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_5_0 = (RuleCall)cConditionalAssignment_5.eContents().get(0);
		
		////Width:
		////	'width' ':' width=INT
		////;
		//Size:
		//	"size" ":" width=INT "x" height=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"size" ":" width=INT "x" height=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//width=INT
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0() { return cWidthINTTerminalRuleCall_2_0; }

		//"x"
		public Keyword getXKeyword_3() { return cXKeyword_3; }

		//height=INT
		public Assignment getHeightAssignment_4() { return cHeightAssignment_4; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_4_0() { return cHeightINTTerminalRuleCall_4_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_5() { return cConditionalAssignment_5; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_5_0() { return cConditionalFeatureConditionalParserRuleCall_5_0; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Assignment cConditionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_5_0 = (RuleCall)cConditionalAssignment_5.eContents().get(0);
		
		//Point:
		//	"point" ":" x=INT "," y=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"point" ":" x=INT "," y=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"point"
		public Keyword getPointKeyword_0() { return cPointKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_5() { return cConditionalAssignment_5; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_5_0() { return cConditionalFeatureConditionalParserRuleCall_5_0; }
	}

	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Assignment cConditionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_5_0 = (RuleCall)cConditionalAssignment_5.eContents().get(0);
		
		//Position:
		//	"position" ":" x=INT "," y=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"position" ":" x=INT "," y=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_5() { return cConditionalAssignment_5; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_5_0() { return cConditionalFeatureConditionalParserRuleCall_5_0; }
	}

	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCornerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//Corner:
		//	"corner" ":" angle=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"corner" ":" angle=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"corner"
		public Keyword getCornerKeyword_0() { return cCornerKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }

		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class TextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cTextAssignment_2_0.eContents().get(0);
		private final Assignment cModelAttributeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_2_1_0 = (CrossReference)cModelAttributeAssignment_2_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//// TODO: validation of owned attribute
		//TextValue:
		//	"text" ":" (text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName]) conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"text" ":" (text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName]) conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//text=STRING
		public Assignment getTextAssignment_2_0() { return cTextAssignment_2_0; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0_0() { return cTextSTRINGTerminalRuleCall_2_0_0; }

		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_2_1() { return cModelAttributeAssignment_2_1; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_2_1_0() { return cModelAttributeEAttributeCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_2_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_2_1_0_1; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class FontFaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontFace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontFaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFaceFontFaceTypeEnumRuleCall_2_0 = (RuleCall)cFaceAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//FontFace:
		//	"font-face" ":" face=FontFaceType conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-face" ":" face=FontFaceType conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-face"
		public Keyword getFontFaceKeyword_0() { return cFontFaceKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//face=FontFaceType
		public Assignment getFaceAssignment_2() { return cFaceAssignment_2; }

		//FontFaceType
		public RuleCall getFaceFontFaceTypeEnumRuleCall_2_0() { return cFaceFontFaceTypeEnumRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//FontSize:
		//	"font-size" ":" size=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-size" ":" size=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-size"
		public Keyword getFontSizeKeyword_0() { return cFontSizeKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class FontStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStylesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_2_0 = (RuleCall)cStylesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStylesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_3_1_0 = (RuleCall)cStylesAssignment_3_1.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		
		//FontStyle:
		//	"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-style"
		public Keyword getFontStyleKeyword_0() { return cFontStyleKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_2() { return cStylesAssignment_2; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_2_0() { return cStylesFontStyleTypeEnumRuleCall_2_0; }

		//("," styles+=FontStyleType)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_3_1() { return cStylesAssignment_3_1; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_3_1_0() { return cStylesFontStyleTypeEnumRuleCall_3_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_4_0() { return cConditionalFeatureConditionalParserRuleCall_4_0; }
	}

	public class LineStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleLineTypeEnumRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//LineStyle:
		//	"line-style" ":" style=LineType conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"line-style" ":" style=LineType conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"line-style"
		public Keyword getLineStyleKeyword_0() { return cLineStyleKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//style=LineType
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//LineType
		public RuleCall getStyleLineTypeEnumRuleCall_2_0() { return cStyleLineTypeEnumRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class LineWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//LineWidth:
		//	"line-width" ":" width=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"line-width" ":" width=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"line-width"
		public Keyword getLineWidthKeyword_0() { return cLineWidthKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//width=INT
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0() { return cWidthINTTerminalRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}
	
	
	public class ContainerLayoutElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerLayout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTACKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTACKStackKeyword_0_0 = (Keyword)cSTACKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFREEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFREEFreeKeyword_1_0 = (Keyword)cFREEEnumLiteralDeclaration_1.eContents().get(0);
		
		//// TODO vstack / hstack
		//enum ContainerLayout:
		//	STACK="stack" | FREE="free";
		public EnumRule getRule() { return rule; }

		//STACK="stack" | FREE="free"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STACK="stack"
		public EnumLiteralDeclaration getSTACKEnumLiteralDeclaration_0() { return cSTACKEnumLiteralDeclaration_0; }

		//"stack"
		public Keyword getSTACKStackKeyword_0_0() { return cSTACKStackKeyword_0_0; }

		//FREE="free"
		public EnumLiteralDeclaration getFREEEnumLiteralDeclaration_1() { return cFREEEnumLiteralDeclaration_1; }

		//"free"
		public Keyword getFREEFreeKeyword_1_0() { return cFREEFreeKeyword_1_0; }
	}

	public class AnchorConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCOMINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCOMINGLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cINCOMINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTGOINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTGOINGHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cOUTGOINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AnchorConstraintType:
		//	INCOMING="<-" | OUTGOING="->";
		public EnumRule getRule() { return rule; }

		//INCOMING="<-" | OUTGOING="->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCOMING="<-"
		public EnumLiteralDeclaration getINCOMINGEnumLiteralDeclaration_0() { return cINCOMINGEnumLiteralDeclaration_0; }

		//"<-"
		public Keyword getINCOMINGLessThanSignHyphenMinusKeyword_0_0() { return cINCOMINGLessThanSignHyphenMinusKeyword_0_0; }

		//OUTGOING="->"
		public EnumLiteralDeclaration getOUTGOINGEnumLiteralDeclaration_1() { return cOUTGOINGEnumLiteralDeclaration_1; }

		//"->"
		public Keyword getOUTGOINGHyphenMinusGreaterThanSignKeyword_1_0() { return cOUTGOINGHyphenMinusGreaterThanSignKeyword_1_0; }
	}

	public class DefaultColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLUEBlueKeyword_1_0 = (Keyword)cBLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cYELLOWYellowKeyword_2_0 = (Keyword)cYELLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//// TODO : 16 standard
		//enum DefaultColor:
		//	RED="red" | BLUE="blue" | YELLOW="yellow";
		public EnumRule getRule() { return rule; }

		//RED="red" | BLUE="blue" | YELLOW="yellow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }

		//"red"
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_1() { return cBLUEEnumLiteralDeclaration_1; }

		//"blue"
		public Keyword getBLUEBlueKeyword_1_0() { return cBLUEBlueKeyword_1_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_2() { return cYELLOWEnumLiteralDeclaration_2; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_2_0() { return cYELLOWYellowKeyword_2_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cDIFFERENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator:
		//	EQUAL="=" | DIFFERENT="<>";
		public EnumRule getRule() { return rule; }

		//EQUAL="=" | DIFFERENT="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }

		//DIFFERENT="<>"
		public EnumLiteralDeclaration getDIFFERENTEnumLiteralDeclaration_1() { return cDIFFERENTEnumLiteralDeclaration_1; }

		//"<>"
		public Keyword getDIFFERENTLessThanSignGreaterThanSignKeyword_1_0() { return cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0; }
	}

	public class BooleanLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteral:
		//	TRUE="true" | FALSE="false";
		public EnumRule getRule() { return rule; }

		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }

		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}

	public class FontFaceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontFaceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cARIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cARIALArialKeyword_0_0 = (Keyword)cARIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERDANAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERDANAVerdanaKeyword_1_0 = (Keyword)cVERDANAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTIMESTimesKeyword_2_0 = (Keyword)cTIMESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOURIEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOURIERCourierKeyword_3_0 = (Keyword)cCOURIEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FontFaceType:
		//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
		public EnumRule getRule() { return rule; }

		//ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ARIAL="arial"
		public EnumLiteralDeclaration getARIALEnumLiteralDeclaration_0() { return cARIALEnumLiteralDeclaration_0; }

		//"arial"
		public Keyword getARIALArialKeyword_0_0() { return cARIALArialKeyword_0_0; }

		//VERDANA="verdana"
		public EnumLiteralDeclaration getVERDANAEnumLiteralDeclaration_1() { return cVERDANAEnumLiteralDeclaration_1; }

		//"verdana"
		public Keyword getVERDANAVerdanaKeyword_1_0() { return cVERDANAVerdanaKeyword_1_0; }

		//TIMES="times"
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_2() { return cTIMESEnumLiteralDeclaration_2; }

		//"times"
		public Keyword getTIMESTimesKeyword_2_0() { return cTIMESTimesKeyword_2_0; }

		//COURIER="courier"
		public EnumLiteralDeclaration getCOURIEREnumLiteralDeclaration_3() { return cCOURIEREnumLiteralDeclaration_3; }

		//"courier"
		public Keyword getCOURIERCourierKeyword_3_0() { return cCOURIERCourierKeyword_3_0; }
	}

	public class FontStyleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cITALICSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cITALICSItalicsKeyword_0_0 = (Keyword)cITALICSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOLDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOLDBoldKeyword_1_0 = (Keyword)cBOLDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNDERLINEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNDERLINEUnderlineKeyword_2_0 = (Keyword)cUNDERLINEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FontStyleType:
		//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
		public EnumRule getRule() { return rule; }

		//ITALICS="italics" | BOLD="bold" | UNDERLINE="underline"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ITALICS="italics"
		public EnumLiteralDeclaration getITALICSEnumLiteralDeclaration_0() { return cITALICSEnumLiteralDeclaration_0; }

		//"italics"
		public Keyword getITALICSItalicsKeyword_0_0() { return cITALICSItalicsKeyword_0_0; }

		//BOLD="bold"
		public EnumLiteralDeclaration getBOLDEnumLiteralDeclaration_1() { return cBOLDEnumLiteralDeclaration_1; }

		//"bold"
		public Keyword getBOLDBoldKeyword_1_0() { return cBOLDBoldKeyword_1_0; }

		//UNDERLINE="underline"
		public EnumLiteralDeclaration getUNDERLINEEnumLiteralDeclaration_2() { return cUNDERLINEEnumLiteralDeclaration_2; }

		//"underline"
		public Keyword getUNDERLINEUnderlineKeyword_2_0() { return cUNDERLINEUnderlineKeyword_2_0; }
	}

	public class LineTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LineType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOLIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOLIDSolidKeyword_0_0 = (Keyword)cSOLIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDASHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDASHDashKeyword_1_0 = (Keyword)cDASHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LineType:
		//	SOLID="solid" | DASH="dash";
		public EnumRule getRule() { return rule; }

		//SOLID="solid" | DASH="dash"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SOLID="solid"
		public EnumLiteralDeclaration getSOLIDEnumLiteralDeclaration_0() { return cSOLIDEnumLiteralDeclaration_0; }

		//"solid"
		public Keyword getSOLIDSolidKeyword_0_0() { return cSOLIDSolidKeyword_0_0; }

		//DASH="dash"
		public EnumLiteralDeclaration getDASHEnumLiteralDeclaration_1() { return cDASHEnumLiteralDeclaration_1; }

		//"dash"
		public Keyword getDASHDashKeyword_1_0() { return cDASHDashKeyword_1_0; }
	}
	
	private XDiagramElements pXDiagram;
	private ImportStatementElements pImportStatement;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private StyleElements pStyle;
	private DiagramElementElements pDiagramElement;
	private NodeElements pNode;
	private AttributeElements pAttribute;
	private NodeContainerElements pNodeContainer;
	private ContainerLayoutElements unknownRuleContainerLayout;
	private LinkElements pLink;
	private DecoratorElements pDecorator;
	private StaticElementElements pStaticElement;
	private AnchorElements pAnchor;
	private AnchorConstraintElements pAnchorConstraint;
	private AnchorConstraintTypeElements unknownRuleAnchorConstraintType;
	private ElementElements pElement;
	private ConnectableElementElements pConnectableElement;
	private RGBElements pRGB;
	private ImageFileElements pImageFile;
	private ColorElements pColor;
	private CustomColorElements pCustomColor;
	private DefaultColorElements unknownRuleDefaultColor;
	private RectangleElements pRectangle;
	private RectangleFeatureElements pRectangleFeature;
	private RhombusElements pRhombus;
	private EllipseElements pEllipse;
	private PolylineElements pPolyline;
	private ConnectableElementFeatureElements pConnectableElementFeature;
	private FeatureElements pFeature;
	private FeatureConditionalElements pFeatureConditional;
	private ContainsElements pContains;
	private OperatorElements unknownRuleOperator;
	private ValueElements pValue;
	private IntValueElements pIntValue;
	private DoubleValueElements pDoubleValue;
	private StringValueElements pStringValue;
	private BooleanValueElements pBooleanValue;
	private BooleanLiteralElements unknownRuleBooleanLiteral;
	private EnumValueElements pEnumValue;
	private AtributeValueElements pAtributeValue;
	private FigureFeatureElements pFigureFeature;
	private LabelElements pLabel;
	private LabelFeatureElements pLabelFeature;
	private ImageElements pImage;
	private ImageFeatureElements pImageFeature;
	private LinkFeatureElements pLinkFeature;
	private ColorFeatureElements pColorFeature;
	private ForegroundElements pForeground;
	private BackgroundElements pBackground;
	private TransparencyElements pTransparency;
	private SizeElements pSize;
	private PointElements pPoint;
	private PositionElements pPosition;
	private CornerElements pCorner;
	private TextValueElements pTextValue;
	private FontFaceElements pFontFace;
	private FontSizeElements pFontSize;
	private FontStyleElements pFontStyle;
	private FontFaceTypeElements unknownRuleFontFaceType;
	private FontStyleTypeElements unknownRuleFontStyleType;
	private LineStyleElements pLineStyle;
	private LineTypeElements unknownRuleLineType;
	private LineWidthElements pLineWidth;
	private TerminalRule tPERCENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDiagramGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.xdiagram.xtext.XDiagram".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XDiagram:
	//	"metamodel" importURI=STRING imports+=ImportStatement "diagram" modelClass=[ecore::EClass|QualifiedName] (nodes+=Node
	//	| links+=Link | styles+=Style | colors+=CustomColor | images+=ImageFile)*;
	public XDiagramElements getXDiagramAccess() {
		return (pXDiagram != null) ? pXDiagram : (pXDiagram = new XDiagramElements());
	}
	
	public ParserRule getXDiagramRule() {
		return getXDiagramAccess().getRule();
	}

	//// importedNamespace apparently cannot be on the root element
	//ImportStatement:
	//	{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Style:
	//	"style" ":" name=ID "{" features+=Feature* "}";
	public StyleElements getStyleAccess() {
		return (pStyle != null) ? pStyle : (pStyle = new StyleElements());
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//// TODO: common: text / icon / tooltip
	//DiagramElement:
	//	Node | Link;
	public DiagramElementElements getDiagramElementAccess() {
		return (pDiagramElement != null) ? pDiagramElement : (pDiagramElement = new DiagramElementElements());
	}
	
	public ParserRule getDiagramElementRule() {
		return getDiagramElementAccess().getRule();
	}

	//// resizable default?
	//// TODO validation: unique nodes
	//// notation inheritance?
	//Node:
	//	"node" modelClass=[ecore::EClass|QualifiedName] "{" ("set" ":" resizable?="resizable"?)? ("style" style=ID)? ("icon"
	//	icon=ID)? ("name" name=STRING)? mainFigure=ConnectableElement attributes+=Attribute* //    	(figures += NodeFigure2) |
	//
	//	//	(containers += NodeContainer) |
	//	anchors+=Anchor* "}";
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//// TODO : EMF default value
	//Attribute:
	//	"set" key=ID "=" value=AtributeValue;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//// main? só Figure?
	////NodeFigure:
	////	'figure' (option=('main'))? ':' element=ConnectableElement (',' 'style' ':' style=ID)?
	////;
	////NodeFigure:
	////	'figure' ':' element=ConnectableElement
	////;
	//// TODO validation
	//// for passar para figura? so uma figura?
	//NodeContainer:
	//	"container" layout=ContainerLayout? ("for" modelReference=[ecore::EReference|QualifiedName])? (":" value=INT
	//	format=("%" | "px"))? "{" figures+=ConnectableElement+ "}";
	public NodeContainerElements getNodeContainerAccess() {
		return (pNodeContainer != null) ? pNodeContainer : (pNodeContainer = new NodeContainerElements());
	}
	
	public ParserRule getNodeContainerRule() {
		return getNodeContainerAccess().getRule();
	}

	//// TODO vstack / hstack
	//enum ContainerLayout:
	//	STACK="stack" | FREE="free";
	public ContainerLayoutElements getContainerLayoutAccess() {
		return (unknownRuleContainerLayout != null) ? unknownRuleContainerLayout : (unknownRuleContainerLayout = new ContainerLayoutElements());
	}
	
	public EnumRule getContainerLayoutRule() {
		return getContainerLayoutAccess().getRule();
	}

	//// TODO: validation - complex requires source e target, complex structure
	//// TODO text / icon
	//Link:
	//	"link" (modelReference=[ecore::EReference|QualifiedName] | complex?="object" modelClass=[ecore::EClass|QualifiedName]
	//	"source" sourceReference=[ecore::EReference|QualifiedName] "target" targetReference=[ecore::EReference|QualifiedName])
	//	"{" manhattan?="manhattan"? ("style" style=ID)? ("icon" icon=ID)? ("name" name=STRING)? attributes+=Attribute*
	//	features+=LinkFeature* decorators+=Decorator* "}";
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//// % opcional? ou considerar pixeis?
	//// ter "constantes" para origem destino
	////	'}'
	//Decorator:
	//	"decorator" ("at" position=INT "%" | source?="source" | target?="target" | middle?="middle")
	//	(staticElement=StaticElement //	'{'			
	//	| label=Label)?;
	public DecoratorElements getDecoratorAccess() {
		return (pDecorator != null) ? pDecorator : (pDecorator = new DecoratorElements());
	}
	
	public ParserRule getDecoratorRule() {
		return getDecoratorAccess().getRule();
	}

	//StaticElement returns ConnectableElement:
	//	Rhombus | //| Arrow | Triangle
	//	Polyline;
	public StaticElementElements getStaticElementAccess() {
		return (pStaticElement != null) ? pStaticElement : (pStaticElement = new StaticElementElements());
	}
	
	public ParserRule getStaticElementRule() {
		return getStaticElementAccess().getRule();
	}

	//// TODO: model ids / name Anchor
	//// anchor to?
	//Anchor:
	//	"anchor" ("to" object=ID)? ":" passX="-"? X=INT formatX=("%" | "lf" | "rg") "," passY="-"? Y=INT formatY=("%" | "up" |
	//	"dw") "{" figures+=ConnectableElement* constraints+=AnchorConstraint* "}";
	public AnchorElements getAnchorAccess() {
		return (pAnchor != null) ? pAnchor : (pAnchor = new AnchorElements());
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}

	//// TODO: model ids - change syntax / name AnchorConstraint -- N connections?
	//AnchorConstraint:
	//	"for" type=AnchorConstraintType? reference=ID ("max" ":" max=INT)?;
	public AnchorConstraintElements getAnchorConstraintAccess() {
		return (pAnchorConstraint != null) ? pAnchorConstraint : (pAnchorConstraint = new AnchorConstraintElements());
	}
	
	public ParserRule getAnchorConstraintRule() {
		return getAnchorConstraintAccess().getRule();
	}

	//enum AnchorConstraintType:
	//	INCOMING="<-" | OUTGOING="->";
	public AnchorConstraintTypeElements getAnchorConstraintTypeAccess() {
		return (unknownRuleAnchorConstraintType != null) ? unknownRuleAnchorConstraintType : (unknownRuleAnchorConstraintType = new AnchorConstraintTypeElements());
	}
	
	public EnumRule getAnchorConstraintTypeRule() {
		return getAnchorConstraintTypeAccess().getRule();
	}

	//Element:
	//	ConnectableElement | Link;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//// TODO: invisible figure?
	//ConnectableElement:
	//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image;
	public ConnectableElementElements getConnectableElementAccess() {
		return (pConnectableElement != null) ? pConnectableElement : (pConnectableElement = new ConnectableElementElements());
	}
	
	public ParserRule getConnectableElementRule() {
		return getConnectableElementAccess().getRule();
	}

	//RGB:
	//	R=INT "," G=INT "," B=INT;
	public RGBElements getRGBAccess() {
		return (pRGB != null) ? pRGB : (pRGB = new RGBElements());
	}
	
	public ParserRule getRGBRule() {
		return getRGBAccess().getRule();
	}

	//ImageFile:
	//	"image" name=ID src=STRING;
	public ImageFileElements getImageFileAccess() {
		return (pImageFile != null) ? pImageFile : (pImageFile = new ImageFileElements());
	}
	
	public ParserRule getImageFileRule() {
		return getImageFileAccess().getRule();
	}

	//Color:
	//	default=DefaultColor | custom=[CustomColor];
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//CustomColor:
	//	"color" name=ID rgb=RGB;
	public CustomColorElements getCustomColorAccess() {
		return (pCustomColor != null) ? pCustomColor : (pCustomColor = new CustomColorElements());
	}
	
	public ParserRule getCustomColorRule() {
		return getCustomColorAccess().getRule();
	}

	//// TODO : 16 standard
	//enum DefaultColor:
	//	RED="red" | BLUE="blue" | YELLOW="yellow";
	public DefaultColorElements getDefaultColorAccess() {
		return (unknownRuleDefaultColor != null) ? unknownRuleDefaultColor : (unknownRuleDefaultColor = new DefaultColorElements());
	}
	
	public EnumRule getDefaultColorRule() {
		return getDefaultColorAccess().getRule();
	}

	//Rectangle:
	//	(rectangle?="rectangle" | square?="square") "{" features+=RectangleFeature* children+=ConnectableElement* "}";
	public RectangleElements getRectangleAccess() {
		return (pRectangle != null) ? pRectangle : (pRectangle = new RectangleElements());
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}

	//RectangleFeature returns Feature:
	//	ConnectableElementFeature | Corner;
	public RectangleFeatureElements getRectangleFeatureAccess() {
		return (pRectangleFeature != null) ? pRectangleFeature : (pRectangleFeature = new RectangleFeatureElements());
	}
	
	public ParserRule getRectangleFeatureRule() {
		return getRectangleFeatureAccess().getRule();
	}

	//Rhombus:
	//	{Rhombus} "rhombus" "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}";
	public RhombusElements getRhombusAccess() {
		return (pRhombus != null) ? pRhombus : (pRhombus = new RhombusElements());
	}
	
	public ParserRule getRhombusRule() {
		return getRhombusAccess().getRule();
	}

	//Ellipse:
	//	(ellipse?="ellipse" | circle?="circle") "{" features+=ConnectableElementFeature* children+=ConnectableElement* "}";
	public EllipseElements getEllipseAccess() {
		return (pEllipse != null) ? pEllipse : (pEllipse = new EllipseElements());
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}

	//Polyline:
	//	(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=Point*
	//	features+=ConnectableElementFeature* children+=ConnectableElement* "}";
	public PolylineElements getPolylineAccess() {
		return (pPolyline != null) ? pPolyline : (pPolyline = new PolylineElements());
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}

	//ConnectableElementFeature returns Feature:
	//	Position | Size | ColorFeature | LineStyle | LineWidth | Contains;
	public ConnectableElementFeatureElements getConnectableElementFeatureAccess() {
		return (pConnectableElementFeature != null) ? pConnectableElementFeature : (pConnectableElementFeature = new ConnectableElementFeatureElements());
	}
	
	public ParserRule getConnectableElementFeatureRule() {
		return getConnectableElementFeatureAccess().getRule();
	}

	/// **
	// * Every feature has to be added here, and have:
	// * (conditional=FeatureConditional)?
	// * / Feature:
	//	Size | Position | Point | Background | Foreground | TextValue | FontFace | FontSize | FontStyle | LineStyle |
	//	LineWidth | Transparency | Corner | Contains;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//// validate ATT / Value
	//FeatureConditional:
	//	"(" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value ")";
	public FeatureConditionalElements getFeatureConditionalAccess() {
		return (pFeatureConditional != null) ? pFeatureConditional : (pFeatureConditional = new FeatureConditionalElements());
	}
	
	public ParserRule getFeatureConditionalRule() {
		return getFeatureConditionalAccess().getRule();
	}

	//Contains:
	//	"contains" ":" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
	public ContainsElements getContainsAccess() {
		return (pContains != null) ? pContains : (pContains = new ContainsElements());
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}

	//enum Operator:
	//	EQUAL="=" | DIFFERENT="<>";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//// TODO include object type
	//Value:
	//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//DoubleValue:
	//	valueInt=INT "." valueDecimal=INT;
	public DoubleValueElements getDoubleValueAccess() {
		return (pDoubleValue != null) ? pDoubleValue : (pDoubleValue = new DoubleValueElements());
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}

	//StringValue:
	//	null?="null" | value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//BooleanValue:
	//	value=BooleanLiteral;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//enum BooleanLiteral:
	//	TRUE="true" | FALSE="false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (unknownRuleBooleanLiteral != null) ? unknownRuleBooleanLiteral : (unknownRuleBooleanLiteral = new BooleanLiteralElements());
	}
	
	public EnumRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// TODO validation
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//// enum?
	//AtributeValue:
	//	valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
	//	valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT;
	public AtributeValueElements getAtributeValueAccess() {
		return (pAtributeValue != null) ? pAtributeValue : (pAtributeValue = new AtributeValueElements());
	}
	
	public ParserRule getAtributeValueRule() {
		return getAtributeValueAccess().getRule();
	}

	//FigureFeature returns Feature:
	//	ColorFeature | Size | Position | Point | LineStyle;
	public FigureFeatureElements getFigureFeatureAccess() {
		return (pFigureFeature != null) ? pFigureFeature : (pFigureFeature = new FigureFeatureElements());
	}
	
	public ParserRule getFigureFeatureRule() {
		return getFigureFeatureAccess().getRule();
	}

	//// TODO: validation  at most one editable
	//Label:
	//	{Label} "label" editable?="editable"? "{" features+=LabelFeature* children+=ConnectableElement* "}";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//LabelFeature returns Feature:
	//	TextValue | Foreground | Background | FontFace | FontSize | FontStyle;
	public LabelFeatureElements getLabelFeatureAccess() {
		return (pLabelFeature != null) ? pLabelFeature : (pLabelFeature = new LabelFeatureElements());
	}
	
	public ParserRule getLabelFeatureRule() {
		return getLabelFeatureAccess().getRule();
	}

	//Image:
	//	"image" image=[ImageFile] "{" features+=ImageFeature* children+=ConnectableElement* "}";
	public ImageElements getImageAccess() {
		return (pImage != null) ? pImage : (pImage = new ImageElements());
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//ImageFeature returns Feature:
	//	Size | Position | Transparency;
	public ImageFeatureElements getImageFeatureAccess() {
		return (pImageFeature != null) ? pImageFeature : (pImageFeature = new ImageFeatureElements());
	}
	
	public ParserRule getImageFeatureRule() {
		return getImageFeatureAccess().getRule();
	}

	////LinkElement:
	////	'line' lineType=LineType '{'
	////	features+=LinkFeature*
	////	'}'
	////;
	//LinkFeature returns Feature:
	//	Foreground | LineStyle | LineWidth;
	public LinkFeatureElements getLinkFeatureAccess() {
		return (pLinkFeature != null) ? pLinkFeature : (pLinkFeature = new LinkFeatureElements());
	}
	
	public ParserRule getLinkFeatureRule() {
		return getLinkFeatureAccess().getRule();
	}

	//ColorFeature:
	//	Foreground | //| Border
	//	Background;
	public ColorFeatureElements getColorFeatureAccess() {
		return (pColorFeature != null) ? pColorFeature : (pColorFeature = new ColorFeatureElements());
	}
	
	public ParserRule getColorFeatureRule() {
		return getColorFeatureAccess().getRule();
	}

	//Foreground:
	//	"foreground" ":" color=Color conditional=FeatureConditional?;
	public ForegroundElements getForegroundAccess() {
		return (pForeground != null) ? pForeground : (pForeground = new ForegroundElements());
	}
	
	public ParserRule getForegroundRule() {
		return getForegroundAccess().getRule();
	}

	//Background:
	//	"background" ":" color=Color conditional=FeatureConditional?;
	public BackgroundElements getBackgroundAccess() {
		return (pBackground != null) ? pBackground : (pBackground = new BackgroundElements());
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	////Border:
	////	'border' ':' color=Color
	////;
	//// validation
	//Transparency:
	//	"transparency" ":" percent=PERCENT conditional=FeatureConditional?;
	public TransparencyElements getTransparencyAccess() {
		return (pTransparency != null) ? pTransparency : (pTransparency = new TransparencyElements());
	}
	
	public ParserRule getTransparencyRule() {
		return getTransparencyAccess().getRule();
	}

	////Width:
	////	'width' ':' width=INT
	////;
	//Size:
	//	"size" ":" width=INT "x" height=INT conditional=FeatureConditional?;
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//Point:
	//	"point" ":" x=INT "," y=INT conditional=FeatureConditional?;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Position:
	//	"position" ":" x=INT "," y=INT conditional=FeatureConditional?;
	public PositionElements getPositionAccess() {
		return (pPosition != null) ? pPosition : (pPosition = new PositionElements());
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//Corner:
	//	"corner" ":" angle=INT conditional=FeatureConditional?;
	public CornerElements getCornerAccess() {
		return (pCorner != null) ? pCorner : (pCorner = new CornerElements());
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}

	//// TODO: validation of owned attribute
	//TextValue:
	//	"text" ":" (text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName]) conditional=FeatureConditional?;
	public TextValueElements getTextValueAccess() {
		return (pTextValue != null) ? pTextValue : (pTextValue = new TextValueElements());
	}
	
	public ParserRule getTextValueRule() {
		return getTextValueAccess().getRule();
	}

	//FontFace:
	//	"font-face" ":" face=FontFaceType conditional=FeatureConditional?;
	public FontFaceElements getFontFaceAccess() {
		return (pFontFace != null) ? pFontFace : (pFontFace = new FontFaceElements());
	}
	
	public ParserRule getFontFaceRule() {
		return getFontFaceAccess().getRule();
	}

	//FontSize:
	//	"font-size" ":" size=INT conditional=FeatureConditional?;
	public FontSizeElements getFontSizeAccess() {
		return (pFontSize != null) ? pFontSize : (pFontSize = new FontSizeElements());
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}

	//FontStyle:
	//	"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?;
	public FontStyleElements getFontStyleAccess() {
		return (pFontStyle != null) ? pFontStyle : (pFontStyle = new FontStyleElements());
	}
	
	public ParserRule getFontStyleRule() {
		return getFontStyleAccess().getRule();
	}

	//enum FontFaceType:
	//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
	public FontFaceTypeElements getFontFaceTypeAccess() {
		return (unknownRuleFontFaceType != null) ? unknownRuleFontFaceType : (unknownRuleFontFaceType = new FontFaceTypeElements());
	}
	
	public EnumRule getFontFaceTypeRule() {
		return getFontFaceTypeAccess().getRule();
	}

	//enum FontStyleType:
	//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
	public FontStyleTypeElements getFontStyleTypeAccess() {
		return (unknownRuleFontStyleType != null) ? unknownRuleFontStyleType : (unknownRuleFontStyleType = new FontStyleTypeElements());
	}
	
	public EnumRule getFontStyleTypeRule() {
		return getFontStyleTypeAccess().getRule();
	}

	//LineStyle:
	//	"line-style" ":" style=LineType conditional=FeatureConditional?;
	public LineStyleElements getLineStyleAccess() {
		return (pLineStyle != null) ? pLineStyle : (pLineStyle = new LineStyleElements());
	}
	
	public ParserRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}

	//enum LineType:
	//	SOLID="solid" | DASH="dash";
	public LineTypeElements getLineTypeAccess() {
		return (unknownRuleLineType != null) ? unknownRuleLineType : (unknownRuleLineType = new LineTypeElements());
	}
	
	public EnumRule getLineTypeRule() {
		return getLineTypeAccess().getRule();
	}

	//LineWidth:
	//	"line-width" ":" width=INT conditional=FeatureConditional?;
	public LineWidthElements getLineWidthAccess() {
		return (pLineWidth != null) ? pLineWidth : (pLineWidth = new LineWidthElements());
	}
	
	public ParserRule getLineWidthRule() {
		return getLineWidthAccess().getRule();
	}

	//terminal PERCENT:
	//	("0" | "1".."9" "0".."9"? | "100") "%";
	public TerminalRule getPERCENTRule() {
		return (tPERCENT != null) ? tPERCENT : (tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
