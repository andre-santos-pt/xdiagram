/*
 * generated by Xtext
 */
package org.eclipselabs.xdiagram.xtext.validation;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipselabs.xdiagram.xtext.xdiagram.Decorator;
import org.eclipselabs.xdiagram.xtext.xdiagram.DiagramElement;
import org.eclipselabs.xdiagram.xtext.xdiagram.Label;
import org.eclipselabs.xdiagram.xtext.xdiagram.Link;
import org.eclipselabs.xdiagram.xtext.xdiagram.Node;
import org.eclipselabs.xdiagram.xtext.xdiagram.NodeContainer;
import org.eclipselabs.xdiagram.xtext.xdiagram.TextValue;
import org.eclipselabs.xdiagram.xtext.xdiagram.XDiagram;
import org.eclipselabs.xdiagram.xtext.xdiagram.XdiagramPackage;

/**
 * Model validation rules
 */
public class XDiagramJavaValidator extends org.eclipselabs.xdiagram.xtext.validation.AbstractXDiagramJavaValidator {

	@Check
	public void checkEcoreExists(XDiagram diagram) {
		String ecoreUri = diagram.getImportURI();
		URI uri = URI.createURI(ecoreUri);
		//		if(!uri.isFile())
		//			error("invalid ecore model", XdiagramPackage.Literals.XDIAGRAM__IMPORT_URI);
	}


	//?
	public void validateUniqueNodes(XDiagram diagram) {
		for(Node n : diagram.getNodes()) {

		}
	}

	@Check
	public void checkTextValue(TextValue v) {
		if(v.getModelAttribute() != null) {
			Label label = (Label) v.eContainer();
			EObject labelContainer = label.eContainer();
			if(labelContainer instanceof Node) {
				EObject parent = labelContainer.eContainer();
//				if(parent instanceof NodeContainer)
//					parent = parent.eContainer();

				// TODO: crawl up
//				if(!((Node) parent).getModelClass().getEAllAttributes().contains(v.getModelAttribute()))
//					error("attribute must be owned by node model class", XdiagramPackage.Literals.TEXT_VALUE__TEXT);
			}
			else if(labelContainer instanceof Decorator) {
				Link link = (Link) labelContainer.eContainer();
				if(link.isComplex()) {
					if(!link.getModelClass().getEAllAttributes().contains(v.getModelAttribute()))
						error("attribute must be owned by link model class", XdiagramPackage.Literals.TEXT_VALUE__TEXT);
				}
				else {
//					if(!((EClass) link.getModelReference().eContainer()).getEAllAttributes().contains(v.getModelAttribute()))
					error("dynamic labels in simple links are not supported", XdiagramPackage.Literals.TEXT_VALUE__TEXT);
				}
			}
		}
	}

	@Check
	public void checkDiagramElements(DiagramElement node) {

		EClass clazz = node.getModelClass();
		if(clazz != null && clazz.isAbstract())
			error("model class cannot be abstract", XdiagramPackage.Literals.DIAGRAM_ELEMENT__MODEL_CLASS);

	}


	@Check
	public void checkContainer(NodeContainer container) {
		Node parent = (Node) container.eContainer();
		EReference ref = container.getModelReference();
		if(!ref.getEContainingClass().equals(parent.getModelClass()))
			error("reference must be owned by the node model class", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);

		if(!ref.isContainment())
			error("reference must be containment", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);


	}

	@Check
	public void checkGreetingStartsWithCapital(Link link) {
		if (link.isComplex() && link.getModelClass().getName().startsWith("C")) {
			//			warning("ERRO!", link, XdiagramPackage.Literals.LINK__MODEL_CLASS);
		}
	}

	@Check
	public void checkOthen(Node node) {
		//		if (node.isResizable()) {
		//			error("RES!!!", node, XdiagramPackage.Literals.NODE__RESIZABLE);
		//		}
	}

}
