/*
* generated by Xtext
*/
package org.eclipselabs.xdiagram.xtext.validation;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipselabs.xdiagram.xtext.xdiagram.DiagramElement;
import org.eclipselabs.xdiagram.xtext.xdiagram.Link;
import org.eclipselabs.xdiagram.xtext.xdiagram.Node;
import org.eclipselabs.xdiagram.xtext.xdiagram.NodeContainer;
import org.eclipselabs.xdiagram.xtext.xdiagram.XDiagram;
import org.eclipselabs.xdiagram.xtext.xdiagram.XdiagramPackage;

/**
 * Model validation rules
 */
public class XDiagramJavaValidator extends org.eclipselabs.xdiagram.xtext.validation.AbstractXDiagramJavaValidator {

	@Check
	public void checkEcoreExists(XDiagram diagram) {
		String ecoreUri = diagram.getImportURI();
		URI uri = URI.createURI(ecoreUri);
//		if(!uri.isFile())
//			error("invalid ecore model", XdiagramPackage.Literals.XDIAGRAM__IMPORT_URI);
	}
	

	//?
	public void validateUniqueNodes(XDiagram diagram) {
		for(Node n : diagram.getNodes()) {
			
		}
	}
	
	@Check
	public void checkDiagramElements(DiagramElement node) {
		
		EClass clazz = node.getModelClass();
		if(clazz != null && clazz.isAbstract())
			error("model class cannot be abstract", XdiagramPackage.Literals.DIAGRAM_ELEMENT__MODEL_CLASS);
		
	}
	
	
	@Check
	public void checkContainer(NodeContainer container) {
		Node parent = (Node) container.eContainer();
		EReference ref = container.getModelReference();
		if(!ref.getEContainingClass().equals(parent.getModelClass()))
			error("reference must be owned by the node model class", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);

		if(!ref.isContainment())
			error("reference must be containment", XdiagramPackage.Literals.NODE_CONTAINER__MODEL_REFERENCE);
		
		
	}
	
	@Check
	public void checkGreetingStartsWithCapital(Link link) {
		if (link.isComplex() && link.getModelClass().getName().startsWith("C")) {
//			warning("ERRO!", link, XdiagramPackage.Literals.LINK__MODEL_CLASS);
		}
	}
	
	@Check
	public void checkOthen(Node node) {
//		if (node.isResizable()) {
//			error("RES!!!", node, XdiagramPackage.Literals.NODE__RESIZABLE);
//		}
	}

}
