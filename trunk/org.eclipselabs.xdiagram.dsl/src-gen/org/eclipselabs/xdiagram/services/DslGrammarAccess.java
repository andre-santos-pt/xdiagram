/*
* generated by Xtext
*/
package org.eclipselabs.xdiagram.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cDiagramAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiagramDiagramParserRuleCall_3_0 = (RuleCall)cDiagramAssignment_3.eContents().get(0);
		private final Assignment cGroupsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroupsGroupParserRuleCall_4_0 = (RuleCall)cGroupsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cElementsDiagramElementParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Assignment cStylesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cStylesStyleParserRuleCall_5_1_0 = (RuleCall)cStylesAssignment_5_1.eContents().get(0);
		private final Assignment cColorsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cColorsCustomColorParserRuleCall_5_2_0 = (RuleCall)cColorsAssignment_5_2.eContents().get(0);
		private final Assignment cFiguresAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cFiguresCustomFigureParserRuleCall_5_3_0 = (RuleCall)cFiguresAssignment_5_3.eContents().get(0);
		
		//XDiagram:
		//	"metamodel" importURI=STRING imports+=ImportStatement diagram=Diagram groups+=Group* (elements+=DiagramElement |
		//	styles+=Style | colors+=CustomColor | figures+=CustomFigure)*;
		public ParserRule getRule() { return rule; }

		//"metamodel" importURI=STRING imports+=ImportStatement diagram=Diagram groups+=Group* (elements+=DiagramElement |
		//styles+=Style | colors+=CustomColor | figures+=CustomFigure)*
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//imports+=ImportStatement
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_2_0() { return cImportsImportStatementParserRuleCall_2_0; }

		//diagram=Diagram
		public Assignment getDiagramAssignment_3() { return cDiagramAssignment_3; }

		//Diagram
		public RuleCall getDiagramDiagramParserRuleCall_3_0() { return cDiagramDiagramParserRuleCall_3_0; }

		//groups+=Group*
		public Assignment getGroupsAssignment_4() { return cGroupsAssignment_4; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_4_0() { return cGroupsGroupParserRuleCall_4_0; }

		//(elements+=DiagramElement | styles+=Style | colors+=CustomColor | figures+=CustomFigure)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//elements+=DiagramElement
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }

		//DiagramElement
		public RuleCall getElementsDiagramElementParserRuleCall_5_0_0() { return cElementsDiagramElementParserRuleCall_5_0_0; }

		//styles+=Style
		public Assignment getStylesAssignment_5_1() { return cStylesAssignment_5_1; }

		//Style
		public RuleCall getStylesStyleParserRuleCall_5_1_0() { return cStylesStyleParserRuleCall_5_1_0; }

		//colors+=CustomColor
		public Assignment getColorsAssignment_5_2() { return cColorsAssignment_5_2; }

		//CustomColor
		public RuleCall getColorsCustomColorParserRuleCall_5_2_0() { return cColorsCustomColorParserRuleCall_5_2_0; }

		//figures+=CustomFigure
		public Assignment getFiguresAssignment_5_3() { return cFiguresAssignment_5_3; }

		//CustomFigure
		public RuleCall getFiguresCustomFigureParserRuleCall_5_3_0() { return cFiguresCustomFigureParserRuleCall_5_3_0; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		
		//// importedNamespace apparently cannot be on the root element
		//ImportStatement:
		//	{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?;
		public ParserRule getRule() { return rule; }

		//{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup() { return cGroup; }

		//{ImportStatement}
		public Action getImportStatementAction_0() { return cImportStatementAction_0; }

		//("import" importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup_1() { return cGroup_1; }

		//"import"
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_0 = (CrossReference)cModelClassAssignment_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsContainsParserRuleCall_3_0 = (RuleCall)cContainsAssignment_3.eContents().get(0);
		private final Assignment cFiguresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFiguresConnectableElementParserRuleCall_4_0 = (RuleCall)cFiguresAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Diagram:
		//	"diagram" modelClass=[ecore::EClass|QualifiedName] "{" contains+=Contains* figures+=ConnectableElement* "}";
		public ParserRule getRule() { return rule; }

		//"diagram" modelClass=[ecore::EClass|QualifiedName] "{" contains+=Contains* figures+=ConnectableElement* "}"
		public Group getGroup() { return cGroup; }

		//"diagram"
		public Keyword getDiagramKeyword_0() { return cDiagramKeyword_0; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1() { return cModelClassAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_0() { return cModelClassEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//contains+=Contains*
		public Assignment getContainsAssignment_3() { return cContainsAssignment_3; }

		//Contains
		public RuleCall getContainsContainsParserRuleCall_3_0() { return cContainsContainsParserRuleCall_3_0; }

		//figures+=ConnectableElement*
		public Assignment getFiguresAssignment_4() { return cFiguresAssignment_4; }

		//ConnectableElement
		public RuleCall getFiguresConnectableElementParserRuleCall_4_0() { return cFiguresConnectableElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Group:
		//	"group" name=ID;
		public ParserRule getRule() { return rule; }

		//"group" name=ID
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DiagramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiagramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiagramElement:
		//	Node | Link;
		public ParserRule getRule() { return rule; }

		//Node | Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }

		//Link
		public RuleCall getLinkParserRuleCall_1() { return cLinkParserRuleCall_1; }
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledExtendsKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesStyleFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Style:
		//	"style" name=ID (styled?="extends" style=[Style])? "{" features+=StyleFeature* "}";
		public ParserRule getRule() { return rule; }

		//"style" name=ID (styled?="extends" style=[Style])? "{" features+=StyleFeature* "}"
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(styled?="extends" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="extends"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"extends"
		public Keyword getStyledExtendsKeyword_2_0_0() { return cStyledExtendsKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=StyleFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//StyleFeature
		public RuleCall getFeaturesStyleFeatureParserRuleCall_4_0() { return cFeaturesStyleFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStyleFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkedFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Every feature has to be added here, and have:
		// * (conditional=FeatureConditional)?
		// * / Feature:
		//	StyleFeature | LinkedFeature;
		public ParserRule getRule() { return rule; }

		//StyleFeature | LinkedFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//StyleFeature
		public RuleCall getStyleFeatureParserRuleCall_0() { return cStyleFeatureParserRuleCall_0; }

		//LinkedFeature
		public RuleCall getLinkedFeatureParserRuleCall_1() { return cLinkedFeatureParserRuleCall_1; }
	}

	public class LinkedFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkedFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnchorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LinkedFeature returns Feature:
		//	Contains | Anchor;
		public ParserRule getRule() { return rule; }

		//Contains | Anchor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Contains
		public RuleCall getContainsParserRuleCall_0() { return cContainsParserRuleCall_0; }

		//Anchor
		public RuleCall getAnchorParserRuleCall_1() { return cAnchorParserRuleCall_1; }
	}

	public class StyleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCornerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBackgroundParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForegroundParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransparencyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFontFaceParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFontSizeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFontStyleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTextValueParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLineStyleParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLineWidthParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//StyleFeature returns Feature:
		//	Size | Position | Point | Corner | Background | Foreground | Transparency | FontFace | FontSize | FontStyle |
		//	TextValue | LineStyle | LineWidth;
		public ParserRule getRule() { return rule; }

		//Size | Position | Point | Corner | Background | Foreground | Transparency | FontFace | FontSize | FontStyle | TextValue
		//| LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//Point
		public RuleCall getPointParserRuleCall_2() { return cPointParserRuleCall_2; }

		//Corner
		public RuleCall getCornerParserRuleCall_3() { return cCornerParserRuleCall_3; }

		//Background
		public RuleCall getBackgroundParserRuleCall_4() { return cBackgroundParserRuleCall_4; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_5() { return cForegroundParserRuleCall_5; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_6() { return cTransparencyParserRuleCall_6; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_7() { return cFontFaceParserRuleCall_7; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_8() { return cFontSizeParserRuleCall_8; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_9() { return cFontStyleParserRuleCall_9; }

		//TextValue
		public RuleCall getTextValueParserRuleCall_10() { return cTextValueParserRuleCall_10; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_11() { return cLineStyleParserRuleCall_11; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_12() { return cLineWidthParserRuleCall_12; }
	}

	public class FeatureContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecoratorElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStyleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FeatureContainer:
		//	ConnectableElement | DecoratorElement | Link | Style;
		public ParserRule getRule() { return rule; }

		//ConnectableElement | DecoratorElement | Link | Style
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectableElement
		public RuleCall getConnectableElementParserRuleCall_0() { return cConnectableElementParserRuleCall_0; }

		//DecoratorElement
		public RuleCall getDecoratorElementParserRuleCall_1() { return cDecoratorElementParserRuleCall_1; }

		//Link
		public RuleCall getLinkParserRuleCall_2() { return cLinkParserRuleCall_2; }

		//Style
		public RuleCall getStyleParserRuleCall_3() { return cStyleParserRuleCall_3; }
	}

	public class ChildElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChildElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ChildElement returns FeatureContainer:
		//	ConnectableElement | Line | Arrow;
		public ParserRule getRule() { return rule; }

		//ConnectableElement | Line | Arrow
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectableElement
		public RuleCall getConnectableElementParserRuleCall_0() { return cConnectableElementParserRuleCall_0; }

		//Line
		public RuleCall getLineParserRuleCall_1() { return cLineParserRuleCall_1; }

		//Arrow
		public RuleCall getArrowParserRuleCall_2() { return cArrowParserRuleCall_2; }
	}

	public class FeatureConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_1_0 = (CrossReference)cModelAttributeAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// validate ATT / Value
		//FeatureConditional:
		//	"if" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value;
		public ParserRule getRule() { return rule; }

		//"if" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_1() { return cModelAttributeAssignment_1; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_1_0() { return cModelAttributeEAttributeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_0 = (CrossReference)cModelClassAssignment_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToolnameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cToolNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cToolNameSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cToolNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cColonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cGroupAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cGroupGroupCrossReference_3_2_1_0 = (CrossReference)cGroupAssignment_3_2_1.eContents().get(0);
		private final RuleCall cGroupGroupIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cGroupGroupCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIconKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImageIdAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImageIdIDTerminalRuleCall_4_1_0 = (RuleCall)cImageIdAssignment_4_1.eContents().get(0);
		private final Assignment cRootFigureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRootFigureConnectableElementParserRuleCall_5_0 = (RuleCall)cRootFigureAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO validation: unique nodes
		//// notation inheritance?
		//Node:
		//	"node" modelClass=[ecore::EClass|QualifiedName] "{" ("toolname" toolName=STRING (":" group=[Group])?)? ("icon"
		//	imageId=ID)? rootFigure=ConnectableElement "}";
		public ParserRule getRule() { return rule; }

		//"node" modelClass=[ecore::EClass|QualifiedName] "{" ("toolname" toolName=STRING (":" group=[Group])?)? ("icon"
		//imageId=ID)? rootFigure=ConnectableElement "}"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1() { return cModelClassAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_0() { return cModelClassEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("toolname" toolName=STRING (":" group=[Group])?)?
		public Group getGroup_3() { return cGroup_3; }

		//"toolname"
		public Keyword getToolnameKeyword_3_0() { return cToolnameKeyword_3_0; }

		//toolName=STRING
		public Assignment getToolNameAssignment_3_1() { return cToolNameAssignment_3_1; }

		//STRING
		public RuleCall getToolNameSTRINGTerminalRuleCall_3_1_0() { return cToolNameSTRINGTerminalRuleCall_3_1_0; }

		//(":" group=[Group])?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//":"
		public Keyword getColonKeyword_3_2_0() { return cColonKeyword_3_2_0; }

		//group=[Group]
		public Assignment getGroupAssignment_3_2_1() { return cGroupAssignment_3_2_1; }

		//[Group]
		public CrossReference getGroupGroupCrossReference_3_2_1_0() { return cGroupGroupCrossReference_3_2_1_0; }

		//ID
		public RuleCall getGroupGroupIDTerminalRuleCall_3_2_1_0_1() { return cGroupGroupIDTerminalRuleCall_3_2_1_0_1; }

		//("icon" imageId=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"icon"
		public Keyword getIconKeyword_4_0() { return cIconKeyword_4_0; }

		//imageId=ID
		public Assignment getImageIdAssignment_4_1() { return cImageIdAssignment_4_1; }

		//ID
		public RuleCall getImageIdIDTerminalRuleCall_4_1_0() { return cImageIdIDTerminalRuleCall_4_1_0; }

		//rootFigure=ConnectableElement
		public Assignment getRootFigureAssignment_5() { return cRootFigureAssignment_5; }

		//ConnectableElement
		public RuleCall getRootFigureConnectableElementParserRuleCall_5_0() { return cRootFigureConnectableElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cReferenceReferenceKeyword_1_0_0_0 = (Keyword)cReferenceAssignment_1_0_0.eContents().get(0);
		private final Assignment cModelReferenceAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cModelReferenceEReferenceCrossReference_1_0_1_0 = (CrossReference)cModelReferenceAssignment_1_0_1.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cComplexAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cComplexObjectKeyword_1_1_0_0 = (Keyword)cComplexAssignment_1_1_0.eContents().get(0);
		private final Assignment cModelClassAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_1_1_0 = (CrossReference)cModelClassAssignment_1_1_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cSourceKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cSourceReferenceAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cSourceReferenceEReferenceCrossReference_1_1_3_0 = (CrossReference)cSourceReferenceAssignment_1_1_3.eContents().get(0);
		private final RuleCall cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1 = (RuleCall)cSourceReferenceEReferenceCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cTargetKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cTargetReferenceAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final CrossReference cTargetReferenceEReferenceCrossReference_1_1_5_0 = (CrossReference)cTargetReferenceAssignment_1_1_5.eContents().get(0);
		private final RuleCall cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1 = (RuleCall)cTargetReferenceEReferenceCrossReference_1_1_5_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cToolNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cToolNameSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cToolNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cGroupAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cGroupGroupCrossReference_2_1_1_0 = (CrossReference)cGroupAssignment_2_1_1.eContents().get(0);
		private final RuleCall cGroupGroupIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cGroupGroupCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIconKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImageIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImageIdIDTerminalRuleCall_3_1_0 = (RuleCall)cImageIdAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cConnectionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeConnectionTypeEnumRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cStyledAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_7_0_0 = (Keyword)cStyledAssignment_7_0.eContents().get(0);
		private final Assignment cStyleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_7_1_0 = (CrossReference)cStyleAssignment_7_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_7_1_0_1 = (RuleCall)cStyleStyleCrossReference_7_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFeaturesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFeaturesLinkFeatureParserRuleCall_9_0 = (RuleCall)cFeaturesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// TODO: validation - complex requires source e target, complex structure
		//// TODO text / icon
		//Link:
		//	"link" (reference?="reference" modelReference=[ecore::EReference|QualifiedName] | complex?="object"
		//	modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName] "target"
		//	targetReference=[ecore::EReference|QualifiedName]) (toolName=STRING (":" group=[Group])?)? ("icon" imageId=ID)? "{"
		//	"connection" type=ConnectionType (styled?="+" style=[Style])? "{" features+=LinkFeature* //decorators += Decorator*	
		//	"}" "}";
		public ParserRule getRule() { return rule; }

		//"link" (reference?="reference" modelReference=[ecore::EReference|QualifiedName] | complex?="object"
		//modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName] "target"
		//targetReference=[ecore::EReference|QualifiedName]) (toolName=STRING (":" group=[Group])?)? ("icon" imageId=ID)? "{"
		//"connection" type=ConnectionType (styled?="+" style=[Style])? "{" features+=LinkFeature* //decorators += Decorator*	
		//"}" "}"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//reference?="reference" modelReference=[ecore::EReference|QualifiedName] | complex?="object"
		//modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName] "target"
		//targetReference=[ecore::EReference|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//reference?="reference" modelReference=[ecore::EReference|QualifiedName]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//reference?="reference"
		public Assignment getReferenceAssignment_1_0_0() { return cReferenceAssignment_1_0_0; }

		//"reference"
		public Keyword getReferenceReferenceKeyword_1_0_0_0() { return cReferenceReferenceKeyword_1_0_0_0; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_1_0_1() { return cModelReferenceAssignment_1_0_1; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_1_0_1_0() { return cModelReferenceEReferenceCrossReference_1_0_1_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1; }

		//complex?="object" modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName]
		//"target" targetReference=[ecore::EReference|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//complex?="object"
		public Assignment getComplexAssignment_1_1_0() { return cComplexAssignment_1_1_0; }

		//"object"
		public Keyword getComplexObjectKeyword_1_1_0_0() { return cComplexObjectKeyword_1_1_0_0; }

		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1_1_1() { return cModelClassAssignment_1_1_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_1_1_0() { return cModelClassEClassCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1; }

		//"source"
		public Keyword getSourceKeyword_1_1_2() { return cSourceKeyword_1_1_2; }

		//sourceReference=[ecore::EReference|QualifiedName]
		public Assignment getSourceReferenceAssignment_1_1_3() { return cSourceReferenceAssignment_1_1_3; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getSourceReferenceEReferenceCrossReference_1_1_3_0() { return cSourceReferenceEReferenceCrossReference_1_1_3_0; }

		//QualifiedName
		public RuleCall getSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1() { return cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1; }

		//"target"
		public Keyword getTargetKeyword_1_1_4() { return cTargetKeyword_1_1_4; }

		//targetReference=[ecore::EReference|QualifiedName]
		public Assignment getTargetReferenceAssignment_1_1_5() { return cTargetReferenceAssignment_1_1_5; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getTargetReferenceEReferenceCrossReference_1_1_5_0() { return cTargetReferenceEReferenceCrossReference_1_1_5_0; }

		//QualifiedName
		public RuleCall getTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1() { return cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1; }

		//(toolName=STRING (":" group=[Group])?)?
		public Group getGroup_2() { return cGroup_2; }

		//toolName=STRING
		public Assignment getToolNameAssignment_2_0() { return cToolNameAssignment_2_0; }

		//STRING
		public RuleCall getToolNameSTRINGTerminalRuleCall_2_0_0() { return cToolNameSTRINGTerminalRuleCall_2_0_0; }

		//(":" group=[Group])?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }

		//group=[Group]
		public Assignment getGroupAssignment_2_1_1() { return cGroupAssignment_2_1_1; }

		//[Group]
		public CrossReference getGroupGroupCrossReference_2_1_1_0() { return cGroupGroupCrossReference_2_1_1_0; }

		//ID
		public RuleCall getGroupGroupIDTerminalRuleCall_2_1_1_0_1() { return cGroupGroupIDTerminalRuleCall_2_1_1_0_1; }

		//("icon" imageId=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"icon"
		public Keyword getIconKeyword_3_0() { return cIconKeyword_3_0; }

		//imageId=ID
		public Assignment getImageIdAssignment_3_1() { return cImageIdAssignment_3_1; }

		//ID
		public RuleCall getImageIdIDTerminalRuleCall_3_1_0() { return cImageIdIDTerminalRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"connection"
		public Keyword getConnectionKeyword_5() { return cConnectionKeyword_5; }

		//type=ConnectionType
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//ConnectionType
		public RuleCall getTypeConnectionTypeEnumRuleCall_6_0() { return cTypeConnectionTypeEnumRuleCall_6_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_7() { return cGroup_7; }

		//styled?="+"
		public Assignment getStyledAssignment_7_0() { return cStyledAssignment_7_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_7_0_0() { return cStyledPlusSignKeyword_7_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_7_1() { return cStyleAssignment_7_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_7_1_0() { return cStyleStyleCrossReference_7_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_7_1_0_1() { return cStyleStyleIDTerminalRuleCall_7_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//features+=LinkFeature*
		public Assignment getFeaturesAssignment_9() { return cFeaturesAssignment_9; }

		//LinkFeature
		public RuleCall getFeaturesLinkFeatureParserRuleCall_9_0() { return cFeaturesLinkFeatureParserRuleCall_9_0; }

		////decorators += Decorator*	
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class LinkFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecoratorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LinkFeature returns Feature:
		//	Foreground | LineStyle | LineWidth | Decorator;
		public ParserRule getRule() { return rule; }

		//Foreground | LineStyle | LineWidth | Decorator
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_1() { return cLineStyleParserRuleCall_1; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_2() { return cLineWidthParserRuleCall_2; }

		//Decorator
		public RuleCall getDecoratorParserRuleCall_3() { return cDecoratorParserRuleCall_3; }
	}

	public class DecoratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decorator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecoratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionINTTerminalRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Assignment cElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementDecoratorElementParserRuleCall_4_0 = (RuleCall)cElementAssignment_4.eContents().get(0);
		
		//// % opcional? ou considerar pixeis?
		//// ter "constantes" para origem destino
		//// TODO validation %
		//// TODO validation children of decorator
		//Decorator:
		//	"decorator" position=INT "%" conditional=FeatureConditional? element=DecoratorElement;
		public ParserRule getRule() { return rule; }

		//"decorator" position=INT "%" conditional=FeatureConditional? element=DecoratorElement
		public Group getGroup() { return cGroup; }

		//"decorator"
		public Keyword getDecoratorKeyword_0() { return cDecoratorKeyword_0; }

		//position=INT
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }

		//INT
		public RuleCall getPositionINTTerminalRuleCall_1_0() { return cPositionINTTerminalRuleCall_1_0; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }

		//element=DecoratorElement
		public Assignment getElementAssignment_4() { return cElementAssignment_4; }

		//DecoratorElement
		public RuleCall getElementDecoratorElementParserRuleCall_4_0() { return cElementDecoratorElementParserRuleCall_4_0; }
	}

	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Anchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnchorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionAnchorDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cModelReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelReferenceEReferenceCrossReference_2_0 = (CrossReference)cModelReferenceAssignment_2.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_2_0.eContents().get(1);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//// TODO validation
		//Anchor:
		//	"anchor" direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"anchor" direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"anchor"
		public Keyword getAnchorKeyword_0() { return cAnchorKeyword_0; }

		//direction=AnchorDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//AnchorDirection
		public RuleCall getDirectionAnchorDirectionEnumRuleCall_1_0() { return cDirectionAnchorDirectionEnumRuleCall_1_0; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_2() { return cModelReferenceAssignment_2; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_2_0() { return cModelReferenceEReferenceCrossReference_2_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class CustomColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRINTTerminalRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGINTTerminalRuleCall_4_0 = (RuleCall)cGAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBINTTerminalRuleCall_6_0 = (RuleCall)cBAssignment_6.eContents().get(0);
		
		////---------------------------------------
		//// Colors
		//CustomColor:
		//	"color" name=ID R=INT "," G=INT "," B=INT;
		public ParserRule getRule() { return rule; }

		//"color" name=ID R=INT "," G=INT "," B=INT
		public Group getGroup() { return cGroup; }

		//"color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//R=INT
		public Assignment getRAssignment_2() { return cRAssignment_2; }

		//INT
		public RuleCall getRINTTerminalRuleCall_2_0() { return cRINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//G=INT
		public Assignment getGAssignment_4() { return cGAssignment_4; }

		//INT
		public RuleCall getGINTTerminalRuleCall_4_0() { return cGINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//B=INT
		public Assignment getBAssignment_6() { return cBAssignment_6; }

		//INT
		public RuleCall getBINTTerminalRuleCall_6_0() { return cBINTTerminalRuleCall_6_0; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultDefaultColorEnumRuleCall_0_0 = (RuleCall)cDefaultAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomCustomColorCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomCustomColorIDTerminalRuleCall_1_0_1 = (RuleCall)cCustomCustomColorCrossReference_1_0.eContents().get(1);
		
		//Color:
		//	default=DefaultColor | custom=[CustomColor];
		public ParserRule getRule() { return rule; }

		//default=DefaultColor | custom=[CustomColor]
		public Alternatives getAlternatives() { return cAlternatives; }

		//default=DefaultColor
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }

		//DefaultColor
		public RuleCall getDefaultDefaultColorEnumRuleCall_0_0() { return cDefaultDefaultColorEnumRuleCall_0_0; }

		//custom=[CustomColor]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }

		//[CustomColor]
		public CrossReference getCustomCustomColorCrossReference_1_0() { return cCustomCustomColorCrossReference_1_0; }

		//ID
		public RuleCall getCustomCustomColorIDTerminalRuleCall_1_0_1() { return cCustomCustomColorIDTerminalRuleCall_1_0_1; }
	}

	public class ConnectableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPolylineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInvisibleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCustomParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTriangleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////---------------------------------------
		//// Connectable Elements
		/// *
		// * Every connectable element must be included here, and have:
		// * (composite?='children:' children+=ConnectableElement+)?
		// * children+=ChildElement*
		// * (styled?='+' style=[Style])?
		// * / ConnectableElement:
		//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle;
		public ParserRule getRule() { return rule; }

		//Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rectangle
		public RuleCall getRectangleParserRuleCall_0() { return cRectangleParserRuleCall_0; }

		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }

		//Ellipse
		public RuleCall getEllipseParserRuleCall_2() { return cEllipseParserRuleCall_2; }

		//Polyline
		public RuleCall getPolylineParserRuleCall_3() { return cPolylineParserRuleCall_3; }

		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }

		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }

		//Invisible
		public RuleCall getInvisibleParserRuleCall_6() { return cInvisibleParserRuleCall_6; }

		//Custom
		public RuleCall getCustomParserRuleCall_7() { return cCustomParserRuleCall_7; }

		//Triangle
		public RuleCall getTriangleParserRuleCall_8() { return cTriangleParserRuleCall_8; }
	}

	public class DecoratorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecoratorElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPolylineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTriangleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLineParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//DecoratorElement returns FeatureContainer:
		//	Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line;
		public ParserRule getRule() { return rule; }

		//Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line
		public Alternatives getAlternatives() { return cAlternatives; }

		//Ellipse
		public RuleCall getEllipseParserRuleCall_0() { return cEllipseParserRuleCall_0; }

		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }

		//Polyline
		public RuleCall getPolylineParserRuleCall_2() { return cPolylineParserRuleCall_2; }

		//Triangle
		public RuleCall getTriangleParserRuleCall_3() { return cTriangleParserRuleCall_3; }

		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }

		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }

		//Arrow
		public RuleCall getArrowParserRuleCall_6() { return cArrowParserRuleCall_6; }

		//Line
		public RuleCall getLineParserRuleCall_7() { return cLineParserRuleCall_7; }
	}

	public class ConnectableElementFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectableElementFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLineStyleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineWidthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContainsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAnchorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLayoutParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cVisibleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////LineElement returns Element:
		////	Arrow | Line
		////;
		//ConnectableElementFeature returns Feature:
		//	Position | Size | ColorFeature | LineStyle | LineWidth | Contains | Anchor | Layout | Visible;
		public ParserRule getRule() { return rule; }

		//Position | Size | ColorFeature | LineStyle | LineWidth | Contains | Anchor | Layout | Visible
		public Alternatives getAlternatives() { return cAlternatives; }

		//Position
		public RuleCall getPositionParserRuleCall_0() { return cPositionParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_2() { return cColorFeatureParserRuleCall_2; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_3() { return cLineStyleParserRuleCall_3; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_4() { return cLineWidthParserRuleCall_4; }

		//Contains
		public RuleCall getContainsParserRuleCall_5() { return cContainsParserRuleCall_5; }

		//Anchor
		public RuleCall getAnchorParserRuleCall_6() { return cAnchorParserRuleCall_6; }

		//Layout
		public RuleCall getLayoutParserRuleCall_7() { return cLayoutParserRuleCall_7; }

		//Visible
		public RuleCall getVisibleParserRuleCall_8() { return cVisibleParserRuleCall_8; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayoutContainerLayoutEnumRuleCall_1_0 = (RuleCall)cLayoutAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//Layout:
		//	"layout" layout=ContainerLayout conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"layout" layout=ContainerLayout conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"layout"
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }

		//layout=ContainerLayout
		public Assignment getLayoutAssignment_1() { return cLayoutAssignment_1; }

		//ContainerLayout
		public RuleCall getLayoutContainerLayoutEnumRuleCall_1_0() { return cLayoutContainerLayoutEnumRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class VisibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvisibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_1_0 = (RuleCall)cConditionalAssignment_1.eContents().get(0);
		
		//Visible:
		//	"invisible" conditional=FeatureConditional;
		public ParserRule getRule() { return rule; }

		//"invisible" conditional=FeatureConditional
		public Group getGroup() { return cGroup; }

		//"invisible"
		public Keyword getInvisibleKeyword_0() { return cInvisibleKeyword_0; }

		//conditional=FeatureConditional
		public Assignment getConditionalAssignment_1() { return cConditionalAssignment_1; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_1_0() { return cConditionalFeatureConditionalParserRuleCall_1_0; }
	}

	public class CustomFigureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomFigure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementConnectableElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//CustomFigure:
		//	"figure" name=ID "as" element=ConnectableElement;
		public ParserRule getRule() { return rule; }

		//"figure" name=ID "as" element=ConnectableElement
		public Group getGroup() { return cGroup; }

		//"figure"
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//element=ConnectableElement
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }

		//ConnectableElement
		public RuleCall getElementConnectableElementParserRuleCall_3_0() { return cElementConnectableElementParserRuleCall_3_0; }
	}

	public class CustomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Custom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFigureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFigureCustomFigureCrossReference_1_0 = (CrossReference)cFigureAssignment_1.eContents().get(0);
		private final RuleCall cFigureCustomFigureIDTerminalRuleCall_1_0_1 = (RuleCall)cFigureCustomFigureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLinkedFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Custom:
		//	"figure" figure=[CustomFigure] (styled?="+" style=[Style])? "{" features+=LinkedFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//"figure" figure=[CustomFigure] (styled?="+" style=[Style])? "{" features+=LinkedFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//"figure"
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }

		//figure=[CustomFigure]
		public Assignment getFigureAssignment_1() { return cFigureAssignment_1; }

		//[CustomFigure]
		public CrossReference getFigureCustomFigureCrossReference_1_0() { return cFigureCustomFigureCrossReference_1_0; }

		//ID
		public RuleCall getFigureCustomFigureIDTerminalRuleCall_1_0_1() { return cFigureCustomFigureIDTerminalRuleCall_1_0_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LinkedFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LinkedFeature
		public RuleCall getFeaturesLinkedFeatureParserRuleCall_4_0() { return cFeaturesLinkedFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRectangleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRectangleRectangleKeyword_0_0_0 = (Keyword)cRectangleAssignment_0_0.eContents().get(0);
		private final Assignment cSquareAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSquareSquareKeyword_0_1_0 = (Keyword)cSquareAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStyledAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_1_0_0 = (Keyword)cStyledAssignment_1_0.eContents().get(0);
		private final Assignment cStyleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_1_1_0 = (CrossReference)cStyleAssignment_1_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStyleStyleCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesRectangleFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenChildElementParserRuleCall_4_0 = (RuleCall)cChildrenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rectangle:
		//	(rectangle?="rectangle" | square?="square") (styled?="+" style=[Style])? "{" features+=RectangleFeature*
		//	children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//(rectangle?="rectangle" | square?="square") (styled?="+" style=[Style])? "{" features+=RectangleFeature*
		//children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//rectangle?="rectangle" | square?="square"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//rectangle?="rectangle"
		public Assignment getRectangleAssignment_0_0() { return cRectangleAssignment_0_0; }

		//"rectangle"
		public Keyword getRectangleRectangleKeyword_0_0_0() { return cRectangleRectangleKeyword_0_0_0; }

		//square?="square"
		public Assignment getSquareAssignment_0_1() { return cSquareAssignment_0_1; }

		//"square"
		public Keyword getSquareSquareKeyword_0_1_0() { return cSquareSquareKeyword_0_1_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_1() { return cGroup_1; }

		//styled?="+"
		public Assignment getStyledAssignment_1_0() { return cStyledAssignment_1_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_1_0_0() { return cStyledPlusSignKeyword_1_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_1_1() { return cStyleAssignment_1_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_1_1_0() { return cStyleStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_1_1_0_1() { return cStyleStyleIDTerminalRuleCall_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=RectangleFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//RectangleFeature
		public RuleCall getFeaturesRectangleFeatureParserRuleCall_3_0() { return cFeaturesRectangleFeatureParserRuleCall_3_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_4() { return cChildrenAssignment_4; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_0() { return cChildrenChildElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RectangleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RectangleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCornerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RectangleFeature returns Feature:
		//	ConnectableElementFeature | Corner;
		public ParserRule getRule() { return rule; }

		//ConnectableElementFeature | Corner
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectableElementFeature
		public RuleCall getConnectableElementFeatureParserRuleCall_0() { return cConnectableElementFeatureParserRuleCall_0; }

		//Corner
		public RuleCall getCornerParserRuleCall_1() { return cCornerParserRuleCall_1; }
	}

	public class RhombusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rhombus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRhombusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRhombusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Rhombus:
		//	{Rhombus} "rhombus" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//{Rhombus} "rhombus" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//{Rhombus}
		public Action getRhombusAction_0() { return cRhombusAction_0; }

		//"rhombus"
		public Keyword getRhombusKeyword_1() { return cRhombusKeyword_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_4_0() { return cFeaturesConnectableElementFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEllipseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEllipseEllipseKeyword_0_0_0 = (Keyword)cEllipseAssignment_0_0.eContents().get(0);
		private final Assignment cCircleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCircleCircleKeyword_0_1_0 = (Keyword)cCircleAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStyledAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_1_0_0 = (Keyword)cStyledAssignment_1_0.eContents().get(0);
		private final Assignment cStyleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_1_1_0 = (CrossReference)cStyleAssignment_1_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStyleStyleCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenChildElementParserRuleCall_4_0 = (RuleCall)cChildrenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Ellipse:
		//	(ellipse?="ellipse" | circle?="circle") (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature*
		//	children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//(ellipse?="ellipse" | circle?="circle") (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature*
		//children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//ellipse?="ellipse" | circle?="circle"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ellipse?="ellipse"
		public Assignment getEllipseAssignment_0_0() { return cEllipseAssignment_0_0; }

		//"ellipse"
		public Keyword getEllipseEllipseKeyword_0_0_0() { return cEllipseEllipseKeyword_0_0_0; }

		//circle?="circle"
		public Assignment getCircleAssignment_0_1() { return cCircleAssignment_0_1; }

		//"circle"
		public Keyword getCircleCircleKeyword_0_1_0() { return cCircleCircleKeyword_0_1_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_1() { return cGroup_1; }

		//styled?="+"
		public Assignment getStyledAssignment_1_0() { return cStyledAssignment_1_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_1_0_0() { return cStyledPlusSignKeyword_1_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_1_1() { return cStyleAssignment_1_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_1_1_0() { return cStyleStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_1_1_0_1() { return cStyleStyleIDTerminalRuleCall_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_3_0() { return cFeaturesConnectableElementFeatureParserRuleCall_3_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_4() { return cChildrenAssignment_4; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_0() { return cChildrenChildElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPolygonAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPolygonPolygonKeyword_0_0_0 = (Keyword)cPolygonAssignment_0_0.eContents().get(0);
		private final Assignment cPolylineAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cPolylinePolylineKeyword_0_1_0 = (Keyword)cPolylineAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStyledAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_1_0_0 = (Keyword)cStyledAssignment_1_0.eContents().get(0);
		private final Assignment cStyleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_1_1_0 = (CrossReference)cStyleAssignment_1_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStyleStyleCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesPointParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesPointParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesPointParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Assignment cFeaturesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_6_0 = (RuleCall)cFeaturesAssignment_6.eContents().get(0);
		private final Assignment cChildrenAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChildrenChildElementParserRuleCall_7_0 = (RuleCall)cChildrenAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Polyline:
		//	(polygon?="polygon" | polyline?="polyline") (styled?="+" style=[Style])? "{" features+=Point features+=Point
		//	features+=Point* features+=ConnectableElementFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//(polygon?="polygon" | polyline?="polyline") (styled?="+" style=[Style])? "{" features+=Point features+=Point
		//features+=Point* features+=ConnectableElementFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//polygon?="polygon" | polyline?="polyline"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//polygon?="polygon"
		public Assignment getPolygonAssignment_0_0() { return cPolygonAssignment_0_0; }

		//"polygon"
		public Keyword getPolygonPolygonKeyword_0_0_0() { return cPolygonPolygonKeyword_0_0_0; }

		//polyline?="polyline"
		public Assignment getPolylineAssignment_0_1() { return cPolylineAssignment_0_1; }

		//"polyline"
		public Keyword getPolylinePolylineKeyword_0_1_0() { return cPolylinePolylineKeyword_0_1_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_1() { return cGroup_1; }

		//styled?="+"
		public Assignment getStyledAssignment_1_0() { return cStyledAssignment_1_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_1_0_0() { return cStyledPlusSignKeyword_1_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_1_1() { return cStyleAssignment_1_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_1_1_0() { return cStyleStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_1_1_0_1() { return cStyleStyleIDTerminalRuleCall_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=Point
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_3_0() { return cFeaturesPointParserRuleCall_3_0; }

		//features+=Point
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_4_0() { return cFeaturesPointParserRuleCall_4_0; }

		//features+=Point*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_5_0() { return cFeaturesPointParserRuleCall_5_0; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_6() { return cFeaturesAssignment_6; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_6_0() { return cFeaturesConnectableElementFeatureParserRuleCall_6_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_7() { return cChildrenAssignment_7; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_7_0() { return cChildrenChildElementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TriangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Triangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Triangle:
		//	{Triangle} "triangle" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement*
		//	"}";
		public ParserRule getRule() { return rule; }

		//{Triangle} "triangle" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//{Triangle}
		public Action getTriangleAction_0() { return cTriangleAction_0; }

		//"triangle"
		public Keyword getTriangleKeyword_1() { return cTriangleKeyword_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_4_0() { return cFeaturesConnectableElementFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cHorizontalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cHorizontalHlineKeyword_1_0_0 = (Keyword)cHorizontalAssignment_1_0.eContents().get(0);
		private final Assignment cVerticalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cVerticalVlineKeyword_1_1_0 = (Keyword)cVerticalAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLineFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Line:
		//	{Line} (horizontal?="hline" | vertical?="vline") (styled?="+" style=[Style])? "{" features+=LineFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Line} (horizontal?="hline" | vertical?="vline") (styled?="+" style=[Style])? "{" features+=LineFeature* "}"
		public Group getGroup() { return cGroup; }

		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }

		//horizontal?="hline" | vertical?="vline"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//horizontal?="hline"
		public Assignment getHorizontalAssignment_1_0() { return cHorizontalAssignment_1_0; }

		//"hline"
		public Keyword getHorizontalHlineKeyword_1_0_0() { return cHorizontalHlineKeyword_1_0_0; }

		//vertical?="vline"
		public Assignment getVerticalAssignment_1_1() { return cVerticalAssignment_1_1; }

		//"vline"
		public Keyword getVerticalVlineKeyword_1_1_0() { return cVerticalVlineKeyword_1_1_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LineFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LineFeature
		public RuleCall getFeaturesLineFeatureParserRuleCall_4_0() { return cFeaturesLineFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LineFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForegroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVisibleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LineFeature returns Feature:
		//	LineWidth | Foreground | Position | Size | Visible;
		public ParserRule getRule() { return rule; }

		//LineWidth | Foreground | Position | Size | Visible
		public Alternatives getAlternatives() { return cAlternatives; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_0() { return cLineWidthParserRuleCall_0; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_1() { return cForegroundParserRuleCall_1; }

		//Position
		public RuleCall getPositionParserRuleCall_2() { return cPositionParserRuleCall_2; }

		//Size
		public RuleCall getSizeParserRuleCall_3() { return cSizeParserRuleCall_3; }

		//Visible
		public RuleCall getVisibleParserRuleCall_4() { return cVisibleParserRuleCall_4; }
	}

	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLineFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Arrow:
		//	{Arrow} "arrow" (styled?="+" style=[Style])? "{" features+=LineFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Arrow} "arrow" (styled?="+" style=[Style])? "{" features+=LineFeature* "}"
		public Group getGroup() { return cGroup; }

		//{Arrow}
		public Action getArrowAction_0() { return cArrowAction_0; }

		//"arrow"
		public Keyword getArrowKeyword_1() { return cArrowKeyword_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LineFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LineFeature
		public RuleCall getFeaturesLineFeatureParserRuleCall_4_0() { return cFeaturesLineFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelReferenceEReferenceCrossReference_1_0 = (CrossReference)cModelReferenceAssignment_1.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_1_0.eContents().get(1);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//// TODO validation: contains of conflict types
		//Contains:
		//	"container" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"container" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"container"
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }

		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_1() { return cModelReferenceAssignment_1; }

		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_1_0() { return cModelReferenceEReferenceCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// TODO include object type?
		//Value:
		//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
		public ParserRule getRule() { return rule; }

		//IntValue | DoubleValue | StringValue | BooleanValue | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_1() { return cDoubleValueParserRuleCall_1; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_4() { return cEnumValueParserRuleCall_4; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueIntAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIntINTTerminalRuleCall_0_0 = (RuleCall)cValueIntAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueDecimalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDecimalINTTerminalRuleCall_2_0 = (RuleCall)cValueDecimalAssignment_2.eContents().get(0);
		
		//DoubleValue:
		//	valueInt=INT "." valueDecimal=INT;
		public ParserRule getRule() { return rule; }

		//valueInt=INT "." valueDecimal=INT
		public Group getGroup() { return cGroup; }

		//valueInt=INT
		public Assignment getValueIntAssignment_0() { return cValueIntAssignment_0; }

		//INT
		public RuleCall getValueIntINTTerminalRuleCall_0_0() { return cValueIntINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//valueDecimal=INT
		public Assignment getValueDecimalAssignment_2() { return cValueDecimalAssignment_2; }

		//INT
		public RuleCall getValueDecimalINTTerminalRuleCall_2_0() { return cValueDecimalINTTerminalRuleCall_2_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNullAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNullNullKeyword_0_0 = (Keyword)cNullAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue:
		//	null?="null" | value=STRING;
		public ParserRule getRule() { return rule; }

		//null?="null" | value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//null?="null"
		public Assignment getNullAssignment_0() { return cNullAssignment_0; }

		//"null"
		public Keyword getNullNullKeyword_0_0() { return cNullNullKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//value=BooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralEnumRuleCall_0() { return cValueBooleanLiteralEnumRuleCall_0; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// TODO validation
		//EnumValue:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FigureFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FigureFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FigureFeature returns Feature:
		//	ColorFeature | Size | Position | Point | LineStyle;
		public ParserRule getRule() { return rule; }

		//ColorFeature | Size | Position | Point | LineStyle
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_0() { return cColorFeatureParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//Position
		public RuleCall getPositionParserRuleCall_2() { return cPositionParserRuleCall_2; }

		//Point
		public RuleCall getPointParserRuleCall_3() { return cPointParserRuleCall_3; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_4() { return cLineStyleParserRuleCall_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLabelFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO: validation  at most one editable
		//Label:
		//	{Label} "label" (styled?="+" style=[Style])? "{" features+=LabelFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//{Label} "label" (styled?="+" style=[Style])? "{" features+=LabelFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }

		//"label"
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LabelFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LabelFeature
		public RuleCall getFeaturesLabelFeatureParserRuleCall_4_0() { return cFeaturesLabelFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LabelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForegroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFontFaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFontStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSizeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPositionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVisibleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//LabelFeature returns Feature:
		//	TextValue | Foreground | FontFace | FontSize | FontStyle | Size | Position | Visible;
		public ParserRule getRule() { return rule; }

		//TextValue | Foreground | FontFace | FontSize | FontStyle | Size | Position | Visible
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextValue
		public RuleCall getTextValueParserRuleCall_0() { return cTextValueParserRuleCall_0; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_1() { return cForegroundParserRuleCall_1; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_2() { return cFontFaceParserRuleCall_2; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_3() { return cFontSizeParserRuleCall_3; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_4() { return cFontStyleParserRuleCall_4; }

		//Size
		public RuleCall getSizeParserRuleCall_5() { return cSizeParserRuleCall_5; }

		//Position
		public RuleCall getPositionParserRuleCall_6() { return cPositionParserRuleCall_6; }

		//Visible
		public RuleCall getVisibleParserRuleCall_7() { return cVisibleParserRuleCall_7; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageIdIDTerminalRuleCall_1_0 = (RuleCall)cImageIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesImageFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Image:
		//	"image" imageId=ID (styled?="+" style=[Style])? "{" features+=ImageFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//"image" imageId=ID (styled?="+" style=[Style])? "{" features+=ImageFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//imageId=ID
		public Assignment getImageIdAssignment_1() { return cImageIdAssignment_1; }

		//ID
		public RuleCall getImageIdIDTerminalRuleCall_1_0() { return cImageIdIDTerminalRuleCall_1_0; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=ImageFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//ImageFeature
		public RuleCall getFeaturesImageFeatureParserRuleCall_4_0() { return cFeaturesImageFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransparencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ImageFeature returns Feature:
		//	Size | Position | Transparency;
		public ParserRule getRule() { return rule; }

		//Size | Position | Transparency
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_2() { return cTransparencyParserRuleCall_2; }
	}

	public class InvisibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invisible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvisibleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvisibleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStyledAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStyledPlusSignKeyword_2_0_0 = (Keyword)cStyledAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStyleStyleCrossReference_2_1_0 = (CrossReference)cStyleAssignment_2_1.eContents().get(0);
		private final RuleCall cStyleStyleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStyleStyleCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesInvisibleFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenChildElementParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Invisible:
		//	{Invisible} "invisible" (styled?="+" style=[Style])? "{" features+=InvisibleFeature* children+=ChildElement* "}";
		public ParserRule getRule() { return rule; }

		//{Invisible} "invisible" (styled?="+" style=[Style])? "{" features+=InvisibleFeature* children+=ChildElement* "}"
		public Group getGroup() { return cGroup; }

		//{Invisible}
		public Action getInvisibleAction_0() { return cInvisibleAction_0; }

		//"invisible"
		public Keyword getInvisibleKeyword_1() { return cInvisibleKeyword_1; }

		//(styled?="+" style=[Style])?
		public Group getGroup_2() { return cGroup_2; }

		//styled?="+"
		public Assignment getStyledAssignment_2_0() { return cStyledAssignment_2_0; }

		//"+"
		public Keyword getStyledPlusSignKeyword_2_0_0() { return cStyledPlusSignKeyword_2_0_0; }

		//style=[Style]
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//[Style]
		public CrossReference getStyleStyleCrossReference_2_1_0() { return cStyleStyleCrossReference_2_1_0; }

		//ID
		public RuleCall getStyleStyleIDTerminalRuleCall_2_1_0_1() { return cStyleStyleIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=InvisibleFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//InvisibleFeature
		public RuleCall getFeaturesInvisibleFeatureParserRuleCall_4_0() { return cFeaturesInvisibleFeatureParserRuleCall_4_0; }

		//children+=ChildElement*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }

		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_5_0() { return cChildrenChildElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InvisibleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvisibleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkedFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLayoutParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InvisibleFeature returns Feature:
		//	Size | Position | LinkedFeature | Layout;
		public ParserRule getRule() { return rule; }

		//Size | Position | LinkedFeature | Layout
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//LinkedFeature
		public RuleCall getLinkedFeatureParserRuleCall_2() { return cLinkedFeatureParserRuleCall_2; }

		//Layout
		public RuleCall getLayoutParserRuleCall_3() { return cLayoutParserRuleCall_3; }
	}

	public class ColorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColorFeature:
		//	Foreground | Background;
		public ParserRule getRule() { return rule; }

		//Foreground | Background
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }
	}

	public class ForegroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreground");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeForegroundKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//Foreground returns ColorFeature:
		//	type="foreground" color=Color conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//type="foreground" color=Color conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//type="foreground"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"foreground"
		public Keyword getTypeForegroundKeyword_0_0() { return cTypeForegroundKeyword_0_0; }

		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//Color
		public RuleCall getColorColorParserRuleCall_1_0() { return cColorColorParserRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeBackgroundKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//Background returns ColorFeature:
		//	type="background" color=Color conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//type="background" color=Color conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//type="background"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"background"
		public Keyword getTypeBackgroundKeyword_0_0() { return cTypeBackgroundKeyword_0_0; }

		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//Color
		public RuleCall getColorColorParserRuleCall_1_0() { return cColorColorParserRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class TransparencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transparency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransparencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPercentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPercentINTTerminalRuleCall_1_0 = (RuleCall)cPercentAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//Transparency:
		//	"transparency" percent=INT "%" conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"transparency" percent=INT "%" conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"transparency"
		public Keyword getTransparencyKeyword_0() { return cTransparencyKeyword_0; }

		//percent=INT
		public Assignment getPercentAssignment_1() { return cPercentAssignment_1; }

		//INT
		public RuleCall getPercentINTTerminalRuleCall_1_0() { return cPercentINTTerminalRuleCall_1_0; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Assignment cWidthRelativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWidthRelativePercentSignKeyword_2_0 = (Keyword)cWidthRelativeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cXKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_3_1_0 = (RuleCall)cHeightAssignment_3_1.eContents().get(0);
		private final Assignment cHeightRelativeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cHeightRelativePercentSignKeyword_3_2_0 = (Keyword)cHeightRelativeAssignment_3_2.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		
		//Size:
		//	"size" width=INT widthRelative?="%"? ("x" height=INT heightRelative?="%"?)? conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"size" width=INT widthRelative?="%"? ("x" height=INT heightRelative?="%"?)? conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }

		//widthRelative?="%"?
		public Assignment getWidthRelativeAssignment_2() { return cWidthRelativeAssignment_2; }

		//"%"
		public Keyword getWidthRelativePercentSignKeyword_2_0() { return cWidthRelativePercentSignKeyword_2_0; }

		//("x" height=INT heightRelative?="%"?)?
		public Group getGroup_3() { return cGroup_3; }

		//"x"
		public Keyword getXKeyword_3_0() { return cXKeyword_3_0; }

		//height=INT
		public Assignment getHeightAssignment_3_1() { return cHeightAssignment_3_1; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_1_0() { return cHeightINTTerminalRuleCall_3_1_0; }

		//heightRelative?="%"?
		public Assignment getHeightRelativeAssignment_3_2() { return cHeightRelativeAssignment_3_2; }

		//"%"
		public Keyword getHeightRelativePercentSignKeyword_3_2_0() { return cHeightRelativePercentSignKeyword_3_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_4_0() { return cConditionalFeatureConditionalParserRuleCall_4_0; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		
		//Point:
		//	"point" x=INT "," y=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"point" x=INT "," y=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"point"
		public Keyword getPointKeyword_0() { return cPointKeyword_0; }

		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }

		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_4_0() { return cConditionalFeatureConditionalParserRuleCall_4_0; }
	}

	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cXRelativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cXRelativePercentSignKeyword_2_0 = (Keyword)cXRelativeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Assignment cYRelativeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cYRelativePercentSignKeyword_5_0 = (Keyword)cYRelativeAssignment_5.eContents().get(0);
		private final Assignment cConditionalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_6_0 = (RuleCall)cConditionalAssignment_6.eContents().get(0);
		
		//// TODO validation: no Position when vstack hstack
		//Position:
		//	"position" x=INT xRelative?="%"? "," y=INT yRelative?="%"? conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"position" x=INT xRelative?="%"? "," y=INT yRelative?="%"? conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }

		//xRelative?="%"?
		public Assignment getXRelativeAssignment_2() { return cXRelativeAssignment_2; }

		//"%"
		public Keyword getXRelativePercentSignKeyword_2_0() { return cXRelativePercentSignKeyword_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//yRelative?="%"?
		public Assignment getYRelativeAssignment_5() { return cYRelativeAssignment_5; }

		//"%"
		public Keyword getYRelativePercentSignKeyword_5_0() { return cYRelativePercentSignKeyword_5_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_6() { return cConditionalAssignment_6; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_6_0() { return cConditionalFeatureConditionalParserRuleCall_6_0; }
	}

	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCornerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleINTTerminalRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//Corner:
		//	"corner" angle=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"corner" angle=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"corner"
		public Keyword getCornerKeyword_0() { return cCornerKeyword_0; }

		//angle=INT
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }

		//INT
		public RuleCall getAngleINTTerminalRuleCall_1_0() { return cAngleINTTerminalRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class TextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsTextPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		////--------------------------------
		//// Text
		//// TODO: validation of owned attribute
		//TextValue:
		//	{TextValue} "text" parts+=TextPart* conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//{TextValue} "text" parts+=TextPart* conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//{TextValue}
		public Action getTextValueAction_0() { return cTextValueAction_0; }

		//"text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//parts+=TextPart*
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }

		//TextPart
		public RuleCall getPartsTextPartParserRuleCall_2_0() { return cPartsTextPartParserRuleCall_2_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class TextPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cModelAttributeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_1_0 = (CrossReference)cModelAttributeAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_1_0.eContents().get(1);
		
		//TextPart:
		//	text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }

		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_1() { return cModelAttributeAssignment_1; }

		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_1_0() { return cModelAttributeEAttributeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class FontFaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontFace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontFaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFaceFontFaceTypeEnumRuleCall_1_0 = (RuleCall)cFaceAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//FontFace:
		//	"font-face" face=FontFaceType conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-face" face=FontFaceType conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-face"
		public Keyword getFontFaceKeyword_0() { return cFontFaceKeyword_0; }

		//face=FontFaceType
		public Assignment getFaceAssignment_1() { return cFaceAssignment_1; }

		//FontFaceType
		public RuleCall getFaceFontFaceTypeEnumRuleCall_1_0() { return cFaceFontFaceTypeEnumRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		//FontSize:
		//	"font-size" size=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-size" size=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-size"
		public Keyword getFontSizeKeyword_0() { return cFontSizeKeyword_0; }

		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class FontStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStylesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_1_0 = (RuleCall)cStylesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStylesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_2_1_0 = (RuleCall)cStylesAssignment_2_1.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//FontStyle:
		//	"font-style" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"font-style" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"font-style"
		public Keyword getFontStyleKeyword_0() { return cFontStyleKeyword_0; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_1() { return cStylesAssignment_1; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_1_0() { return cStylesFontStyleTypeEnumRuleCall_1_0; }

		//("," styles+=FontStyleType)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_2_1() { return cStylesAssignment_2_1; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_2_1_0() { return cStylesFontStyleTypeEnumRuleCall_2_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
	}

	public class LineStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStyleLineTypeEnumRuleCall_1_0 = (RuleCall)cStyleAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		////-------------------------------
		//// Lines
		//LineStyle:
		//	"line-type" style=LineType conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"line-type" style=LineType conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"line-type"
		public Keyword getLineTypeKeyword_0() { return cLineTypeKeyword_0; }

		//style=LineType
		public Assignment getStyleAssignment_1() { return cStyleAssignment_1; }

		//LineType
		public RuleCall getStyleLineTypeEnumRuleCall_1_0() { return cStyleLineTypeEnumRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}

	public class LineWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		
		////---------------------------------
		//// Terminals
		////terminal PERCENT: ('0'|('1'..'9')(('0'..'9'))?|'100');
		////terminal S: (' '|'\t')+;
		////terminal NEWLINE:
		//// New line on DOS or Unix 
		////   '\r'? '\n';
		//LineWidth:
		//	"line-width" width=INT conditional=FeatureConditional?;
		public ParserRule getRule() { return rule; }

		//"line-width" width=INT conditional=FeatureConditional?
		public Group getGroup() { return cGroup; }

		//"line-width"
		public Keyword getLineWidthKeyword_0() { return cLineWidthKeyword_0; }

		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }

		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }

		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
	}
	
	
	public class ConnectionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFREEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFREEFreeKeyword_0_0 = (Keyword)cFREEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMANHATTANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMANHATTANManhattanKeyword_1_0 = (Keyword)cMANHATTANEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConnectionType:
		//	FREE="free" | MANHATTAN="manhattan";
		public EnumRule getRule() { return rule; }

		//FREE="free" | MANHATTAN="manhattan"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FREE="free"
		public EnumLiteralDeclaration getFREEEnumLiteralDeclaration_0() { return cFREEEnumLiteralDeclaration_0; }

		//"free"
		public Keyword getFREEFreeKeyword_0_0() { return cFREEFreeKeyword_0_0; }

		//MANHATTAN="manhattan"
		public EnumLiteralDeclaration getMANHATTANEnumLiteralDeclaration_1() { return cMANHATTANEnumLiteralDeclaration_1; }

		//"manhattan"
		public Keyword getMANHATTANManhattanKeyword_1_0() { return cMANHATTANManhattanKeyword_1_0; }
	}

	public class AnchorDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCOMINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCOMINGIncomingKeyword_0_0 = (Keyword)cINCOMINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTGOINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTGOINGOutgoingKeyword_1_0 = (Keyword)cOUTGOINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AnchorDirection:
		//	INCOMING="incoming" | OUTGOING="outgoing";
		public EnumRule getRule() { return rule; }

		//INCOMING="incoming" | OUTGOING="outgoing"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCOMING="incoming"
		public EnumLiteralDeclaration getINCOMINGEnumLiteralDeclaration_0() { return cINCOMINGEnumLiteralDeclaration_0; }

		//"incoming"
		public Keyword getINCOMINGIncomingKeyword_0_0() { return cINCOMINGIncomingKeyword_0_0; }

		//OUTGOING="outgoing"
		public EnumLiteralDeclaration getOUTGOINGEnumLiteralDeclaration_1() { return cOUTGOINGEnumLiteralDeclaration_1; }

		//"outgoing"
		public Keyword getOUTGOINGOutgoingKeyword_1_0() { return cOUTGOINGOutgoingKeyword_1_0; }
	}

	public class DefaultColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWHITEWhiteKeyword_0_0 = (Keyword)cWHITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSILVEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSILVERSilverKeyword_1_0 = (Keyword)cSILVEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGRAYGrayKeyword_2_0 = (Keyword)cGRAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBLACKBlackKeyword_3_0 = (Keyword)cBLACKEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREDRedKeyword_4_0 = (Keyword)cREDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMAROONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMAROONMaroonKeyword_5_0 = (Keyword)cMAROONEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYELLOWYellowKeyword_6_0 = (Keyword)cYELLOWEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOLIVEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOLIVEOliveKeyword_7_0 = (Keyword)cOLIVEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLIMEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLIMELimeKeyword_8_0 = (Keyword)cLIMEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cGREENGreenKeyword_9_0 = (Keyword)cGREENEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cAQUAEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cAQUAAquaKeyword_10_0 = (Keyword)cAQUAEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTEALEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTEALTealKeyword_11_0 = (Keyword)cTEALEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cBLUEBlueKeyword_12_0 = (Keyword)cBLUEEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cNAVYEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cNAVYNavyKeyword_13_0 = (Keyword)cNAVYEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cFUCHSIAEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cFUCHSIAFuchsiaKeyword_14_0 = (Keyword)cFUCHSIAEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cPURPLEEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cPURPLEPurpleKeyword_15_0 = (Keyword)cPURPLEEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum DefaultColor:
		//	WHITE="white" | SILVER="silver" | GRAY="gray" | BLACK="black" | RED="red" | MAROON="maroon" | YELLOW="yellow" |
		//	OLIVE="olive" | LIME="lime" | GREEN="green" | AQUA="aqua" | TEAL="teal" | BLUE="blue" | NAVY="navy" |
		//	FUCHSIA="fuchsia" | PURPLE="purple";
		public EnumRule getRule() { return rule; }

		//WHITE="white" | SILVER="silver" | GRAY="gray" | BLACK="black" | RED="red" | MAROON="maroon" | YELLOW="yellow" |
		//OLIVE="olive" | LIME="lime" | GREEN="green" | AQUA="aqua" | TEAL="teal" | BLUE="blue" | NAVY="navy" | FUCHSIA="fuchsia"
		//| PURPLE="purple"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WHITE="white"
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_0() { return cWHITEEnumLiteralDeclaration_0; }

		//"white"
		public Keyword getWHITEWhiteKeyword_0_0() { return cWHITEWhiteKeyword_0_0; }

		//SILVER="silver"
		public EnumLiteralDeclaration getSILVEREnumLiteralDeclaration_1() { return cSILVEREnumLiteralDeclaration_1; }

		//"silver"
		public Keyword getSILVERSilverKeyword_1_0() { return cSILVERSilverKeyword_1_0; }

		//GRAY="gray"
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_2() { return cGRAYEnumLiteralDeclaration_2; }

		//"gray"
		public Keyword getGRAYGrayKeyword_2_0() { return cGRAYGrayKeyword_2_0; }

		//BLACK="black"
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_3() { return cBLACKEnumLiteralDeclaration_3; }

		//"black"
		public Keyword getBLACKBlackKeyword_3_0() { return cBLACKBlackKeyword_3_0; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_4() { return cREDEnumLiteralDeclaration_4; }

		//"red"
		public Keyword getREDRedKeyword_4_0() { return cREDRedKeyword_4_0; }

		//MAROON="maroon"
		public EnumLiteralDeclaration getMAROONEnumLiteralDeclaration_5() { return cMAROONEnumLiteralDeclaration_5; }

		//"maroon"
		public Keyword getMAROONMaroonKeyword_5_0() { return cMAROONMaroonKeyword_5_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_6() { return cYELLOWEnumLiteralDeclaration_6; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_6_0() { return cYELLOWYellowKeyword_6_0; }

		//OLIVE="olive"
		public EnumLiteralDeclaration getOLIVEEnumLiteralDeclaration_7() { return cOLIVEEnumLiteralDeclaration_7; }

		//"olive"
		public Keyword getOLIVEOliveKeyword_7_0() { return cOLIVEOliveKeyword_7_0; }

		//LIME="lime"
		public EnumLiteralDeclaration getLIMEEnumLiteralDeclaration_8() { return cLIMEEnumLiteralDeclaration_8; }

		//"lime"
		public Keyword getLIMELimeKeyword_8_0() { return cLIMELimeKeyword_8_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_9() { return cGREENEnumLiteralDeclaration_9; }

		//"green"
		public Keyword getGREENGreenKeyword_9_0() { return cGREENGreenKeyword_9_0; }

		//AQUA="aqua"
		public EnumLiteralDeclaration getAQUAEnumLiteralDeclaration_10() { return cAQUAEnumLiteralDeclaration_10; }

		//"aqua"
		public Keyword getAQUAAquaKeyword_10_0() { return cAQUAAquaKeyword_10_0; }

		//TEAL="teal"
		public EnumLiteralDeclaration getTEALEnumLiteralDeclaration_11() { return cTEALEnumLiteralDeclaration_11; }

		//"teal"
		public Keyword getTEALTealKeyword_11_0() { return cTEALTealKeyword_11_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_12() { return cBLUEEnumLiteralDeclaration_12; }

		//"blue"
		public Keyword getBLUEBlueKeyword_12_0() { return cBLUEBlueKeyword_12_0; }

		//NAVY="navy"
		public EnumLiteralDeclaration getNAVYEnumLiteralDeclaration_13() { return cNAVYEnumLiteralDeclaration_13; }

		//"navy"
		public Keyword getNAVYNavyKeyword_13_0() { return cNAVYNavyKeyword_13_0; }

		//FUCHSIA="fuchsia"
		public EnumLiteralDeclaration getFUCHSIAEnumLiteralDeclaration_14() { return cFUCHSIAEnumLiteralDeclaration_14; }

		//"fuchsia"
		public Keyword getFUCHSIAFuchsiaKeyword_14_0() { return cFUCHSIAFuchsiaKeyword_14_0; }

		//PURPLE="purple"
		public EnumLiteralDeclaration getPURPLEEnumLiteralDeclaration_15() { return cPURPLEEnumLiteralDeclaration_15; }

		//"purple"
		public Keyword getPURPLEPurpleKeyword_15_0() { return cPURPLEPurpleKeyword_15_0; }
	}

	public class ContainerLayoutElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerLayout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFREEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFREEFreeKeyword_0_0 = (Keyword)cFREEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVSTACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVSTACKVerticalKeyword_1_0 = (Keyword)cVSTACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHSTACKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHSTACKHorizontalKeyword_2_0 = (Keyword)cHSTACKEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ContainerLayout:
		//	FREE="free" | VSTACK="vertical" | HSTACK="horizontal";
		public EnumRule getRule() { return rule; }

		//FREE="free" | VSTACK="vertical" | HSTACK="horizontal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FREE="free"
		public EnumLiteralDeclaration getFREEEnumLiteralDeclaration_0() { return cFREEEnumLiteralDeclaration_0; }

		//"free"
		public Keyword getFREEFreeKeyword_0_0() { return cFREEFreeKeyword_0_0; }

		//VSTACK="vertical"
		public EnumLiteralDeclaration getVSTACKEnumLiteralDeclaration_1() { return cVSTACKEnumLiteralDeclaration_1; }

		//"vertical"
		public Keyword getVSTACKVerticalKeyword_1_0() { return cVSTACKVerticalKeyword_1_0; }

		//HSTACK="horizontal"
		public EnumLiteralDeclaration getHSTACKEnumLiteralDeclaration_2() { return cHSTACKEnumLiteralDeclaration_2; }

		//"horizontal"
		public Keyword getHSTACKHorizontalKeyword_2_0() { return cHSTACKHorizontalKeyword_2_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cDIFFERENTEnumLiteralDeclaration_1.eContents().get(0);
		
		////TODO < > <= =>
		//enum Operator:
		//	EQUAL="=" | DIFFERENT="<>";
		public EnumRule getRule() { return rule; }

		//EQUAL="=" | DIFFERENT="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }

		//DIFFERENT="<>"
		public EnumLiteralDeclaration getDIFFERENTEnumLiteralDeclaration_1() { return cDIFFERENTEnumLiteralDeclaration_1; }

		//"<>"
		public Keyword getDIFFERENTLessThanSignGreaterThanSignKeyword_1_0() { return cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0; }
	}

	public class BooleanLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteral:
		//	TRUE="true" | FALSE="false";
		public EnumRule getRule() { return rule; }

		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }

		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}

	public class FontFaceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontFaceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cARIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cARIALArialKeyword_0_0 = (Keyword)cARIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERDANAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERDANAVerdanaKeyword_1_0 = (Keyword)cVERDANAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTIMESTimesKeyword_2_0 = (Keyword)cTIMESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOURIEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOURIERCourierKeyword_3_0 = (Keyword)cCOURIEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FontFaceType:
		//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
		public EnumRule getRule() { return rule; }

		//ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ARIAL="arial"
		public EnumLiteralDeclaration getARIALEnumLiteralDeclaration_0() { return cARIALEnumLiteralDeclaration_0; }

		//"arial"
		public Keyword getARIALArialKeyword_0_0() { return cARIALArialKeyword_0_0; }

		//VERDANA="verdana"
		public EnumLiteralDeclaration getVERDANAEnumLiteralDeclaration_1() { return cVERDANAEnumLiteralDeclaration_1; }

		//"verdana"
		public Keyword getVERDANAVerdanaKeyword_1_0() { return cVERDANAVerdanaKeyword_1_0; }

		//TIMES="times"
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_2() { return cTIMESEnumLiteralDeclaration_2; }

		//"times"
		public Keyword getTIMESTimesKeyword_2_0() { return cTIMESTimesKeyword_2_0; }

		//COURIER="courier"
		public EnumLiteralDeclaration getCOURIEREnumLiteralDeclaration_3() { return cCOURIEREnumLiteralDeclaration_3; }

		//"courier"
		public Keyword getCOURIERCourierKeyword_3_0() { return cCOURIERCourierKeyword_3_0; }
	}

	public class FontStyleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cITALICSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cITALICSItalicsKeyword_0_0 = (Keyword)cITALICSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOLDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOLDBoldKeyword_1_0 = (Keyword)cBOLDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNDERLINEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNDERLINEUnderlineKeyword_2_0 = (Keyword)cUNDERLINEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FontStyleType:
		//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
		public EnumRule getRule() { return rule; }

		//ITALICS="italics" | BOLD="bold" | UNDERLINE="underline"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ITALICS="italics"
		public EnumLiteralDeclaration getITALICSEnumLiteralDeclaration_0() { return cITALICSEnumLiteralDeclaration_0; }

		//"italics"
		public Keyword getITALICSItalicsKeyword_0_0() { return cITALICSItalicsKeyword_0_0; }

		//BOLD="bold"
		public EnumLiteralDeclaration getBOLDEnumLiteralDeclaration_1() { return cBOLDEnumLiteralDeclaration_1; }

		//"bold"
		public Keyword getBOLDBoldKeyword_1_0() { return cBOLDBoldKeyword_1_0; }

		//UNDERLINE="underline"
		public EnumLiteralDeclaration getUNDERLINEEnumLiteralDeclaration_2() { return cUNDERLINEEnumLiteralDeclaration_2; }

		//"underline"
		public Keyword getUNDERLINEUnderlineKeyword_2_0() { return cUNDERLINEUnderlineKeyword_2_0; }
	}

	public class LineTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LineType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOLIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOLIDSolidKeyword_0_0 = (Keyword)cSOLIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDASHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDASHDashedKeyword_1_0 = (Keyword)cDASHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOTDottedKeyword_2_0 = (Keyword)cDOTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum LineType:
		//	SOLID="solid" | DASH="dashed" | DOT="dotted";
		public EnumRule getRule() { return rule; }

		//SOLID="solid" | DASH="dashed" | DOT="dotted"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SOLID="solid"
		public EnumLiteralDeclaration getSOLIDEnumLiteralDeclaration_0() { return cSOLIDEnumLiteralDeclaration_0; }

		//"solid"
		public Keyword getSOLIDSolidKeyword_0_0() { return cSOLIDSolidKeyword_0_0; }

		//DASH="dashed"
		public EnumLiteralDeclaration getDASHEnumLiteralDeclaration_1() { return cDASHEnumLiteralDeclaration_1; }

		//"dashed"
		public Keyword getDASHDashedKeyword_1_0() { return cDASHDashedKeyword_1_0; }

		//DOT="dotted"
		public EnumLiteralDeclaration getDOTEnumLiteralDeclaration_2() { return cDOTEnumLiteralDeclaration_2; }

		//"dotted"
		public Keyword getDOTDottedKeyword_2_0() { return cDOTDottedKeyword_2_0; }
	}
	
	private XDiagramElements pXDiagram;
	private ImportStatementElements pImportStatement;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private DiagramElements pDiagram;
	private GroupElements pGroup;
	private DiagramElementElements pDiagramElement;
	private StyleElements pStyle;
	private FeatureElements pFeature;
	private LinkedFeatureElements pLinkedFeature;
	private StyleFeatureElements pStyleFeature;
	private FeatureContainerElements pFeatureContainer;
	private ChildElementElements pChildElement;
	private FeatureConditionalElements pFeatureConditional;
	private NodeElements pNode;
	private LinkElements pLink;
	private ConnectionTypeElements unknownRuleConnectionType;
	private LinkFeatureElements pLinkFeature;
	private DecoratorElements pDecorator;
	private AnchorElements pAnchor;
	private AnchorDirectionElements unknownRuleAnchorDirection;
	private CustomColorElements pCustomColor;
	private ColorElements pColor;
	private DefaultColorElements unknownRuleDefaultColor;
	private ConnectableElementElements pConnectableElement;
	private DecoratorElementElements pDecoratorElement;
	private ConnectableElementFeatureElements pConnectableElementFeature;
	private LayoutElements pLayout;
	private VisibleElements pVisible;
	private CustomFigureElements pCustomFigure;
	private CustomElements pCustom;
	private RectangleElements pRectangle;
	private RectangleFeatureElements pRectangleFeature;
	private RhombusElements pRhombus;
	private EllipseElements pEllipse;
	private PolylineElements pPolyline;
	private TriangleElements pTriangle;
	private LineElements pLine;
	private LineFeatureElements pLineFeature;
	private ArrowElements pArrow;
	private ContainsElements pContains;
	private ContainerLayoutElements unknownRuleContainerLayout;
	private OperatorElements unknownRuleOperator;
	private ValueElements pValue;
	private IntValueElements pIntValue;
	private DoubleValueElements pDoubleValue;
	private StringValueElements pStringValue;
	private BooleanValueElements pBooleanValue;
	private BooleanLiteralElements unknownRuleBooleanLiteral;
	private EnumValueElements pEnumValue;
	private FigureFeatureElements pFigureFeature;
	private LabelElements pLabel;
	private LabelFeatureElements pLabelFeature;
	private ImageElements pImage;
	private ImageFeatureElements pImageFeature;
	private InvisibleElements pInvisible;
	private InvisibleFeatureElements pInvisibleFeature;
	private ColorFeatureElements pColorFeature;
	private ForegroundElements pForeground;
	private BackgroundElements pBackground;
	private TransparencyElements pTransparency;
	private SizeElements pSize;
	private PointElements pPoint;
	private PositionElements pPosition;
	private CornerElements pCorner;
	private TextValueElements pTextValue;
	private TextPartElements pTextPart;
	private FontFaceElements pFontFace;
	private FontSizeElements pFontSize;
	private FontStyleElements pFontStyle;
	private FontFaceTypeElements unknownRuleFontFaceType;
	private FontStyleTypeElements unknownRuleFontStyleType;
	private LineStyleElements pLineStyle;
	private LineTypeElements unknownRuleLineType;
	private LineWidthElements pLineWidth;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.xdiagram.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XDiagram:
	//	"metamodel" importURI=STRING imports+=ImportStatement diagram=Diagram groups+=Group* (elements+=DiagramElement |
	//	styles+=Style | colors+=CustomColor | figures+=CustomFigure)*;
	public XDiagramElements getXDiagramAccess() {
		return (pXDiagram != null) ? pXDiagram : (pXDiagram = new XDiagramElements());
	}
	
	public ParserRule getXDiagramRule() {
		return getXDiagramAccess().getRule();
	}

	//// importedNamespace apparently cannot be on the root element
	//ImportStatement:
	//	{ImportStatement} ("import" importedNamespace=QualifiedNameWithWildCard)?;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Diagram:
	//	"diagram" modelClass=[ecore::EClass|QualifiedName] "{" contains+=Contains* figures+=ConnectableElement* "}";
	public DiagramElements getDiagramAccess() {
		return (pDiagram != null) ? pDiagram : (pDiagram = new DiagramElements());
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}

	//Group:
	//	"group" name=ID;
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//DiagramElement:
	//	Node | Link;
	public DiagramElementElements getDiagramElementAccess() {
		return (pDiagramElement != null) ? pDiagramElement : (pDiagramElement = new DiagramElementElements());
	}
	
	public ParserRule getDiagramElementRule() {
		return getDiagramElementAccess().getRule();
	}

	//Style:
	//	"style" name=ID (styled?="extends" style=[Style])? "{" features+=StyleFeature* "}";
	public StyleElements getStyleAccess() {
		return (pStyle != null) ? pStyle : (pStyle = new StyleElements());
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	/// **
	// * Every feature has to be added here, and have:
	// * (conditional=FeatureConditional)?
	// * / Feature:
	//	StyleFeature | LinkedFeature;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//LinkedFeature returns Feature:
	//	Contains | Anchor;
	public LinkedFeatureElements getLinkedFeatureAccess() {
		return (pLinkedFeature != null) ? pLinkedFeature : (pLinkedFeature = new LinkedFeatureElements());
	}
	
	public ParserRule getLinkedFeatureRule() {
		return getLinkedFeatureAccess().getRule();
	}

	//StyleFeature returns Feature:
	//	Size | Position | Point | Corner | Background | Foreground | Transparency | FontFace | FontSize | FontStyle |
	//	TextValue | LineStyle | LineWidth;
	public StyleFeatureElements getStyleFeatureAccess() {
		return (pStyleFeature != null) ? pStyleFeature : (pStyleFeature = new StyleFeatureElements());
	}
	
	public ParserRule getStyleFeatureRule() {
		return getStyleFeatureAccess().getRule();
	}

	//FeatureContainer:
	//	ConnectableElement | DecoratorElement | Link | Style;
	public FeatureContainerElements getFeatureContainerAccess() {
		return (pFeatureContainer != null) ? pFeatureContainer : (pFeatureContainer = new FeatureContainerElements());
	}
	
	public ParserRule getFeatureContainerRule() {
		return getFeatureContainerAccess().getRule();
	}

	//ChildElement returns FeatureContainer:
	//	ConnectableElement | Line | Arrow;
	public ChildElementElements getChildElementAccess() {
		return (pChildElement != null) ? pChildElement : (pChildElement = new ChildElementElements());
	}
	
	public ParserRule getChildElementRule() {
		return getChildElementAccess().getRule();
	}

	//// validate ATT / Value
	//FeatureConditional:
	//	"if" modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value;
	public FeatureConditionalElements getFeatureConditionalAccess() {
		return (pFeatureConditional != null) ? pFeatureConditional : (pFeatureConditional = new FeatureConditionalElements());
	}
	
	public ParserRule getFeatureConditionalRule() {
		return getFeatureConditionalAccess().getRule();
	}

	//// TODO validation: unique nodes
	//// notation inheritance?
	//Node:
	//	"node" modelClass=[ecore::EClass|QualifiedName] "{" ("toolname" toolName=STRING (":" group=[Group])?)? ("icon"
	//	imageId=ID)? rootFigure=ConnectableElement "}";
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//// TODO: validation - complex requires source e target, complex structure
	//// TODO text / icon
	//Link:
	//	"link" (reference?="reference" modelReference=[ecore::EReference|QualifiedName] | complex?="object"
	//	modelClass=[ecore::EClass|QualifiedName] "source" sourceReference=[ecore::EReference|QualifiedName] "target"
	//	targetReference=[ecore::EReference|QualifiedName]) (toolName=STRING (":" group=[Group])?)? ("icon" imageId=ID)? "{"
	//	"connection" type=ConnectionType (styled?="+" style=[Style])? "{" features+=LinkFeature* //decorators += Decorator*	
	//	"}" "}";
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//enum ConnectionType:
	//	FREE="free" | MANHATTAN="manhattan";
	public ConnectionTypeElements getConnectionTypeAccess() {
		return (unknownRuleConnectionType != null) ? unknownRuleConnectionType : (unknownRuleConnectionType = new ConnectionTypeElements());
	}
	
	public EnumRule getConnectionTypeRule() {
		return getConnectionTypeAccess().getRule();
	}

	//LinkFeature returns Feature:
	//	Foreground | LineStyle | LineWidth | Decorator;
	public LinkFeatureElements getLinkFeatureAccess() {
		return (pLinkFeature != null) ? pLinkFeature : (pLinkFeature = new LinkFeatureElements());
	}
	
	public ParserRule getLinkFeatureRule() {
		return getLinkFeatureAccess().getRule();
	}

	//// % opcional? ou considerar pixeis?
	//// ter "constantes" para origem destino
	//// TODO validation %
	//// TODO validation children of decorator
	//Decorator:
	//	"decorator" position=INT "%" conditional=FeatureConditional? element=DecoratorElement;
	public DecoratorElements getDecoratorAccess() {
		return (pDecorator != null) ? pDecorator : (pDecorator = new DecoratorElements());
	}
	
	public ParserRule getDecoratorRule() {
		return getDecoratorAccess().getRule();
	}

	//// TODO validation
	//Anchor:
	//	"anchor" direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
	public AnchorElements getAnchorAccess() {
		return (pAnchor != null) ? pAnchor : (pAnchor = new AnchorElements());
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}

	//enum AnchorDirection:
	//	INCOMING="incoming" | OUTGOING="outgoing";
	public AnchorDirectionElements getAnchorDirectionAccess() {
		return (unknownRuleAnchorDirection != null) ? unknownRuleAnchorDirection : (unknownRuleAnchorDirection = new AnchorDirectionElements());
	}
	
	public EnumRule getAnchorDirectionRule() {
		return getAnchorDirectionAccess().getRule();
	}

	////---------------------------------------
	//// Colors
	//CustomColor:
	//	"color" name=ID R=INT "," G=INT "," B=INT;
	public CustomColorElements getCustomColorAccess() {
		return (pCustomColor != null) ? pCustomColor : (pCustomColor = new CustomColorElements());
	}
	
	public ParserRule getCustomColorRule() {
		return getCustomColorAccess().getRule();
	}

	//Color:
	//	default=DefaultColor | custom=[CustomColor];
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//enum DefaultColor:
	//	WHITE="white" | SILVER="silver" | GRAY="gray" | BLACK="black" | RED="red" | MAROON="maroon" | YELLOW="yellow" |
	//	OLIVE="olive" | LIME="lime" | GREEN="green" | AQUA="aqua" | TEAL="teal" | BLUE="blue" | NAVY="navy" |
	//	FUCHSIA="fuchsia" | PURPLE="purple";
	public DefaultColorElements getDefaultColorAccess() {
		return (unknownRuleDefaultColor != null) ? unknownRuleDefaultColor : (unknownRuleDefaultColor = new DefaultColorElements());
	}
	
	public EnumRule getDefaultColorRule() {
		return getDefaultColorAccess().getRule();
	}

	////---------------------------------------
	//// Connectable Elements
	/// *
	// * Every connectable element must be included here, and have:
	// * (composite?='children:' children+=ConnectableElement+)?
	// * children+=ChildElement*
	// * (styled?='+' style=[Style])?
	// * / ConnectableElement:
	//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle;
	public ConnectableElementElements getConnectableElementAccess() {
		return (pConnectableElement != null) ? pConnectableElement : (pConnectableElement = new ConnectableElementElements());
	}
	
	public ParserRule getConnectableElementRule() {
		return getConnectableElementAccess().getRule();
	}

	//DecoratorElement returns FeatureContainer:
	//	Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line;
	public DecoratorElementElements getDecoratorElementAccess() {
		return (pDecoratorElement != null) ? pDecoratorElement : (pDecoratorElement = new DecoratorElementElements());
	}
	
	public ParserRule getDecoratorElementRule() {
		return getDecoratorElementAccess().getRule();
	}

	////LineElement returns Element:
	////	Arrow | Line
	////;
	//ConnectableElementFeature returns Feature:
	//	Position | Size | ColorFeature | LineStyle | LineWidth | Contains | Anchor | Layout | Visible;
	public ConnectableElementFeatureElements getConnectableElementFeatureAccess() {
		return (pConnectableElementFeature != null) ? pConnectableElementFeature : (pConnectableElementFeature = new ConnectableElementFeatureElements());
	}
	
	public ParserRule getConnectableElementFeatureRule() {
		return getConnectableElementFeatureAccess().getRule();
	}

	//Layout:
	//	"layout" layout=ContainerLayout conditional=FeatureConditional?;
	public LayoutElements getLayoutAccess() {
		return (pLayout != null) ? pLayout : (pLayout = new LayoutElements());
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//Visible:
	//	"invisible" conditional=FeatureConditional;
	public VisibleElements getVisibleAccess() {
		return (pVisible != null) ? pVisible : (pVisible = new VisibleElements());
	}
	
	public ParserRule getVisibleRule() {
		return getVisibleAccess().getRule();
	}

	//CustomFigure:
	//	"figure" name=ID "as" element=ConnectableElement;
	public CustomFigureElements getCustomFigureAccess() {
		return (pCustomFigure != null) ? pCustomFigure : (pCustomFigure = new CustomFigureElements());
	}
	
	public ParserRule getCustomFigureRule() {
		return getCustomFigureAccess().getRule();
	}

	//Custom:
	//	"figure" figure=[CustomFigure] (styled?="+" style=[Style])? "{" features+=LinkedFeature* children+=ChildElement* "}";
	public CustomElements getCustomAccess() {
		return (pCustom != null) ? pCustom : (pCustom = new CustomElements());
	}
	
	public ParserRule getCustomRule() {
		return getCustomAccess().getRule();
	}

	//Rectangle:
	//	(rectangle?="rectangle" | square?="square") (styled?="+" style=[Style])? "{" features+=RectangleFeature*
	//	children+=ChildElement* "}";
	public RectangleElements getRectangleAccess() {
		return (pRectangle != null) ? pRectangle : (pRectangle = new RectangleElements());
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}

	//RectangleFeature returns Feature:
	//	ConnectableElementFeature | Corner;
	public RectangleFeatureElements getRectangleFeatureAccess() {
		return (pRectangleFeature != null) ? pRectangleFeature : (pRectangleFeature = new RectangleFeatureElements());
	}
	
	public ParserRule getRectangleFeatureRule() {
		return getRectangleFeatureAccess().getRule();
	}

	//Rhombus:
	//	{Rhombus} "rhombus" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement* "}";
	public RhombusElements getRhombusAccess() {
		return (pRhombus != null) ? pRhombus : (pRhombus = new RhombusElements());
	}
	
	public ParserRule getRhombusRule() {
		return getRhombusAccess().getRule();
	}

	//Ellipse:
	//	(ellipse?="ellipse" | circle?="circle") (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature*
	//	children+=ChildElement* "}";
	public EllipseElements getEllipseAccess() {
		return (pEllipse != null) ? pEllipse : (pEllipse = new EllipseElements());
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}

	//Polyline:
	//	(polygon?="polygon" | polyline?="polyline") (styled?="+" style=[Style])? "{" features+=Point features+=Point
	//	features+=Point* features+=ConnectableElementFeature* children+=ChildElement* "}";
	public PolylineElements getPolylineAccess() {
		return (pPolyline != null) ? pPolyline : (pPolyline = new PolylineElements());
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}

	//Triangle:
	//	{Triangle} "triangle" (styled?="+" style=[Style])? "{" features+=ConnectableElementFeature* children+=ChildElement*
	//	"}";
	public TriangleElements getTriangleAccess() {
		return (pTriangle != null) ? pTriangle : (pTriangle = new TriangleElements());
	}
	
	public ParserRule getTriangleRule() {
		return getTriangleAccess().getRule();
	}

	//Line:
	//	{Line} (horizontal?="hline" | vertical?="vline") (styled?="+" style=[Style])? "{" features+=LineFeature* "}";
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//LineFeature returns Feature:
	//	LineWidth | Foreground | Position | Size | Visible;
	public LineFeatureElements getLineFeatureAccess() {
		return (pLineFeature != null) ? pLineFeature : (pLineFeature = new LineFeatureElements());
	}
	
	public ParserRule getLineFeatureRule() {
		return getLineFeatureAccess().getRule();
	}

	//Arrow:
	//	{Arrow} "arrow" (styled?="+" style=[Style])? "{" features+=LineFeature* "}";
	public ArrowElements getArrowAccess() {
		return (pArrow != null) ? pArrow : (pArrow = new ArrowElements());
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}

	//// TODO validation: contains of conflict types
	//Contains:
	//	"container" modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?;
	public ContainsElements getContainsAccess() {
		return (pContains != null) ? pContains : (pContains = new ContainsElements());
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}

	//enum ContainerLayout:
	//	FREE="free" | VSTACK="vertical" | HSTACK="horizontal";
	public ContainerLayoutElements getContainerLayoutAccess() {
		return (unknownRuleContainerLayout != null) ? unknownRuleContainerLayout : (unknownRuleContainerLayout = new ContainerLayoutElements());
	}
	
	public EnumRule getContainerLayoutRule() {
		return getContainerLayoutAccess().getRule();
	}

	////TODO < > <= =>
	//enum Operator:
	//	EQUAL="=" | DIFFERENT="<>";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//// TODO include object type?
	//Value:
	//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//DoubleValue:
	//	valueInt=INT "." valueDecimal=INT;
	public DoubleValueElements getDoubleValueAccess() {
		return (pDoubleValue != null) ? pDoubleValue : (pDoubleValue = new DoubleValueElements());
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}

	//StringValue:
	//	null?="null" | value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//BooleanValue:
	//	value=BooleanLiteral;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//enum BooleanLiteral:
	//	TRUE="true" | FALSE="false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (unknownRuleBooleanLiteral != null) ? unknownRuleBooleanLiteral : (unknownRuleBooleanLiteral = new BooleanLiteralElements());
	}
	
	public EnumRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// TODO validation
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//FigureFeature returns Feature:
	//	ColorFeature | Size | Position | Point | LineStyle;
	public FigureFeatureElements getFigureFeatureAccess() {
		return (pFigureFeature != null) ? pFigureFeature : (pFigureFeature = new FigureFeatureElements());
	}
	
	public ParserRule getFigureFeatureRule() {
		return getFigureFeatureAccess().getRule();
	}

	//// TODO: validation  at most one editable
	//Label:
	//	{Label} "label" (styled?="+" style=[Style])? "{" features+=LabelFeature* children+=ChildElement* "}";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//LabelFeature returns Feature:
	//	TextValue | Foreground | FontFace | FontSize | FontStyle | Size | Position | Visible;
	public LabelFeatureElements getLabelFeatureAccess() {
		return (pLabelFeature != null) ? pLabelFeature : (pLabelFeature = new LabelFeatureElements());
	}
	
	public ParserRule getLabelFeatureRule() {
		return getLabelFeatureAccess().getRule();
	}

	//Image:
	//	"image" imageId=ID (styled?="+" style=[Style])? "{" features+=ImageFeature* children+=ChildElement* "}";
	public ImageElements getImageAccess() {
		return (pImage != null) ? pImage : (pImage = new ImageElements());
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//ImageFeature returns Feature:
	//	Size | Position | Transparency;
	public ImageFeatureElements getImageFeatureAccess() {
		return (pImageFeature != null) ? pImageFeature : (pImageFeature = new ImageFeatureElements());
	}
	
	public ParserRule getImageFeatureRule() {
		return getImageFeatureAccess().getRule();
	}

	//Invisible:
	//	{Invisible} "invisible" (styled?="+" style=[Style])? "{" features+=InvisibleFeature* children+=ChildElement* "}";
	public InvisibleElements getInvisibleAccess() {
		return (pInvisible != null) ? pInvisible : (pInvisible = new InvisibleElements());
	}
	
	public ParserRule getInvisibleRule() {
		return getInvisibleAccess().getRule();
	}

	//InvisibleFeature returns Feature:
	//	Size | Position | LinkedFeature | Layout;
	public InvisibleFeatureElements getInvisibleFeatureAccess() {
		return (pInvisibleFeature != null) ? pInvisibleFeature : (pInvisibleFeature = new InvisibleFeatureElements());
	}
	
	public ParserRule getInvisibleFeatureRule() {
		return getInvisibleFeatureAccess().getRule();
	}

	//ColorFeature:
	//	Foreground | Background;
	public ColorFeatureElements getColorFeatureAccess() {
		return (pColorFeature != null) ? pColorFeature : (pColorFeature = new ColorFeatureElements());
	}
	
	public ParserRule getColorFeatureRule() {
		return getColorFeatureAccess().getRule();
	}

	//Foreground returns ColorFeature:
	//	type="foreground" color=Color conditional=FeatureConditional?;
	public ForegroundElements getForegroundAccess() {
		return (pForeground != null) ? pForeground : (pForeground = new ForegroundElements());
	}
	
	public ParserRule getForegroundRule() {
		return getForegroundAccess().getRule();
	}

	//Background returns ColorFeature:
	//	type="background" color=Color conditional=FeatureConditional?;
	public BackgroundElements getBackgroundAccess() {
		return (pBackground != null) ? pBackground : (pBackground = new BackgroundElements());
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	//Transparency:
	//	"transparency" percent=INT "%" conditional=FeatureConditional?;
	public TransparencyElements getTransparencyAccess() {
		return (pTransparency != null) ? pTransparency : (pTransparency = new TransparencyElements());
	}
	
	public ParserRule getTransparencyRule() {
		return getTransparencyAccess().getRule();
	}

	//Size:
	//	"size" width=INT widthRelative?="%"? ("x" height=INT heightRelative?="%"?)? conditional=FeatureConditional?;
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//Point:
	//	"point" x=INT "," y=INT conditional=FeatureConditional?;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//// TODO validation: no Position when vstack hstack
	//Position:
	//	"position" x=INT xRelative?="%"? "," y=INT yRelative?="%"? conditional=FeatureConditional?;
	public PositionElements getPositionAccess() {
		return (pPosition != null) ? pPosition : (pPosition = new PositionElements());
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//Corner:
	//	"corner" angle=INT conditional=FeatureConditional?;
	public CornerElements getCornerAccess() {
		return (pCorner != null) ? pCorner : (pCorner = new CornerElements());
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}

	////--------------------------------
	//// Text
	//// TODO: validation of owned attribute
	//TextValue:
	//	{TextValue} "text" parts+=TextPart* conditional=FeatureConditional?;
	public TextValueElements getTextValueAccess() {
		return (pTextValue != null) ? pTextValue : (pTextValue = new TextValueElements());
	}
	
	public ParserRule getTextValueRule() {
		return getTextValueAccess().getRule();
	}

	//TextPart:
	//	text=STRING | modelAttribute=[ecore::EAttribute|QualifiedName];
	public TextPartElements getTextPartAccess() {
		return (pTextPart != null) ? pTextPart : (pTextPart = new TextPartElements());
	}
	
	public ParserRule getTextPartRule() {
		return getTextPartAccess().getRule();
	}

	//FontFace:
	//	"font-face" face=FontFaceType conditional=FeatureConditional?;
	public FontFaceElements getFontFaceAccess() {
		return (pFontFace != null) ? pFontFace : (pFontFace = new FontFaceElements());
	}
	
	public ParserRule getFontFaceRule() {
		return getFontFaceAccess().getRule();
	}

	//FontSize:
	//	"font-size" size=INT conditional=FeatureConditional?;
	public FontSizeElements getFontSizeAccess() {
		return (pFontSize != null) ? pFontSize : (pFontSize = new FontSizeElements());
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}

	//FontStyle:
	//	"font-style" styles+=FontStyleType ("," styles+=FontStyleType)* conditional=FeatureConditional?;
	public FontStyleElements getFontStyleAccess() {
		return (pFontStyle != null) ? pFontStyle : (pFontStyle = new FontStyleElements());
	}
	
	public ParserRule getFontStyleRule() {
		return getFontStyleAccess().getRule();
	}

	//enum FontFaceType:
	//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
	public FontFaceTypeElements getFontFaceTypeAccess() {
		return (unknownRuleFontFaceType != null) ? unknownRuleFontFaceType : (unknownRuleFontFaceType = new FontFaceTypeElements());
	}
	
	public EnumRule getFontFaceTypeRule() {
		return getFontFaceTypeAccess().getRule();
	}

	//enum FontStyleType:
	//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
	public FontStyleTypeElements getFontStyleTypeAccess() {
		return (unknownRuleFontStyleType != null) ? unknownRuleFontStyleType : (unknownRuleFontStyleType = new FontStyleTypeElements());
	}
	
	public EnumRule getFontStyleTypeRule() {
		return getFontStyleTypeAccess().getRule();
	}

	////-------------------------------
	//// Lines
	//LineStyle:
	//	"line-type" style=LineType conditional=FeatureConditional?;
	public LineStyleElements getLineStyleAccess() {
		return (pLineStyle != null) ? pLineStyle : (pLineStyle = new LineStyleElements());
	}
	
	public ParserRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}

	//enum LineType:
	//	SOLID="solid" | DASH="dashed" | DOT="dotted";
	public LineTypeElements getLineTypeAccess() {
		return (unknownRuleLineType != null) ? unknownRuleLineType : (unknownRuleLineType = new LineTypeElements());
	}
	
	public EnumRule getLineTypeRule() {
		return getLineTypeAccess().getRule();
	}

	////---------------------------------
	//// Terminals
	////terminal PERCENT: ('0'|('1'..'9')(('0'..'9'))?|'100');
	////terminal S: (' '|'\t')+;
	////terminal NEWLINE:
	//// New line on DOS or Unix 
	////   '\r'? '\n';
	//LineWidth:
	//	"line-width" width=INT conditional=FeatureConditional?;
	public LineWidthElements getLineWidthAccess() {
		return (pLineWidth != null) ? pLineWidth : (pLineWidth = new LineWidthElements());
	}
	
	public ParserRule getLineWidthRule() {
		return getLineWidthAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
