/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColorsCustomColorParserRuleCall_0_0 = (RuleCall)cColorsAssignment_0.eContents().get(0);
		private final Assignment cImagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImagesImageFileParserRuleCall_1_0 = (RuleCall)cImagesAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsConnectableElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cLinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinksLinkElementParserRuleCall_3_0 = (RuleCall)cLinksAssignment_3.eContents().get(0);
		
		//Model:
		//	colors+=CustomColor* images+=ImageFile* elements+=ConnectableElement* links+=LinkElement*;
		public ParserRule getRule() { return rule; }

		//colors+=CustomColor* images+=ImageFile* elements+=ConnectableElement* links+=LinkElement*
		public Group getGroup() { return cGroup; }

		//colors+=CustomColor*
		public Assignment getColorsAssignment_0() { return cColorsAssignment_0; }

		//CustomColor
		public RuleCall getColorsCustomColorParserRuleCall_0_0() { return cColorsCustomColorParserRuleCall_0_0; }

		//images+=ImageFile*
		public Assignment getImagesAssignment_1() { return cImagesAssignment_1; }

		//ImageFile
		public RuleCall getImagesImageFileParserRuleCall_1_0() { return cImagesImageFileParserRuleCall_1_0; }

		//elements+=ConnectableElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ConnectableElement
		public RuleCall getElementsConnectableElementParserRuleCall_2_0() { return cElementsConnectableElementParserRuleCall_2_0; }

		//links+=LinkElement*
		public Assignment getLinksAssignment_3() { return cLinksAssignment_3; }

		//LinkElement
		public RuleCall getLinksLinkElementParserRuleCall_3_0() { return cLinksLinkElementParserRuleCall_3_0; }
	}

	public class ConnectableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPolygonParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ConnectableElement:
		//	Rectangle | Rhombus | Ellipse | Polygon | Label | Image;
		public ParserRule getRule() { return rule; }

		//Rectangle | Rhombus | Ellipse | Polygon | Label | Image
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rectangle
		public RuleCall getRectangleParserRuleCall_0() { return cRectangleParserRuleCall_0; }

		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }

		//Ellipse
		public RuleCall getEllipseParserRuleCall_2() { return cEllipseParserRuleCall_2; }

		//Polygon
		public RuleCall getPolygonParserRuleCall_3() { return cPolygonParserRuleCall_3; }

		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }

		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }
	}

	public class RGBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRINTTerminalRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGINTTerminalRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBINTTerminalRuleCall_4_0 = (RuleCall)cBAssignment_4.eContents().get(0);
		
		//RGB:
		//	R=INT "," G=INT "," B=INT;
		public ParserRule getRule() { return rule; }

		//R=INT "," G=INT "," B=INT
		public Group getGroup() { return cGroup; }

		//R=INT
		public Assignment getRAssignment_0() { return cRAssignment_0; }

		//INT
		public RuleCall getRINTTerminalRuleCall_0_0() { return cRINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//G=INT
		public Assignment getGAssignment_2() { return cGAssignment_2; }

		//INT
		public RuleCall getGINTTerminalRuleCall_2_0() { return cGINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//B=INT
		public Assignment getBAssignment_4() { return cBAssignment_4; }

		//INT
		public RuleCall getBINTTerminalRuleCall_4_0() { return cBINTTerminalRuleCall_4_0; }
	}

	public class ImageFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSrcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrcSTRINGTerminalRuleCall_2_0 = (RuleCall)cSrcAssignment_2.eContents().get(0);
		
		//ImageFile:
		//	"image" name=ID src=STRING;
		public ParserRule getRule() { return rule; }

		//"image" name=ID src=STRING
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//src=STRING
		public Assignment getSrcAssignment_2() { return cSrcAssignment_2; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_2_0() { return cSrcSTRINGTerminalRuleCall_2_0; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCustomAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCustomRgbKeyword_0_0_0 = (Keyword)cCustomAssignment_0_0.eContents().get(0);
		private final Assignment cRgbAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRgbCustomColorCrossReference_0_1_0 = (CrossReference)cRgbAssignment_0_1.eContents().get(0);
		private final RuleCall cRgbCustomColorIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRgbCustomColorCrossReference_0_1_0.eContents().get(1);
		private final Assignment cDefaultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultDefaultColorEnumRuleCall_1_0 = (RuleCall)cDefaultAssignment_1.eContents().get(0);
		
		//Color:
		//	custom?="rgb=" rgb=[CustomColor] | default=DefaultColor;
		public ParserRule getRule() { return rule; }

		//custom?="rgb=" rgb=[CustomColor] | default=DefaultColor
		public Alternatives getAlternatives() { return cAlternatives; }

		//custom?="rgb=" rgb=[CustomColor]
		public Group getGroup_0() { return cGroup_0; }

		//custom?="rgb="
		public Assignment getCustomAssignment_0_0() { return cCustomAssignment_0_0; }

		//"rgb="
		public Keyword getCustomRgbKeyword_0_0_0() { return cCustomRgbKeyword_0_0_0; }

		//rgb=[CustomColor]
		public Assignment getRgbAssignment_0_1() { return cRgbAssignment_0_1; }

		//[CustomColor]
		public CrossReference getRgbCustomColorCrossReference_0_1_0() { return cRgbCustomColorCrossReference_0_1_0; }

		//ID
		public RuleCall getRgbCustomColorIDTerminalRuleCall_0_1_0_1() { return cRgbCustomColorIDTerminalRuleCall_0_1_0_1; }

		//default=DefaultColor
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }

		//DefaultColor
		public RuleCall getDefaultDefaultColorEnumRuleCall_1_0() { return cDefaultDefaultColorEnumRuleCall_1_0; }
	}

	public class CustomColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRgbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRgbRGBParserRuleCall_2_0 = (RuleCall)cRgbAssignment_2.eContents().get(0);
		
		//CustomColor:
		//	"color" name=ID rgb=RGB;
		public ParserRule getRule() { return rule; }

		//"color" name=ID rgb=RGB
		public Group getGroup() { return cGroup; }

		//"color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//rgb=RGB
		public Assignment getRgbAssignment_2() { return cRgbAssignment_2; }

		//RGB
		public RuleCall getRgbRGBParserRuleCall_2_0() { return cRgbRGBParserRuleCall_2_0; }
	}

	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRectangleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRectangleRectangleKeyword_0_0_0 = (Keyword)cRectangleAssignment_0_0.eContents().get(0);
		private final Assignment cSquareAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSquareSquareKeyword_0_1_0 = (Keyword)cSquareAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPolygonFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rectangle:
		//	(rectangle?="rectangle" | square?="square") "{" features+=PolygonFeature* "}";
		public ParserRule getRule() { return rule; }

		//(rectangle?="rectangle" | square?="square") "{" features+=PolygonFeature* "}"
		public Group getGroup() { return cGroup; }

		//rectangle?="rectangle" | square?="square"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//rectangle?="rectangle"
		public Assignment getRectangleAssignment_0_0() { return cRectangleAssignment_0_0; }

		//"rectangle"
		public Keyword getRectangleRectangleKeyword_0_0_0() { return cRectangleRectangleKeyword_0_0_0; }

		//square?="square"
		public Assignment getSquareAssignment_0_1() { return cSquareAssignment_0_1; }

		//"square"
		public Keyword getSquareSquareKeyword_0_1_0() { return cSquareSquareKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=PolygonFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//PolygonFeature
		public RuleCall getFeaturesPolygonFeatureParserRuleCall_2_0() { return cFeaturesPolygonFeatureParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RectangleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RectangleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPolygonFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCornerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RectangleFeature returns Feature:
		//	PolygonFeature | Corner;
		public ParserRule getRule() { return rule; }

		//PolygonFeature | Corner
		public Alternatives getAlternatives() { return cAlternatives; }

		//PolygonFeature
		public RuleCall getPolygonFeatureParserRuleCall_0() { return cPolygonFeatureParserRuleCall_0; }

		//Corner
		public RuleCall getCornerParserRuleCall_1() { return cCornerParserRuleCall_1; }
	}

	public class RhombusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rhombus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRhombusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPolygonFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rhombus:
		//	"rhombus" "{" features+=PolygonFeature "}";
		public ParserRule getRule() { return rule; }

		//"rhombus" "{" features+=PolygonFeature "}"
		public Group getGroup() { return cGroup; }

		//"rhombus"
		public Keyword getRhombusKeyword_0() { return cRhombusKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=PolygonFeature
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//PolygonFeature
		public RuleCall getFeaturesPolygonFeatureParserRuleCall_2_0() { return cFeaturesPolygonFeatureParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEllipseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEllipseEllipseKeyword_0_0_0 = (Keyword)cEllipseAssignment_0_0.eContents().get(0);
		private final Assignment cCircleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCircleCircleKeyword_0_1_0 = (Keyword)cCircleAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPolygonFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ellipse:
		//	(ellipse?="ellipse" | circle?="circle") "{" features+=PolygonFeature* "}";
		public ParserRule getRule() { return rule; }

		//(ellipse?="ellipse" | circle?="circle") "{" features+=PolygonFeature* "}"
		public Group getGroup() { return cGroup; }

		//ellipse?="ellipse" | circle?="circle"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ellipse?="ellipse"
		public Assignment getEllipseAssignment_0_0() { return cEllipseAssignment_0_0; }

		//"ellipse"
		public Keyword getEllipseEllipseKeyword_0_0_0() { return cEllipseEllipseKeyword_0_0_0; }

		//circle?="circle"
		public Assignment getCircleAssignment_0_1() { return cCircleAssignment_0_1; }

		//"circle"
		public Keyword getCircleCircleKeyword_0_1_0() { return cCircleCircleKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=PolygonFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//PolygonFeature
		public RuleCall getFeaturesPolygonFeatureParserRuleCall_2_0() { return cFeaturesPolygonFeatureParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PolygonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Polygon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPolygonAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPolygonPolygonKeyword_0_0_0 = (Keyword)cPolygonAssignment_0_0.eContents().get(0);
		private final Assignment cPolylineAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cPolylinePolylineKeyword_0_1_0 = (Keyword)cPolylineAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPointParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesPointParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesPolygonFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Polygon:
		//	(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=PolygonFeature* "}";
		public ParserRule getRule() { return rule; }

		//(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=PolygonFeature* "}"
		public Group getGroup() { return cGroup; }

		//polygon?="polygon" | polyline?="polyline"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//polygon?="polygon"
		public Assignment getPolygonAssignment_0_0() { return cPolygonAssignment_0_0; }

		//"polygon"
		public Keyword getPolygonPolygonKeyword_0_0_0() { return cPolygonPolygonKeyword_0_0_0; }

		//polyline?="polyline"
		public Assignment getPolylineAssignment_0_1() { return cPolylineAssignment_0_1; }

		//"polyline"
		public Keyword getPolylinePolylineKeyword_0_1_0() { return cPolylinePolylineKeyword_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//features+=Point
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_2_0() { return cFeaturesPointParserRuleCall_2_0; }

		//features+=Point
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Point
		public RuleCall getFeaturesPointParserRuleCall_3_0() { return cFeaturesPointParserRuleCall_3_0; }

		//features+=PolygonFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//PolygonFeature
		public RuleCall getFeaturesPolygonFeatureParserRuleCall_4_0() { return cFeaturesPolygonFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PolygonFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PolygonFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLineStyleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineWidthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PolygonFeature returns Feature:
		//	Position | Size | ColorFeature | LineStyle | LineWidth;
		public ParserRule getRule() { return rule; }

		//Position | Size | ColorFeature | LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }

		//Position
		public RuleCall getPositionParserRuleCall_0() { return cPositionParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_2() { return cColorFeatureParserRuleCall_2; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_3() { return cLineStyleParserRuleCall_3; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_4() { return cLineWidthParserRuleCall_4; }
	}

	public class AtributeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperatorAlternatives_2_0 = (Alternatives)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_2_0_0 = (Keyword)cOperatorAlternatives_2_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_2_0_1 = (Keyword)cOperatorAlternatives_2_0.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAtributeValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////enum FigureShape:
		////	SQUARE = 'square' |
		////	RECTANGLE = 'rectangle' |
		////	ROUNDED_RECTANGLE = 'round rectangle' |
		////	CIRCLE = 'circle' |
		////	ELLIPSE = 'ellipse' |
		////	ARROW = 'triangle' |
		////	RHOMBUS = 'rhombus' |
		////	POLYGON = 'polygon' |
		////	POLYLINE = 'polyline'
		////;
		//AtributeExpression:
		//	"(" key=ID operator=("=" | "<>") value=AtributeValue "->" ")";
		public ParserRule getRule() { return rule; }

		//"(" key=ID operator=("=" | "<>") value=AtributeValue "->" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//key=ID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0() { return cKeyIDTerminalRuleCall_1_0; }

		//operator=("=" | "<>")
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//"=" | "<>"
		public Alternatives getOperatorAlternatives_2_0() { return cOperatorAlternatives_2_0; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_2_0_0() { return cOperatorEqualsSignKeyword_2_0_0; }

		//"<>"
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_2_0_1() { return cOperatorLessThanSignGreaterThanSignKeyword_2_0_1; }

		//value=AtributeValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AtributeValue
		public RuleCall getValueAtributeValueParserRuleCall_3_0() { return cValueAtributeValueParserRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AtributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueINTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTINTTerminalRuleCall_0_0 = (RuleCall)cValueINTAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValueINTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueINTINTTerminalRuleCall_1_0_0 = (RuleCall)cValueINTAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueDECAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueDECINTTerminalRuleCall_1_2_0 = (RuleCall)cValueDECAssignment_1_2.eContents().get(0);
		private final Assignment cValueIDAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueIDIDTerminalRuleCall_2_0 = (RuleCall)cValueIDAssignment_2.eContents().get(0);
		private final Assignment cValueBOOLAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cValueBOOLAlternatives_3_0 = (Alternatives)cValueBOOLAssignment_3.eContents().get(0);
		private final Keyword cValueBOOLTrueKeyword_3_0_0 = (Keyword)cValueBOOLAlternatives_3_0.eContents().get(0);
		private final Keyword cValueBOOLFalseKeyword_3_0_1 = (Keyword)cValueBOOLAlternatives_3_0.eContents().get(1);
		private final Assignment cValueSTRINGAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueSTRINGSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueSTRINGAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cValueDAYAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cValueDAYINTTerminalRuleCall_5_0_0 = (RuleCall)cValueDAYAssignment_5_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueMONTHAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueMONTHINTTerminalRuleCall_5_2_0 = (RuleCall)cValueMONTHAssignment_5_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValueYEARAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cValueYEARINTTerminalRuleCall_5_4_0 = (RuleCall)cValueYEARAssignment_5_4.eContents().get(0);
		
		//// enum?
		//AtributeValue:
		//	valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
		//	valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT;
		public ParserRule getRule() { return rule; }

		//valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
		//valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//valueINT=INT
		public Assignment getValueINTAssignment_0() { return cValueINTAssignment_0; }

		//INT
		public RuleCall getValueINTINTTerminalRuleCall_0_0() { return cValueINTINTTerminalRuleCall_0_0; }

		//valueINT=INT "." valueDEC=INT
		public Group getGroup_1() { return cGroup_1; }

		//valueINT=INT
		public Assignment getValueINTAssignment_1_0() { return cValueINTAssignment_1_0; }

		//INT
		public RuleCall getValueINTINTTerminalRuleCall_1_0_0() { return cValueINTINTTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//valueDEC=INT
		public Assignment getValueDECAssignment_1_2() { return cValueDECAssignment_1_2; }

		//INT
		public RuleCall getValueDECINTTerminalRuleCall_1_2_0() { return cValueDECINTTerminalRuleCall_1_2_0; }

		//valueID=ID
		public Assignment getValueIDAssignment_2() { return cValueIDAssignment_2; }

		//ID
		public RuleCall getValueIDIDTerminalRuleCall_2_0() { return cValueIDIDTerminalRuleCall_2_0; }

		//valueBOOL=("true" | "false")
		public Assignment getValueBOOLAssignment_3() { return cValueBOOLAssignment_3; }

		//"true" | "false"
		public Alternatives getValueBOOLAlternatives_3_0() { return cValueBOOLAlternatives_3_0; }

		//"true"
		public Keyword getValueBOOLTrueKeyword_3_0_0() { return cValueBOOLTrueKeyword_3_0_0; }

		//"false"
		public Keyword getValueBOOLFalseKeyword_3_0_1() { return cValueBOOLFalseKeyword_3_0_1; }

		//valueSTRING=STRING
		public Assignment getValueSTRINGAssignment_4() { return cValueSTRINGAssignment_4; }

		//STRING
		public RuleCall getValueSTRINGSTRINGTerminalRuleCall_4_0() { return cValueSTRINGSTRINGTerminalRuleCall_4_0; }

		//valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT
		public Group getGroup_5() { return cGroup_5; }

		//valueDAY=INT
		public Assignment getValueDAYAssignment_5_0() { return cValueDAYAssignment_5_0; }

		//INT
		public RuleCall getValueDAYINTTerminalRuleCall_5_0_0() { return cValueDAYINTTerminalRuleCall_5_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_1() { return cHyphenMinusKeyword_5_1; }

		//valueMONTH=INT
		public Assignment getValueMONTHAssignment_5_2() { return cValueMONTHAssignment_5_2; }

		//INT
		public RuleCall getValueMONTHINTTerminalRuleCall_5_2_0() { return cValueMONTHINTTerminalRuleCall_5_2_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_3() { return cHyphenMinusKeyword_5_3; }

		//valueYEAR=INT
		public Assignment getValueYEARAssignment_5_4() { return cValueYEARAssignment_5_4; }

		//INT
		public RuleCall getValueYEARINTTerminalRuleCall_5_4_0() { return cValueYEARINTTerminalRuleCall_5_4_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cColorFeatureParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPointParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cFontFaceParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cFontSizeParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cFontStyleParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cLineStyleParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cLineWidthParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cTransparencyParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cCornerParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionAtributeExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Feature:
		//	(ColorFeature | Size | Position | Point | FontFace | FontSize | FontStyle | LineStyle | LineWidth | Transparency |
		//	Corner) expression=AtributeExpression?;
		public ParserRule getRule() { return rule; }

		//(ColorFeature | Size | Position | Point | FontFace | FontSize | FontStyle | LineStyle | LineWidth | Transparency |
		//Corner) expression=AtributeExpression?
		public Group getGroup() { return cGroup; }

		//ColorFeature | Size | Position | Point | FontFace | FontSize | FontStyle | LineStyle | LineWidth | Transparency | Corner
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_0_0() { return cColorFeatureParserRuleCall_0_0; }

		//Size
		public RuleCall getSizeParserRuleCall_0_1() { return cSizeParserRuleCall_0_1; }

		//Position
		public RuleCall getPositionParserRuleCall_0_2() { return cPositionParserRuleCall_0_2; }

		//Point
		public RuleCall getPointParserRuleCall_0_3() { return cPointParserRuleCall_0_3; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_0_4() { return cFontFaceParserRuleCall_0_4; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_0_5() { return cFontSizeParserRuleCall_0_5; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_0_6() { return cFontStyleParserRuleCall_0_6; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_0_7() { return cLineStyleParserRuleCall_0_7; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_0_8() { return cLineWidthParserRuleCall_0_8; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_0_9() { return cTransparencyParserRuleCall_0_9; }

		//Corner
		public RuleCall getCornerParserRuleCall_0_10() { return cCornerParserRuleCall_0_10; }

		//expression=AtributeExpression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//AtributeExpression
		public RuleCall getExpressionAtributeExpressionParserRuleCall_1_0() { return cExpressionAtributeExpressionParserRuleCall_1_0; }
	}

	public class FigureFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FigureFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////Figure:
		////	'figure' figure=FigureShape '{'
		////	features+=FigureFeature*
		////	'}'
		////;
		//FigureFeature returns Feature:
		//	ColorFeature | Size | Position | Point | LineStyle;
		public ParserRule getRule() { return rule; }

		//ColorFeature | Size | Position | Point | LineStyle
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_0() { return cColorFeatureParserRuleCall_0; }

		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }

		//Position
		public RuleCall getPositionParserRuleCall_2() { return cPositionParserRuleCall_2; }

		//Point
		public RuleCall getPointParserRuleCall_3() { return cPointParserRuleCall_3; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_4() { return cLineStyleParserRuleCall_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEditableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cEditableEditableKeyword_2_0 = (Keyword)cEditableAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesLabelFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Label:
		//	{Label} "label" editable?="editable"? "{" features+=LabelFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Label} "label" editable?="editable"? "{" features+=LabelFeature* "}"
		public Group getGroup() { return cGroup; }

		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }

		//"label"
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }

		//editable?="editable"?
		public Assignment getEditableAssignment_2() { return cEditableAssignment_2; }

		//"editable"
		public Keyword getEditableEditableKeyword_2_0() { return cEditableEditableKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=LabelFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//LabelFeature
		public RuleCall getFeaturesLabelFeatureParserRuleCall_4_0() { return cFeaturesLabelFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LabelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFontFaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFontStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LabelFeature returns Feature:
		//	Foreground | Background | FontFace | FontSize | FontStyle;
		public ParserRule getRule() { return rule; }

		//Foreground | Background | FontFace | FontSize | FontStyle
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }

		//FontFace
		public RuleCall getFontFaceParserRuleCall_2() { return cFontFaceParserRuleCall_2; }

		//FontSize
		public RuleCall getFontSizeParserRuleCall_3() { return cFontSizeParserRuleCall_3; }

		//FontStyle
		public RuleCall getFontStyleParserRuleCall_4() { return cFontStyleParserRuleCall_4; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImageImageFileCrossReference_1_0 = (CrossReference)cImageAssignment_1.eContents().get(0);
		private final RuleCall cImageImageFileIDTerminalRuleCall_1_0_1 = (RuleCall)cImageImageFileCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesImageFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Image:
		//	"image" image=[ImageFile] "{" features+=ImageFeature* "}";
		public ParserRule getRule() { return rule; }

		//"image" image=[ImageFile] "{" features+=ImageFeature* "}"
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//image=[ImageFile]
		public Assignment getImageAssignment_1() { return cImageAssignment_1; }

		//[ImageFile]
		public CrossReference getImageImageFileCrossReference_1_0() { return cImageImageFileCrossReference_1_0; }

		//ID
		public RuleCall getImageImageFileIDTerminalRuleCall_1_0_1() { return cImageImageFileIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=ImageFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//ImageFeature
		public RuleCall getFeaturesImageFeatureParserRuleCall_3_0() { return cFeaturesImageFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransparencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ImageFeature returns Feature:
		//	Size | Position | Transparency;
		public ParserRule getRule() { return rule; }

		//Size | Position | Transparency
		public Alternatives getAlternatives() { return cAlternatives; }

		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }

		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }

		//Transparency
		public RuleCall getTransparencyParserRuleCall_2() { return cTransparencyParserRuleCall_2; }
	}

	public class LinkElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineTypeLineTypeEnumRuleCall_1_0 = (RuleCall)cLineTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLinkFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LinkElement:
		//	"line" lineType=LineType "{" features+=LinkFeature* "}";
		public ParserRule getRule() { return rule; }

		//"line" lineType=LineType "{" features+=LinkFeature* "}"
		public Group getGroup() { return cGroup; }

		//"line"
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }

		//lineType=LineType
		public Assignment getLineTypeAssignment_1() { return cLineTypeAssignment_1; }

		//LineType
		public RuleCall getLineTypeLineTypeEnumRuleCall_1_0() { return cLineTypeLineTypeEnumRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=LinkFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//LinkFeature
		public RuleCall getFeaturesLinkFeatureParserRuleCall_3_0() { return cFeaturesLinkFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LinkFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LinkFeature returns Feature:
		//	Foreground | LineStyle | LineWidth;
		public ParserRule getRule() { return rule; }

		//Foreground | LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//LineStyle
		public RuleCall getLineStyleParserRuleCall_1() { return cLineStyleParserRuleCall_1; }

		//LineWidth
		public RuleCall getLineWidthParserRuleCall_2() { return cLineWidthParserRuleCall_2; }
	}

	public class ColorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBorderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ColorFeature:
		//	Foreground | Background | Border;
		public ParserRule getRule() { return rule; }

		//Foreground | Background | Border
		public Alternatives getAlternatives() { return cAlternatives; }

		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }

		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }

		//Border
		public RuleCall getBorderParserRuleCall_2() { return cBorderParserRuleCall_2; }
	}

	public class ForegroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreground");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForegroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//Foreground:
		//	"foreground" ":" color=Color;
		public ParserRule getRule() { return rule; }

		//"foreground" ":" color=Color
		public Group getGroup() { return cGroup; }

		//"foreground"
		public Keyword getForegroundKeyword_0() { return cForegroundKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackgroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//Background:
		//	"background" ":" color=Color;
		public ParserRule getRule() { return rule; }

		//"background" ":" color=Color
		public Group getGroup() { return cGroup; }

		//"background"
		public Keyword getBackgroundKeyword_0() { return cBackgroundKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }
	}

	public class BorderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Border");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBorderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//Border:
		//	"border" ":" color=Color;
		public ParserRule getRule() { return rule; }

		//"border" ":" color=Color
		public Group getGroup() { return cGroup; }

		//"border"
		public Keyword getBorderKeyword_0() { return cBorderKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }
	}

	public class TransparencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transparency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransparencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPercentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPercentPERCENTTerminalRuleCall_2_0 = (RuleCall)cPercentAssignment_2.eContents().get(0);
		
		//// validation
		//Transparency:
		//	"transparency" ":" percent=PERCENT;
		public ParserRule getRule() { return rule; }

		//"transparency" ":" percent=PERCENT
		public Group getGroup() { return cGroup; }

		//"transparency"
		public Keyword getTransparencyKeyword_0() { return cTransparencyKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//percent=PERCENT
		public Assignment getPercentAssignment_2() { return cPercentAssignment_2; }

		//PERCENT
		public RuleCall getPercentPERCENTTerminalRuleCall_2_0() { return cPercentPERCENTTerminalRuleCall_2_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeightINTTerminalRuleCall_4_0 = (RuleCall)cHeightAssignment_4.eContents().get(0);
		
		////Width:
		////	'width' ':' width=INT
		////;
		//Size:
		//	"size" ":" width=INT "," height=INT;
		public ParserRule getRule() { return rule; }

		//"size" ":" width=INT "," height=INT
		public Group getGroup() { return cGroup; }

		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//width=INT
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0() { return cWidthINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//height=INT
		public Assignment getHeightAssignment_4() { return cHeightAssignment_4; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_4_0() { return cHeightINTTerminalRuleCall_4_0; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		
		//Point:
		//	"point" ":" x=INT "," y=INT;
		public ParserRule getRule() { return rule; }

		//"point" ":" x=INT "," y=INT
		public Group getGroup() { return cGroup; }

		//"point"
		public Keyword getPointKeyword_0() { return cPointKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
	}

	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		
		//Position:
		//	"position" ":" x=INT "," y=INT;
		public ParserRule getRule() { return rule; }

		//"position" ":" x=INT "," y=INT
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
	}

	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCornerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		
		//Corner:
		//	"corner" ":" angle=INT;
		public ParserRule getRule() { return rule; }

		//"corner" ":" angle=INT
		public Group getGroup() { return cGroup; }

		//"corner"
		public Keyword getCornerKeyword_0() { return cCornerKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }

		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }
	}

	public class FontFaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontFace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontFaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFaceFontFaceTypeEnumRuleCall_2_0 = (RuleCall)cFaceAssignment_2.eContents().get(0);
		
		//FontFace:
		//	"font-face" ":" face=FontFaceType;
		public ParserRule getRule() { return rule; }

		//"font-face" ":" face=FontFaceType
		public Group getGroup() { return cGroup; }

		//"font-face"
		public Keyword getFontFaceKeyword_0() { return cFontFaceKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//face=FontFaceType
		public Assignment getFaceAssignment_2() { return cFaceAssignment_2; }

		//FontFaceType
		public RuleCall getFaceFontFaceTypeEnumRuleCall_2_0() { return cFaceFontFaceTypeEnumRuleCall_2_0; }
	}

	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		
		//FontSize:
		//	"font-size" ":" size=INT;
		public ParserRule getRule() { return rule; }

		//"font-size" ":" size=INT
		public Group getGroup() { return cGroup; }

		//"font-size"
		public Keyword getFontSizeKeyword_0() { return cFontSizeKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }
	}

	public class FontStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStylesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_2_0 = (RuleCall)cStylesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStylesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStylesFontStyleTypeEnumRuleCall_3_1_0 = (RuleCall)cStylesAssignment_3_1.eContents().get(0);
		
		//FontStyle:
		//	"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)*;
		public ParserRule getRule() { return rule; }

		//"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)*
		public Group getGroup() { return cGroup; }

		//"font-style"
		public Keyword getFontStyleKeyword_0() { return cFontStyleKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_2() { return cStylesAssignment_2; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_2_0() { return cStylesFontStyleTypeEnumRuleCall_2_0; }

		//("," styles+=FontStyleType)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//styles+=FontStyleType
		public Assignment getStylesAssignment_3_1() { return cStylesAssignment_3_1; }

		//FontStyleType
		public RuleCall getStylesFontStyleTypeEnumRuleCall_3_1_0() { return cStylesFontStyleTypeEnumRuleCall_3_1_0; }
	}

	public class LineStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleLineTypeEnumRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		
		//LineStyle:
		//	"line-style" ":" style=LineType;
		public ParserRule getRule() { return rule; }

		//"line-style" ":" style=LineType
		public Group getGroup() { return cGroup; }

		//"line-style"
		public Keyword getLineStyleKeyword_0() { return cLineStyleKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//style=LineType
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//LineType
		public RuleCall getStyleLineTypeEnumRuleCall_2_0() { return cStyleLineTypeEnumRuleCall_2_0; }
	}

	public class LineWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		
		//LineWidth:
		//	"line-width" ":" width=INT;
		public ParserRule getRule() { return rule; }

		//"line-width" ":" width=INT
		public Group getGroup() { return cGroup; }

		//"line-width"
		public Keyword getLineWidthKeyword_0() { return cLineWidthKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//width=INT
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0() { return cWidthINTTerminalRuleCall_2_0; }
	}
	
	
	public class DefaultColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLUEBlueKeyword_1_0 = (Keyword)cBLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cYELLOWYellowKeyword_2_0 = (Keyword)cYELLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//// 16 standard
		//enum DefaultColor:
		//	RED="red" | BLUE="blue" | YELLOW="yellow";
		public EnumRule getRule() { return rule; }

		//RED="red" | BLUE="blue" | YELLOW="yellow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }

		//"red"
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_1() { return cBLUEEnumLiteralDeclaration_1; }

		//"blue"
		public Keyword getBLUEBlueKeyword_1_0() { return cBLUEBlueKeyword_1_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_2() { return cYELLOWEnumLiteralDeclaration_2; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_2_0() { return cYELLOWYellowKeyword_2_0; }
	}

	public class FontFaceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontFaceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cARIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cARIALArialKeyword_0_0 = (Keyword)cARIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERDANAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERDANAVerdanaKeyword_1_0 = (Keyword)cVERDANAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTIMESTimesKeyword_2_0 = (Keyword)cTIMESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOURIEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOURIERCourierKeyword_3_0 = (Keyword)cCOURIEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FontFaceType:
		//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
		public EnumRule getRule() { return rule; }

		//ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ARIAL="arial"
		public EnumLiteralDeclaration getARIALEnumLiteralDeclaration_0() { return cARIALEnumLiteralDeclaration_0; }

		//"arial"
		public Keyword getARIALArialKeyword_0_0() { return cARIALArialKeyword_0_0; }

		//VERDANA="verdana"
		public EnumLiteralDeclaration getVERDANAEnumLiteralDeclaration_1() { return cVERDANAEnumLiteralDeclaration_1; }

		//"verdana"
		public Keyword getVERDANAVerdanaKeyword_1_0() { return cVERDANAVerdanaKeyword_1_0; }

		//TIMES="times"
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_2() { return cTIMESEnumLiteralDeclaration_2; }

		//"times"
		public Keyword getTIMESTimesKeyword_2_0() { return cTIMESTimesKeyword_2_0; }

		//COURIER="courier"
		public EnumLiteralDeclaration getCOURIEREnumLiteralDeclaration_3() { return cCOURIEREnumLiteralDeclaration_3; }

		//"courier"
		public Keyword getCOURIERCourierKeyword_3_0() { return cCOURIERCourierKeyword_3_0; }
	}

	public class FontStyleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cITALICSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cITALICSItalicsKeyword_0_0 = (Keyword)cITALICSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOLDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOLDBoldKeyword_1_0 = (Keyword)cBOLDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNDERLINEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNDERLINEUnderlineKeyword_2_0 = (Keyword)cUNDERLINEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FontStyleType:
		//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
		public EnumRule getRule() { return rule; }

		//ITALICS="italics" | BOLD="bold" | UNDERLINE="underline"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ITALICS="italics"
		public EnumLiteralDeclaration getITALICSEnumLiteralDeclaration_0() { return cITALICSEnumLiteralDeclaration_0; }

		//"italics"
		public Keyword getITALICSItalicsKeyword_0_0() { return cITALICSItalicsKeyword_0_0; }

		//BOLD="bold"
		public EnumLiteralDeclaration getBOLDEnumLiteralDeclaration_1() { return cBOLDEnumLiteralDeclaration_1; }

		//"bold"
		public Keyword getBOLDBoldKeyword_1_0() { return cBOLDBoldKeyword_1_0; }

		//UNDERLINE="underline"
		public EnumLiteralDeclaration getUNDERLINEEnumLiteralDeclaration_2() { return cUNDERLINEEnumLiteralDeclaration_2; }

		//"underline"
		public Keyword getUNDERLINEUnderlineKeyword_2_0() { return cUNDERLINEUnderlineKeyword_2_0; }
	}

	public class LineTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LineType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOLIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOLIDSolidKeyword_0_0 = (Keyword)cSOLIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDASHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDASHDashKeyword_1_0 = (Keyword)cDASHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LineType:
		//	SOLID="solid" | DASH="dash";
		public EnumRule getRule() { return rule; }

		//SOLID="solid" | DASH="dash"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SOLID="solid"
		public EnumLiteralDeclaration getSOLIDEnumLiteralDeclaration_0() { return cSOLIDEnumLiteralDeclaration_0; }

		//"solid"
		public Keyword getSOLIDSolidKeyword_0_0() { return cSOLIDSolidKeyword_0_0; }

		//DASH="dash"
		public EnumLiteralDeclaration getDASHEnumLiteralDeclaration_1() { return cDASHEnumLiteralDeclaration_1; }

		//"dash"
		public Keyword getDASHDashKeyword_1_0() { return cDASHDashKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ConnectableElementElements pConnectableElement;
	private RGBElements pRGB;
	private ImageFileElements pImageFile;
	private ColorElements pColor;
	private CustomColorElements pCustomColor;
	private DefaultColorElements unknownRuleDefaultColor;
	private RectangleElements pRectangle;
	private RectangleFeatureElements pRectangleFeature;
	private RhombusElements pRhombus;
	private EllipseElements pEllipse;
	private PolygonElements pPolygon;
	private PolygonFeatureElements pPolygonFeature;
	private AtributeExpressionElements pAtributeExpression;
	private AtributeValueElements pAtributeValue;
	private FeatureElements pFeature;
	private FigureFeatureElements pFigureFeature;
	private LabelElements pLabel;
	private LabelFeatureElements pLabelFeature;
	private ImageElements pImage;
	private ImageFeatureElements pImageFeature;
	private LinkElementElements pLinkElement;
	private LinkFeatureElements pLinkFeature;
	private ColorFeatureElements pColorFeature;
	private ForegroundElements pForeground;
	private BackgroundElements pBackground;
	private BorderElements pBorder;
	private TransparencyElements pTransparency;
	private SizeElements pSize;
	private PointElements pPoint;
	private PositionElements pPosition;
	private CornerElements pCorner;
	private FontFaceElements pFontFace;
	private FontSizeElements pFontSize;
	private FontStyleElements pFontStyle;
	private FontFaceTypeElements unknownRuleFontFaceType;
	private FontStyleTypeElements unknownRuleFontStyleType;
	private LineStyleElements pLineStyle;
	private LineTypeElements unknownRuleLineType;
	private LineWidthElements pLineWidth;
	private TerminalRule tPERCENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	colors+=CustomColor* images+=ImageFile* elements+=ConnectableElement* links+=LinkElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ConnectableElement:
	//	Rectangle | Rhombus | Ellipse | Polygon | Label | Image;
	public ConnectableElementElements getConnectableElementAccess() {
		return (pConnectableElement != null) ? pConnectableElement : (pConnectableElement = new ConnectableElementElements());
	}
	
	public ParserRule getConnectableElementRule() {
		return getConnectableElementAccess().getRule();
	}

	//RGB:
	//	R=INT "," G=INT "," B=INT;
	public RGBElements getRGBAccess() {
		return (pRGB != null) ? pRGB : (pRGB = new RGBElements());
	}
	
	public ParserRule getRGBRule() {
		return getRGBAccess().getRule();
	}

	//ImageFile:
	//	"image" name=ID src=STRING;
	public ImageFileElements getImageFileAccess() {
		return (pImageFile != null) ? pImageFile : (pImageFile = new ImageFileElements());
	}
	
	public ParserRule getImageFileRule() {
		return getImageFileAccess().getRule();
	}

	//Color:
	//	custom?="rgb=" rgb=[CustomColor] | default=DefaultColor;
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//CustomColor:
	//	"color" name=ID rgb=RGB;
	public CustomColorElements getCustomColorAccess() {
		return (pCustomColor != null) ? pCustomColor : (pCustomColor = new CustomColorElements());
	}
	
	public ParserRule getCustomColorRule() {
		return getCustomColorAccess().getRule();
	}

	//// 16 standard
	//enum DefaultColor:
	//	RED="red" | BLUE="blue" | YELLOW="yellow";
	public DefaultColorElements getDefaultColorAccess() {
		return (unknownRuleDefaultColor != null) ? unknownRuleDefaultColor : (unknownRuleDefaultColor = new DefaultColorElements());
	}
	
	public EnumRule getDefaultColorRule() {
		return getDefaultColorAccess().getRule();
	}

	//Rectangle:
	//	(rectangle?="rectangle" | square?="square") "{" features+=PolygonFeature* "}";
	public RectangleElements getRectangleAccess() {
		return (pRectangle != null) ? pRectangle : (pRectangle = new RectangleElements());
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}

	//RectangleFeature returns Feature:
	//	PolygonFeature | Corner;
	public RectangleFeatureElements getRectangleFeatureAccess() {
		return (pRectangleFeature != null) ? pRectangleFeature : (pRectangleFeature = new RectangleFeatureElements());
	}
	
	public ParserRule getRectangleFeatureRule() {
		return getRectangleFeatureAccess().getRule();
	}

	//Rhombus:
	//	"rhombus" "{" features+=PolygonFeature "}";
	public RhombusElements getRhombusAccess() {
		return (pRhombus != null) ? pRhombus : (pRhombus = new RhombusElements());
	}
	
	public ParserRule getRhombusRule() {
		return getRhombusAccess().getRule();
	}

	//Ellipse:
	//	(ellipse?="ellipse" | circle?="circle") "{" features+=PolygonFeature* "}";
	public EllipseElements getEllipseAccess() {
		return (pEllipse != null) ? pEllipse : (pEllipse = new EllipseElements());
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}

	//Polygon:
	//	(polygon?="polygon" | polyline?="polyline") "{" features+=Point features+=Point features+=PolygonFeature* "}";
	public PolygonElements getPolygonAccess() {
		return (pPolygon != null) ? pPolygon : (pPolygon = new PolygonElements());
	}
	
	public ParserRule getPolygonRule() {
		return getPolygonAccess().getRule();
	}

	//PolygonFeature returns Feature:
	//	Position | Size | ColorFeature | LineStyle | LineWidth;
	public PolygonFeatureElements getPolygonFeatureAccess() {
		return (pPolygonFeature != null) ? pPolygonFeature : (pPolygonFeature = new PolygonFeatureElements());
	}
	
	public ParserRule getPolygonFeatureRule() {
		return getPolygonFeatureAccess().getRule();
	}

	////enum FigureShape:
	////	SQUARE = 'square' |
	////	RECTANGLE = 'rectangle' |
	////	ROUNDED_RECTANGLE = 'round rectangle' |
	////	CIRCLE = 'circle' |
	////	ELLIPSE = 'ellipse' |
	////	ARROW = 'triangle' |
	////	RHOMBUS = 'rhombus' |
	////	POLYGON = 'polygon' |
	////	POLYLINE = 'polyline'
	////;
	//AtributeExpression:
	//	"(" key=ID operator=("=" | "<>") value=AtributeValue "->" ")";
	public AtributeExpressionElements getAtributeExpressionAccess() {
		return (pAtributeExpression != null) ? pAtributeExpression : (pAtributeExpression = new AtributeExpressionElements());
	}
	
	public ParserRule getAtributeExpressionRule() {
		return getAtributeExpressionAccess().getRule();
	}

	//// enum?
	//AtributeValue:
	//	valueINT=INT | valueINT=INT "." valueDEC=INT | valueID=ID | valueBOOL=("true" | "false") | valueSTRING=STRING |
	//	valueDAY=INT "-" valueMONTH=INT "-" valueYEAR=INT;
	public AtributeValueElements getAtributeValueAccess() {
		return (pAtributeValue != null) ? pAtributeValue : (pAtributeValue = new AtributeValueElements());
	}
	
	public ParserRule getAtributeValueRule() {
		return getAtributeValueAccess().getRule();
	}

	//Feature:
	//	(ColorFeature | Size | Position | Point | FontFace | FontSize | FontStyle | LineStyle | LineWidth | Transparency |
	//	Corner) expression=AtributeExpression?;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	////Figure:
	////	'figure' figure=FigureShape '{'
	////	features+=FigureFeature*
	////	'}'
	////;
	//FigureFeature returns Feature:
	//	ColorFeature | Size | Position | Point | LineStyle;
	public FigureFeatureElements getFigureFeatureAccess() {
		return (pFigureFeature != null) ? pFigureFeature : (pFigureFeature = new FigureFeatureElements());
	}
	
	public ParserRule getFigureFeatureRule() {
		return getFigureFeatureAccess().getRule();
	}

	//Label:
	//	{Label} "label" editable?="editable"? "{" features+=LabelFeature* "}";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//LabelFeature returns Feature:
	//	Foreground | Background | FontFace | FontSize | FontStyle;
	public LabelFeatureElements getLabelFeatureAccess() {
		return (pLabelFeature != null) ? pLabelFeature : (pLabelFeature = new LabelFeatureElements());
	}
	
	public ParserRule getLabelFeatureRule() {
		return getLabelFeatureAccess().getRule();
	}

	//Image:
	//	"image" image=[ImageFile] "{" features+=ImageFeature* "}";
	public ImageElements getImageAccess() {
		return (pImage != null) ? pImage : (pImage = new ImageElements());
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//ImageFeature returns Feature:
	//	Size | Position | Transparency;
	public ImageFeatureElements getImageFeatureAccess() {
		return (pImageFeature != null) ? pImageFeature : (pImageFeature = new ImageFeatureElements());
	}
	
	public ParserRule getImageFeatureRule() {
		return getImageFeatureAccess().getRule();
	}

	//LinkElement:
	//	"line" lineType=LineType "{" features+=LinkFeature* "}";
	public LinkElementElements getLinkElementAccess() {
		return (pLinkElement != null) ? pLinkElement : (pLinkElement = new LinkElementElements());
	}
	
	public ParserRule getLinkElementRule() {
		return getLinkElementAccess().getRule();
	}

	//LinkFeature returns Feature:
	//	Foreground | LineStyle | LineWidth;
	public LinkFeatureElements getLinkFeatureAccess() {
		return (pLinkFeature != null) ? pLinkFeature : (pLinkFeature = new LinkFeatureElements());
	}
	
	public ParserRule getLinkFeatureRule() {
		return getLinkFeatureAccess().getRule();
	}

	//ColorFeature:
	//	Foreground | Background | Border;
	public ColorFeatureElements getColorFeatureAccess() {
		return (pColorFeature != null) ? pColorFeature : (pColorFeature = new ColorFeatureElements());
	}
	
	public ParserRule getColorFeatureRule() {
		return getColorFeatureAccess().getRule();
	}

	//Foreground:
	//	"foreground" ":" color=Color;
	public ForegroundElements getForegroundAccess() {
		return (pForeground != null) ? pForeground : (pForeground = new ForegroundElements());
	}
	
	public ParserRule getForegroundRule() {
		return getForegroundAccess().getRule();
	}

	//Background:
	//	"background" ":" color=Color;
	public BackgroundElements getBackgroundAccess() {
		return (pBackground != null) ? pBackground : (pBackground = new BackgroundElements());
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	//Border:
	//	"border" ":" color=Color;
	public BorderElements getBorderAccess() {
		return (pBorder != null) ? pBorder : (pBorder = new BorderElements());
	}
	
	public ParserRule getBorderRule() {
		return getBorderAccess().getRule();
	}

	//// validation
	//Transparency:
	//	"transparency" ":" percent=PERCENT;
	public TransparencyElements getTransparencyAccess() {
		return (pTransparency != null) ? pTransparency : (pTransparency = new TransparencyElements());
	}
	
	public ParserRule getTransparencyRule() {
		return getTransparencyAccess().getRule();
	}

	////Width:
	////	'width' ':' width=INT
	////;
	//Size:
	//	"size" ":" width=INT "," height=INT;
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//Point:
	//	"point" ":" x=INT "," y=INT;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Position:
	//	"position" ":" x=INT "," y=INT;
	public PositionElements getPositionAccess() {
		return (pPosition != null) ? pPosition : (pPosition = new PositionElements());
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//Corner:
	//	"corner" ":" angle=INT;
	public CornerElements getCornerAccess() {
		return (pCorner != null) ? pCorner : (pCorner = new CornerElements());
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}

	//FontFace:
	//	"font-face" ":" face=FontFaceType;
	public FontFaceElements getFontFaceAccess() {
		return (pFontFace != null) ? pFontFace : (pFontFace = new FontFaceElements());
	}
	
	public ParserRule getFontFaceRule() {
		return getFontFaceAccess().getRule();
	}

	//FontSize:
	//	"font-size" ":" size=INT;
	public FontSizeElements getFontSizeAccess() {
		return (pFontSize != null) ? pFontSize : (pFontSize = new FontSizeElements());
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}

	//FontStyle:
	//	"font-style" ":" styles+=FontStyleType ("," styles+=FontStyleType)*;
	public FontStyleElements getFontStyleAccess() {
		return (pFontStyle != null) ? pFontStyle : (pFontStyle = new FontStyleElements());
	}
	
	public ParserRule getFontStyleRule() {
		return getFontStyleAccess().getRule();
	}

	//enum FontFaceType:
	//	ARIAL="arial" | VERDANA="verdana" | TIMES="times" | COURIER="courier";
	public FontFaceTypeElements getFontFaceTypeAccess() {
		return (unknownRuleFontFaceType != null) ? unknownRuleFontFaceType : (unknownRuleFontFaceType = new FontFaceTypeElements());
	}
	
	public EnumRule getFontFaceTypeRule() {
		return getFontFaceTypeAccess().getRule();
	}

	//enum FontStyleType:
	//	ITALICS="italics" | BOLD="bold" | UNDERLINE="underline";
	public FontStyleTypeElements getFontStyleTypeAccess() {
		return (unknownRuleFontStyleType != null) ? unknownRuleFontStyleType : (unknownRuleFontStyleType = new FontStyleTypeElements());
	}
	
	public EnumRule getFontStyleTypeRule() {
		return getFontStyleTypeAccess().getRule();
	}

	//LineStyle:
	//	"line-style" ":" style=LineType;
	public LineStyleElements getLineStyleAccess() {
		return (pLineStyle != null) ? pLineStyle : (pLineStyle = new LineStyleElements());
	}
	
	public ParserRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}

	//enum LineType:
	//	SOLID="solid" | DASH="dash";
	public LineTypeElements getLineTypeAccess() {
		return (unknownRuleLineType != null) ? unknownRuleLineType : (unknownRuleLineType = new LineTypeElements());
	}
	
	public EnumRule getLineTypeRule() {
		return getLineTypeAccess().getRule();
	}

	//LineWidth:
	//	"line-width" ":" width=INT;
	public LineWidthElements getLineWidthAccess() {
		return (pLineWidth != null) ? pLineWidth : (pLineWidth = new LineWidthElements());
	}
	
	public ParserRule getLineWidthRule() {
		return getLineWidthAccess().getRule();
	}

	//terminal PERCENT:
	//	("0" | "1".."9" "0".."9"? | "100") "%";
	public TerminalRule getPERCENTRule() {
		return (tPERCENT != null) ? tPERCENT : (tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
