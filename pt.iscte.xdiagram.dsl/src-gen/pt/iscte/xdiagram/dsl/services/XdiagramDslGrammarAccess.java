/*
 * generated by Xtext 2.10.0
 */
package pt.iscte.xdiagram.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XdiagramDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.XDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetamodelMetaModelParserRuleCall_0_0 = (RuleCall)cMetamodelAssignment_0.eContents().get(0);
		private final Assignment cDiagramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiagramDiagramParserRuleCall_1_0 = (RuleCall)cDiagramAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cElementsDiagramElementParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Assignment cColorsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cColorsCustomColorParserRuleCall_2_1_0 = (RuleCall)cColorsAssignment_2_1.eContents().get(0);
		private final Assignment cFiguresAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cFiguresCustomFigureParserRuleCall_2_2_0 = (RuleCall)cFiguresAssignment_2_2.eContents().get(0);
		
		//XDiagram:
		//	metamodel=MetaModel
		//	diagram=Diagram (elements+=DiagramElement | colors+=CustomColor | figures+=CustomFigure)*;
		@Override public ParserRule getRule() { return rule; }
		
		////'xdiagram' id=ID desc=STRING
		////('metamodel' importURI=STRING)?
		////imports+=ImportStatement   
		//metamodel=MetaModel diagram=Diagram (elements+=DiagramElement | colors+=CustomColor | figures+=CustomFigure)*
		public Group getGroup() { return cGroup; }
		
		////'xdiagram' id=ID desc=STRING
		////('metamodel' importURI=STRING)?
		////imports+=ImportStatement   
		//metamodel=MetaModel
		public Assignment getMetamodelAssignment_0() { return cMetamodelAssignment_0; }
		
		//MetaModel
		public RuleCall getMetamodelMetaModelParserRuleCall_0_0() { return cMetamodelMetaModelParserRuleCall_0_0; }
		
		//diagram=Diagram
		public Assignment getDiagramAssignment_1() { return cDiagramAssignment_1; }
		
		//Diagram
		public RuleCall getDiagramDiagramParserRuleCall_1_0() { return cDiagramDiagramParserRuleCall_1_0; }
		
		//(elements+=DiagramElement | colors+=CustomColor | figures+=CustomFigure)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//elements+=DiagramElement
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//DiagramElement
		public RuleCall getElementsDiagramElementParserRuleCall_2_0_0() { return cElementsDiagramElementParserRuleCall_2_0_0; }
		
		////    	(styles += Style) |
		//colors+=CustomColor
		public Assignment getColorsAssignment_2_1() { return cColorsAssignment_2_1; }
		
		//CustomColor
		public RuleCall getColorsCustomColorParserRuleCall_2_1_0() { return cColorsCustomColorParserRuleCall_2_1_0; }
		
		//figures+=CustomFigure
		public Assignment getFiguresAssignment_2_2() { return cFiguresAssignment_2_2; }
		
		//CustomFigure
		public RuleCall getFiguresCustomFigureParserRuleCall_2_2_0() { return cFiguresCustomFigureParserRuleCall_2_2_0; }
	}
	public class MetaModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.MetaModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPluginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPluginAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPluginSTRINGTerminalRuleCall_3_0 = (RuleCall)cPluginAssignment_3.eContents().get(0);
		private final Keyword cEcoreFileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEcorePathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEcorePathSTRINGTerminalRuleCall_5_0 = (RuleCall)cEcorePathAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// validation
		//MetaModel:
		//	'metamodel' '{'
		//	'plugin' plugin=STRING
		//	'ecore-file' ecorePath=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'metamodel' '{' 'plugin' plugin=STRING 'ecore-file' ecorePath=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'plugin'
		public Keyword getPluginKeyword_2() { return cPluginKeyword_2; }
		
		//plugin=STRING
		public Assignment getPluginAssignment_3() { return cPluginAssignment_3; }
		
		//STRING
		public RuleCall getPluginSTRINGTerminalRuleCall_3_0() { return cPluginSTRINGTerminalRuleCall_3_0; }
		
		//'ecore-file'
		public Keyword getEcoreFileKeyword_4() { return cEcoreFileKeyword_4; }
		
		//ecorePath=STRING
		public Assignment getEcorePathAssignment_5() { return cEcorePathAssignment_5; }
		
		//STRING
		public RuleCall getEcorePathSTRINGTerminalRuleCall_5_0() { return cEcorePathSTRINGTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		
		//// importedNamespace apparently cannot be on the root element
		//ImportStatement:
		//	{ImportStatement} ('import' importedNamespace=QualifiedNameWithWildCard)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportStatement} ('import' importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup() { return cGroup; }
		
		//{ImportStatement}
		public Action getImportStatementAction_0() { return cImportStatementAction_0; }
		
		//('import' importedNamespace=QualifiedNameWithWildCard)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'import'
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }
		
		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_0 = (CrossReference)cModelClassAssignment_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsContainsParserRuleCall_3_0 = (RuleCall)cContainsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Diagram:
		//	'diagram' modelClass=[ecore::EClass|QualifiedName] '{'
		//	contains+=Contains*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'diagram' modelClass=[ecore::EClass|QualifiedName] '{' contains+=Contains* '}'
		public Group getGroup() { return cGroup; }
		
		//'diagram'
		public Keyword getDiagramKeyword_0() { return cDiagramKeyword_0; }
		
		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1() { return cModelClassAssignment_1; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_0() { return cModelClassEClassCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//contains+=Contains*
		public Assignment getContainsAssignment_3() { return cContainsAssignment_3; }
		
		//Contains
		public RuleCall getContainsContainsParserRuleCall_3_0() { return cContainsContainsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DiagramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.DiagramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////ToolGroup:
		////	'toolgroup' name=ID (description=STRING)? ';'
		////;
		//DiagramElement:
		//	Node | Link;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Link
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Link
		public RuleCall getLinkParserRuleCall_1() { return cLinkParserRuleCall_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStyleFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkedFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Style:
		////	'style' name=ID  (styled?='+' style=[Style])? '{'
		////	      features+=StyleFeature*
		////	'}'
		////;
		/// **
		// * Every feature has to be added here, and have:
		// * (conditional=FeatureConditional)?
		// * / Feature:
		//	StyleFeature | LinkedFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//StyleFeature | LinkedFeature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StyleFeature
		public RuleCall getStyleFeatureParserRuleCall_0() { return cStyleFeatureParserRuleCall_0; }
		
		//LinkedFeature
		public RuleCall getLinkedFeatureParserRuleCall_1() { return cLinkedFeatureParserRuleCall_1; }
	}
	public class LinkedFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LinkedFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnchorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LinkedFeature Feature:
		//	Contains | Anchor
		@Override public ParserRule getRule() { return rule; }
		
		//Contains | Anchor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_0() { return cContainsParserRuleCall_0; }
		
		//Anchor
		public RuleCall getAnchorParserRuleCall_1() { return cAnchorParserRuleCall_1; }
	}
	public class StyleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.StyleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCornerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBackgroundParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForegroundParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransparencyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFontPropertiesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTextValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTextAlignParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLineStyleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLineWidthParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//StyleFeature Feature:
		//	Size | Position | Point | Corner | Background | Foreground | Transparency | FontProperties | TextValue | TextAlign |
		//	LineStyle | LineWidth
		@Override public ParserRule getRule() { return rule; }
		
		//Size | Position | Point | Corner | Background | Foreground | Transparency | FontProperties | TextValue | TextAlign |
		//LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }
		
		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }
		
		//Point
		public RuleCall getPointParserRuleCall_2() { return cPointParserRuleCall_2; }
		
		//Corner
		public RuleCall getCornerParserRuleCall_3() { return cCornerParserRuleCall_3; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_4() { return cBackgroundParserRuleCall_4; }
		
		//Foreground
		public RuleCall getForegroundParserRuleCall_5() { return cForegroundParserRuleCall_5; }
		
		//Transparency
		public RuleCall getTransparencyParserRuleCall_6() { return cTransparencyParserRuleCall_6; }
		
		//FontProperties
		public RuleCall getFontPropertiesParserRuleCall_7() { return cFontPropertiesParserRuleCall_7; }
		
		//TextValue
		public RuleCall getTextValueParserRuleCall_8() { return cTextValueParserRuleCall_8; }
		
		//TextAlign
		public RuleCall getTextAlignParserRuleCall_9() { return cTextAlignParserRuleCall_9; }
		
		//LineStyle
		public RuleCall getLineStyleParserRuleCall_10() { return cLineStyleParserRuleCall_10; }
		
		//LineWidth
		public RuleCall getLineWidthParserRuleCall_11() { return cLineWidthParserRuleCall_11; }
	}
	public class FeatureContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.FeatureContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecoratorElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeatureContainer:
		//	ConnectableElement | DecoratorElement | Link //| Style
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectableElement | DecoratorElement | Link
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectableElement
		public RuleCall getConnectableElementParserRuleCall_0() { return cConnectableElementParserRuleCall_0; }
		
		//DecoratorElement
		public RuleCall getDecoratorElementParserRuleCall_1() { return cDecoratorElementParserRuleCall_1; }
		
		//Link
		public RuleCall getLinkParserRuleCall_2() { return cLinkParserRuleCall_2; }
	}
	public class ChildElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ChildElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ChildElement FeatureContainer:
		//	ConnectableElement | Line | Arrow
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectableElement | Line | Arrow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectableElement
		public RuleCall getConnectableElementParserRuleCall_0() { return cConnectableElementParserRuleCall_0; }
		
		//Line
		public RuleCall getLineParserRuleCall_1() { return cLineParserRuleCall_1; }
		
		//Arrow
		public RuleCall getArrowParserRuleCall_2() { return cArrowParserRuleCall_2; }
	}
	public class FeatureConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.FeatureConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_1_0 = (CrossReference)cModelAttributeAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// TODO validate ATT / Value 
		//FeatureConditional:
		//	'if' modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_1() { return cModelAttributeAssignment_1; }
		
		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_1_0() { return cModelAttributeEAttributeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_1_0_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_0 = (CrossReference)cModelClassAssignment_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_0.eContents().get(1);
		private final Assignment cRootFigureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootFigureConnectableElementParserRuleCall_2_0 = (RuleCall)cRootFigureAssignment_2.eContents().get(0);
		
		//Node: //(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//	'node' modelClass=[ecore::EClass|QualifiedName] rootFigure=ConnectableElement;
		@Override public ParserRule getRule() { return rule; }
		
		////(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//'node' modelClass=[ecore::EClass|QualifiedName] rootFigure=ConnectableElement
		public Group getGroup() { return cGroup; }
		
		////(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1() { return cModelClassAssignment_1; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_0() { return cModelClassEClassCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_0_1; }
		
		//rootFigure=ConnectableElement
		public Assignment getRootFigureAssignment_2() { return cRootFigureAssignment_2; }
		
		//ConnectableElement
		public RuleCall getRootFigureConnectableElementParserRuleCall_2_0() { return cRootFigureConnectableElementParserRuleCall_2_0; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cReferenceReferenceKeyword_1_0_0_0 = (Keyword)cReferenceAssignment_1_0_0.eContents().get(0);
		private final Assignment cModelReferenceAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cModelReferenceEReferenceCrossReference_1_0_1_0 = (CrossReference)cModelReferenceAssignment_1_0_1.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cComplexAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cComplexClassKeyword_1_1_0_0 = (Keyword)cComplexAssignment_1_1_0.eContents().get(0);
		private final Assignment cModelClassAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cModelClassEClassCrossReference_1_1_1_0 = (CrossReference)cModelClassAssignment_1_1_1.eContents().get(0);
		private final RuleCall cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cModelClassEClassCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cSourceKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cSourceReferenceAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cSourceReferenceEReferenceCrossReference_1_1_3_0 = (CrossReference)cSourceReferenceAssignment_1_1_3.eContents().get(0);
		private final RuleCall cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1 = (RuleCall)cSourceReferenceEReferenceCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cTargetKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cTargetReferenceAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final CrossReference cTargetReferenceEReferenceCrossReference_1_1_5_0 = (CrossReference)cTargetReferenceAssignment_1_1_5.eContents().get(0);
		private final RuleCall cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1 = (RuleCall)cTargetReferenceEReferenceCrossReference_1_1_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLinkFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cDecoratorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDecoratorsDecoratorParserRuleCall_4_0 = (RuleCall)cDecoratorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Link: //(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//	'link' (reference?='reference' modelReference=[ecore::EReference|QualifiedName] | complex?='class'
		//	modelClass=[ecore::EClass|QualifiedName] 'source' sourceReference=[ecore::EReference|QualifiedName] 'target'
		//	targetReference=[ecore::EReference|QualifiedName]) //    (styled?='+' style=[Style])?
		//	'{' features+=LinkFeature* decorators+=Decorator* '}';
		@Override public ParserRule getRule() { return rule; }
		
		////(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//'link' (reference?='reference' modelReference=[ecore::EReference|QualifiedName] | complex?='class'
		//modelClass=[ecore::EClass|QualifiedName] 'source' sourceReference=[ecore::EReference|QualifiedName] 'target'
		//targetReference=[ecore::EReference|QualifiedName]) //    (styled?='+' style=[Style])?
		//'{' features+=LinkFeature* decorators+=Decorator* '}'
		public Group getGroup() { return cGroup; }
		
		////(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//(reference?='reference' modelReference=[ecore::EReference|QualifiedName] | complex?='class'
		//modelClass=[ecore::EClass|QualifiedName] 'source' sourceReference=[ecore::EReference|QualifiedName] 'target'
		//targetReference=[ecore::EReference|QualifiedName])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//reference?='reference' modelReference=[ecore::EReference|QualifiedName]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//reference?='reference'
		public Assignment getReferenceAssignment_1_0_0() { return cReferenceAssignment_1_0_0; }
		
		//'reference'
		public Keyword getReferenceReferenceKeyword_1_0_0_0() { return cReferenceReferenceKeyword_1_0_0_0; }
		
		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_1_0_1() { return cModelReferenceAssignment_1_0_1; }
		
		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_1_0_1_0() { return cModelReferenceEReferenceCrossReference_1_0_1_0; }
		
		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1_0_1; }
		
		//complex?='class' modelClass=[ecore::EClass|QualifiedName] 'source' sourceReference=[ecore::EReference|QualifiedName]
		//'target' targetReference=[ecore::EReference|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//complex?='class'
		public Assignment getComplexAssignment_1_1_0() { return cComplexAssignment_1_1_0; }
		
		//'class'
		public Keyword getComplexClassKeyword_1_1_0_0() { return cComplexClassKeyword_1_1_0_0; }
		
		//modelClass=[ecore::EClass|QualifiedName]
		public Assignment getModelClassAssignment_1_1_1() { return cModelClassAssignment_1_1_1; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getModelClassEClassCrossReference_1_1_1_0() { return cModelClassEClassCrossReference_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1() { return cModelClassEClassQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//'source'
		public Keyword getSourceKeyword_1_1_2() { return cSourceKeyword_1_1_2; }
		
		//sourceReference=[ecore::EReference|QualifiedName]
		public Assignment getSourceReferenceAssignment_1_1_3() { return cSourceReferenceAssignment_1_1_3; }
		
		//[ecore::EReference|QualifiedName]
		public CrossReference getSourceReferenceEReferenceCrossReference_1_1_3_0() { return cSourceReferenceEReferenceCrossReference_1_1_3_0; }
		
		//QualifiedName
		public RuleCall getSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1() { return cSourceReferenceEReferenceQualifiedNameParserRuleCall_1_1_3_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_1_1_4() { return cTargetKeyword_1_1_4; }
		
		//targetReference=[ecore::EReference|QualifiedName]
		public Assignment getTargetReferenceAssignment_1_1_5() { return cTargetReferenceAssignment_1_1_5; }
		
		//[ecore::EReference|QualifiedName]
		public CrossReference getTargetReferenceEReferenceCrossReference_1_1_5_0() { return cTargetReferenceEReferenceCrossReference_1_1_5_0; }
		
		//QualifiedName
		public RuleCall getTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1() { return cTargetReferenceEReferenceQualifiedNameParserRuleCall_1_1_5_0_1; }
		
		////    (styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=LinkFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//LinkFeature
		public RuleCall getFeaturesLinkFeatureParserRuleCall_3_0() { return cFeaturesLinkFeatureParserRuleCall_3_0; }
		
		//decorators+=Decorator*
		public Assignment getDecoratorsAssignment_4() { return cDecoratorsAssignment_4; }
		
		//Decorator
		public RuleCall getDecoratorsDecoratorParserRuleCall_4_0() { return cDecoratorsDecoratorParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LinkFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LinkFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LinkFeature Feature:
		//	Foreground | LineStyle | LineWidth
		@Override public ParserRule getRule() { return rule; }
		
		//Foreground | LineStyle | LineWidth
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }
		
		//LineStyle
		public RuleCall getLineStyleParserRuleCall_1() { return cLineStyleParserRuleCall_1; }
		
		//LineWidth
		public RuleCall getLineWidthParserRuleCall_2() { return cLineWidthParserRuleCall_2; }
	}
	public class DecoratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Decorator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecoratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionINTTerminalRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementDecoratorElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//Decorator:
		//	'decorator' position=INT '%' element=DecoratorElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'decorator' position=INT '%' element=DecoratorElement
		public Group getGroup() { return cGroup; }
		
		//'decorator'
		public Keyword getDecoratorKeyword_0() { return cDecoratorKeyword_0; }
		
		//position=INT
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }
		
		//INT
		public RuleCall getPositionINTTerminalRuleCall_1_0() { return cPositionINTTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//element=DecoratorElement
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//DecoratorElement
		public RuleCall getElementDecoratorElementParserRuleCall_3_0() { return cElementDecoratorElementParserRuleCall_3_0; }
	}
	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Anchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnchorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionAnchorDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cModelReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelReferenceEReferenceCrossReference_2_0 = (CrossReference)cModelReferenceAssignment_2.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_3_1_0 = (RuleCall)cMaxAssignment_3_1.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO validation
		//Anchor:
		//	'anchor' direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] ('max' max=INT)?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'anchor' direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] ('max' max=INT)?
		//conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'anchor'
		public Keyword getAnchorKeyword_0() { return cAnchorKeyword_0; }
		
		//direction=AnchorDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//AnchorDirection
		public RuleCall getDirectionAnchorDirectionEnumRuleCall_1_0() { return cDirectionAnchorDirectionEnumRuleCall_1_0; }
		
		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_2() { return cModelReferenceAssignment_2; }
		
		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_2_0() { return cModelReferenceEReferenceCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_2_0_1; }
		
		//('max' max=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'max'
		public Keyword getMaxKeyword_3_0() { return cMaxKeyword_3_0; }
		
		//max=INT
		public Assignment getMaxAssignment_3_1() { return cMaxAssignment_3_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_1_0() { return cMaxINTTerminalRuleCall_3_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_4_0() { return cConditionalFeatureConditionalParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class CustomColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.CustomColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRINTTerminalRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		private final Assignment cGAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGINTTerminalRuleCall_3_0 = (RuleCall)cGAssignment_3.eContents().get(0);
		private final Assignment cBAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBINTTerminalRuleCall_4_0 = (RuleCall)cBAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////---------------------------------------
		//// Colors
		//CustomColor:
		//	'color' name=ID R=INT G=INT B=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'color' name=ID R=INT G=INT B=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//R=INT
		public Assignment getRAssignment_2() { return cRAssignment_2; }
		
		//INT
		public RuleCall getRINTTerminalRuleCall_2_0() { return cRINTTerminalRuleCall_2_0; }
		
		//G=INT
		public Assignment getGAssignment_3() { return cGAssignment_3; }
		
		//INT
		public RuleCall getGINTTerminalRuleCall_3_0() { return cGINTTerminalRuleCall_3_0; }
		
		//B=INT
		public Assignment getBAssignment_4() { return cBAssignment_4; }
		
		//INT
		public RuleCall getBINTTerminalRuleCall_4_0() { return cBINTTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultDefaultColorEnumRuleCall_0_0 = (RuleCall)cDefaultAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomCustomColorCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomCustomColorIDTerminalRuleCall_1_0_1 = (RuleCall)cCustomCustomColorCrossReference_1_0.eContents().get(1);
		
		//Color:
		//	default=DefaultColor | custom=[CustomColor];
		@Override public ParserRule getRule() { return rule; }
		
		//default=DefaultColor | custom=[CustomColor]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//default=DefaultColor
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }
		
		//DefaultColor
		public RuleCall getDefaultDefaultColorEnumRuleCall_0_0() { return cDefaultDefaultColorEnumRuleCall_0_0; }
		
		//custom=[CustomColor]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }
		
		//[CustomColor]
		public CrossReference getCustomCustomColorCrossReference_1_0() { return cCustomCustomColorCrossReference_1_0; }
		
		//ID
		public RuleCall getCustomCustomColorIDTerminalRuleCall_1_0_1() { return cCustomCustomColorIDTerminalRuleCall_1_0_1; }
	}
	public class ConnectableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ConnectableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPolylineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInvisibleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCustomParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTriangleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////---------------------------------------
		//// Connectable Elements
		/// *
		// * Every connectable element must be included here, and have:
		// * ('child' children+=ChildElement)*
		// * (styled?='+' style=[Style])?
		// * / ConnectableElement:
		//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle;
		@Override public ParserRule getRule() { return rule; }
		
		//Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rectangle
		public RuleCall getRectangleParserRuleCall_0() { return cRectangleParserRuleCall_0; }
		
		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }
		
		//Ellipse
		public RuleCall getEllipseParserRuleCall_2() { return cEllipseParserRuleCall_2; }
		
		//Polyline
		public RuleCall getPolylineParserRuleCall_3() { return cPolylineParserRuleCall_3; }
		
		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }
		
		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }
		
		//Invisible
		public RuleCall getInvisibleParserRuleCall_6() { return cInvisibleParserRuleCall_6; }
		
		//Custom
		public RuleCall getCustomParserRuleCall_7() { return cCustomParserRuleCall_7; }
		
		//Triangle
		public RuleCall getTriangleParserRuleCall_8() { return cTriangleParserRuleCall_8; }
	}
	public class DecoratorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.DecoratorElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEllipseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRhombusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPolylineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTriangleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLabelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLineParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//DecoratorElement FeatureContainer:
		//	Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line
		@Override public ParserRule getRule() { return rule; }
		
		//Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ellipse
		public RuleCall getEllipseParserRuleCall_0() { return cEllipseParserRuleCall_0; }
		
		//Rhombus
		public RuleCall getRhombusParserRuleCall_1() { return cRhombusParserRuleCall_1; }
		
		//Polyline
		public RuleCall getPolylineParserRuleCall_2() { return cPolylineParserRuleCall_2; }
		
		//Triangle
		public RuleCall getTriangleParserRuleCall_3() { return cTriangleParserRuleCall_3; }
		
		//Label
		public RuleCall getLabelParserRuleCall_4() { return cLabelParserRuleCall_4; }
		
		//Image
		public RuleCall getImageParserRuleCall_5() { return cImageParserRuleCall_5; }
		
		//Arrow
		public RuleCall getArrowParserRuleCall_6() { return cArrowParserRuleCall_6; }
		
		//Line
		public RuleCall getLineParserRuleCall_7() { return cLineParserRuleCall_7; }
	}
	public class ConnectableElementFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ConnectableElementFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTransparencyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLineWidthParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cContainsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAnchorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLayoutParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVisibleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//ConnectableElementFeature Feature:
		//	Position | Size | ColorFeature | Transparency | LineStyle | LineWidth | Contains | Anchor | Layout | Visible
		@Override public ParserRule getRule() { return rule; }
		
		//Position | Size | ColorFeature | Transparency | LineStyle | LineWidth | Contains | Anchor | Layout | Visible
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Position
		public RuleCall getPositionParserRuleCall_0() { return cPositionParserRuleCall_0; }
		
		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }
		
		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_2() { return cColorFeatureParserRuleCall_2; }
		
		//Transparency
		public RuleCall getTransparencyParserRuleCall_3() { return cTransparencyParserRuleCall_3; }
		
		//LineStyle
		public RuleCall getLineStyleParserRuleCall_4() { return cLineStyleParserRuleCall_4; }
		
		//LineWidth
		public RuleCall getLineWidthParserRuleCall_5() { return cLineWidthParserRuleCall_5; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_6() { return cContainsParserRuleCall_6; }
		
		//Anchor
		public RuleCall getAnchorParserRuleCall_7() { return cAnchorParserRuleCall_7; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_8() { return cLayoutParserRuleCall_8; }
		
		//Visible
		public RuleCall getVisibleParserRuleCall_9() { return cVisibleParserRuleCall_9; }
	}
	public class CustomFigureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.CustomFigure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementConnectableElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//CustomFigure:
		//	'figure' name=ID 'as' element=ConnectableElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'figure' name=ID 'as' element=ConnectableElement
		public Group getGroup() { return cGroup; }
		
		//'figure'
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//element=ConnectableElement
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//ConnectableElement
		public RuleCall getElementConnectableElementParserRuleCall_3_0() { return cElementConnectableElementParserRuleCall_3_0; }
	}
	public class CustomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Custom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFigureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFigureCustomFigureCrossReference_1_0 = (CrossReference)cFigureAssignment_1.eContents().get(0);
		private final RuleCall cFigureCustomFigureIDTerminalRuleCall_1_0_1 = (RuleCall)cFigureCustomFigureCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLinkedFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Custom:
		//	'figure' figure=[CustomFigure]
		//	//(styled?='+' style=[Style])?
		//	'{'
		//	features+=LinkedFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'figure' figure=[CustomFigure] //(styled?='+' style=[Style])?
		//'{' features+=LinkedFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'figure'
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }
		
		//figure=[CustomFigure]
		public Assignment getFigureAssignment_1() { return cFigureAssignment_1; }
		
		//[CustomFigure]
		public CrossReference getFigureCustomFigureCrossReference_1_0() { return cFigureCustomFigureCrossReference_1_0; }
		
		//ID
		public RuleCall getFigureCustomFigureIDTerminalRuleCall_1_0_1() { return cFigureCustomFigureIDTerminalRuleCall_1_0_1; }
		
		////(styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=LinkedFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//LinkedFeature
		public RuleCall getFeaturesLinkedFeatureParserRuleCall_3_0() { return cFeaturesLinkedFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRectangleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRectangleRectangleKeyword_0_0_0 = (Keyword)cRectangleAssignment_0_0.eContents().get(0);
		private final Assignment cSquareAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSquareSquareKeyword_0_1_0 = (Keyword)cSquareAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesRectangleFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_3_1_0 = (RuleCall)cChildrenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rectangle:
		//	(rectangle?='rectangle' | square?='square')
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=RectangleFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(rectangle?='rectangle' | square?='square') //	(styled?='+' style=[Style])? 
		//'{' features+=RectangleFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//(rectangle?='rectangle' | square?='square')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//rectangle?='rectangle'
		public Assignment getRectangleAssignment_0_0() { return cRectangleAssignment_0_0; }
		
		//'rectangle'
		public Keyword getRectangleRectangleKeyword_0_0_0() { return cRectangleRectangleKeyword_0_0_0; }
		
		//square?='square'
		public Assignment getSquareAssignment_0_1() { return cSquareAssignment_0_1; }
		
		//'square'
		public Keyword getSquareSquareKeyword_0_1_0() { return cSquareSquareKeyword_0_1_0; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=RectangleFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//RectangleFeature
		public RuleCall getFeaturesRectangleFeatureParserRuleCall_2_0() { return cFeaturesRectangleFeatureParserRuleCall_2_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'child'
		public Keyword getChildKeyword_3_0() { return cChildKeyword_3_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_3_1_0() { return cChildrenChildElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RectangleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.RectangleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectableElementFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCornerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RectangleFeature Feature:
		//	ConnectableElementFeature | Corner
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectableElementFeature | Corner
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectableElementFeature
		public RuleCall getConnectableElementFeatureParserRuleCall_0() { return cConnectableElementFeatureParserRuleCall_0; }
		
		//Corner
		public RuleCall getCornerParserRuleCall_1() { return cCornerParserRuleCall_1; }
	}
	public class RhombusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Rhombus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRhombusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRhombusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rhombus:
		//	{Rhombus}
		//	'rhombus'
		//	//	(styled?='+' style=[Style])?
		//	'{'
		//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rhombus} 'rhombus' //	(styled?='+' style=[Style])?
		//'{' features+=ConnectableElementFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Rhombus}
		public Action getRhombusAction_0() { return cRhombusAction_0; }
		
		//'rhombus'
		public Keyword getRhombusKeyword_1() { return cRhombusKeyword_1; }
		
		////	(styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_3_0() { return cFeaturesConnectableElementFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEllipseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEllipseEllipseKeyword_0_0_0 = (Keyword)cEllipseAssignment_0_0.eContents().get(0);
		private final Assignment cCircleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCircleCircleKeyword_0_1_0 = (Keyword)cCircleAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_3_1_0 = (RuleCall)cChildrenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ellipse:
		//	(ellipse?='ellipse' | circle?='circle')
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(ellipse?='ellipse' | circle?='circle') //	(styled?='+' style=[Style])? 
		//'{' features+=ConnectableElementFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//(ellipse?='ellipse' | circle?='circle')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ellipse?='ellipse'
		public Assignment getEllipseAssignment_0_0() { return cEllipseAssignment_0_0; }
		
		//'ellipse'
		public Keyword getEllipseEllipseKeyword_0_0_0() { return cEllipseEllipseKeyword_0_0_0; }
		
		//circle?='circle'
		public Assignment getCircleAssignment_0_1() { return cCircleAssignment_0_1; }
		
		//'circle'
		public Keyword getCircleCircleKeyword_0_1_0() { return cCircleCircleKeyword_0_1_0; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_2_0() { return cFeaturesConnectableElementFeatureParserRuleCall_2_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'child'
		public Keyword getChildKeyword_3_0() { return cChildKeyword_3_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_3_1_0() { return cChildrenChildElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPolygonAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPolygonPolygonKeyword_0_0_0 = (Keyword)cPolygonAssignment_0_0.eContents().get(0);
		private final Assignment cPolylineAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cPolylinePolylineKeyword_0_1_0 = (Keyword)cPolylineAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPointParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesPointParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesPointParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cChildKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cChildrenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_6_1_0 = (RuleCall)cChildrenAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Polyline:
		//	(polygon?='polygon' | polyline?='polyline')
		//	//	(styled?='+' style=[Style])?
		//	'{'
		//	features+=Point
		//	features+=Point
		//	features+=Point*
		//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(polygon?='polygon' | polyline?='polyline') //	(styled?='+' style=[Style])?
		//'{' features+=Point features+=Point features+=Point* features+=ConnectableElementFeature* ('child'
		//children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//(polygon?='polygon' | polyline?='polyline')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//polygon?='polygon'
		public Assignment getPolygonAssignment_0_0() { return cPolygonAssignment_0_0; }
		
		//'polygon'
		public Keyword getPolygonPolygonKeyword_0_0_0() { return cPolygonPolygonKeyword_0_0_0; }
		
		//polyline?='polyline'
		public Assignment getPolylineAssignment_0_1() { return cPolylineAssignment_0_1; }
		
		//'polyline'
		public Keyword getPolylinePolylineKeyword_0_1_0() { return cPolylinePolylineKeyword_0_1_0; }
		
		////	(styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=Point
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//Point
		public RuleCall getFeaturesPointParserRuleCall_2_0() { return cFeaturesPointParserRuleCall_2_0; }
		
		//features+=Point
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//Point
		public RuleCall getFeaturesPointParserRuleCall_3_0() { return cFeaturesPointParserRuleCall_3_0; }
		
		//features+=Point*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Point
		public RuleCall getFeaturesPointParserRuleCall_4_0() { return cFeaturesPointParserRuleCall_4_0; }
		
		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }
		
		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_5_0() { return cFeaturesConnectableElementFeatureParserRuleCall_5_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'child'
		public Keyword getChildKeyword_6_0() { return cChildKeyword_6_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_6_1() { return cChildrenAssignment_6_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_6_1_0() { return cChildrenChildElementParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TriangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Triangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesConnectableElementFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Triangle:
		//	{Triangle}
		//	'triangle'
		//	//	(styled?='+' style=[Style])?
		//	'{'
		//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Triangle} 'triangle' //	(styled?='+' style=[Style])?
		//'{' features+=ConnectableElementFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Triangle}
		public Action getTriangleAction_0() { return cTriangleAction_0; }
		
		//'triangle'
		public Keyword getTriangleKeyword_1() { return cTriangleKeyword_1; }
		
		////	(styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=ConnectableElementFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//ConnectableElementFeature
		public RuleCall getFeaturesConnectableElementFeatureParserRuleCall_3_0() { return cFeaturesConnectableElementFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cHorizontalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cHorizontalHlineKeyword_1_0_0 = (Keyword)cHorizontalAssignment_1_0.eContents().get(0);
		private final Assignment cVerticalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cVerticalVlineKeyword_1_1_0 = (Keyword)cVerticalAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLineFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Line:
		//	{Line} (horizontal?='hline' | vertical?='vline')
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=LineFeature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Line} (horizontal?='hline' | vertical?='vline') //	(styled?='+' style=[Style])? 
		//'{' features+=LineFeature* '}'
		public Group getGroup() { return cGroup; }
		
		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }
		
		//(horizontal?='hline' | vertical?='vline')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//horizontal?='hline'
		public Assignment getHorizontalAssignment_1_0() { return cHorizontalAssignment_1_0; }
		
		//'hline'
		public Keyword getHorizontalHlineKeyword_1_0_0() { return cHorizontalHlineKeyword_1_0_0; }
		
		//vertical?='vline'
		public Assignment getVerticalAssignment_1_1() { return cVerticalAssignment_1_1; }
		
		//'vline'
		public Keyword getVerticalVlineKeyword_1_1_0() { return cVerticalVlineKeyword_1_1_0; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=LineFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//LineFeature
		public RuleCall getFeaturesLineFeatureParserRuleCall_3_0() { return cFeaturesLineFeatureParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LineFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LineFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineWidthParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPositionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVisibleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//LineFeature Feature:
		//	LineWidth | LineStyle | Foreground | Position | Size | Visible
		@Override public ParserRule getRule() { return rule; }
		
		//LineWidth | LineStyle | Foreground | Position | Size | Visible
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LineWidth
		public RuleCall getLineWidthParserRuleCall_0() { return cLineWidthParserRuleCall_0; }
		
		//LineStyle
		public RuleCall getLineStyleParserRuleCall_1() { return cLineStyleParserRuleCall_1; }
		
		//Foreground
		public RuleCall getForegroundParserRuleCall_2() { return cForegroundParserRuleCall_2; }
		
		//Position
		public RuleCall getPositionParserRuleCall_3() { return cPositionParserRuleCall_3; }
		
		//Size
		public RuleCall getSizeParserRuleCall_4() { return cSizeParserRuleCall_4; }
		
		//Visible
		public RuleCall getVisibleParserRuleCall_5() { return cVisibleParserRuleCall_5; }
	}
	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Arrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLineFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Arrow:
		//	{Arrow}
		//	'arrow'
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=LineFeature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Arrow} 'arrow' //	(styled?='+' style=[Style])? 
		//'{' features+=LineFeature* '}'
		public Group getGroup() { return cGroup; }
		
		//{Arrow}
		public Action getArrowAction_0() { return cArrowAction_0; }
		
		//'arrow'
		public Keyword getArrowKeyword_1() { return cArrowKeyword_1; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=LineFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//LineFeature
		public RuleCall getFeaturesLineFeatureParserRuleCall_3_0() { return cFeaturesLineFeatureParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelReferenceEReferenceCrossReference_1_0 = (CrossReference)cModelReferenceAssignment_1.eContents().get(0);
		private final RuleCall cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModelReferenceEReferenceCrossReference_1_0.eContents().get(1);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Contains:
		//	'contains' modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'contains' modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'contains'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//modelReference=[ecore::EReference|QualifiedName]
		public Assignment getModelReferenceAssignment_1() { return cModelReferenceAssignment_1; }
		
		//[ecore::EReference|QualifiedName]
		public CrossReference getModelReferenceEReferenceCrossReference_1_0() { return cModelReferenceEReferenceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1() { return cModelReferenceEReferenceQualifiedNameParserRuleCall_1_0_1; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | DoubleValue | StringValue | BooleanValue | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_1() { return cDoubleValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }
		
		//EnumValue
		public RuleCall getEnumValueParserRuleCall_4() { return cEnumValueParserRuleCall_4; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.DoubleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueIntAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIntINTTerminalRuleCall_0_0 = (RuleCall)cValueIntAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueDecimalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDecimalINTTerminalRuleCall_2_0 = (RuleCall)cValueDecimalAssignment_2.eContents().get(0);
		
		//DoubleValue:
		//	valueInt=INT '.' valueDecimal=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//valueInt=INT '.' valueDecimal=INT
		public Group getGroup() { return cGroup; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_0() { return cValueIntAssignment_0; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_0_0() { return cValueIntINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//valueDecimal=INT
		public Assignment getValueDecimalAssignment_2() { return cValueDecimalAssignment_2; }
		
		//INT
		public RuleCall getValueDecimalINTTerminalRuleCall_2_0() { return cValueDecimalINTTerminalRuleCall_2_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNullAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNullNullKeyword_0_0 = (Keyword)cNullAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue:
		//	null?='null' | value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//null?='null' | value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//null?='null'
		public Assignment getNullAssignment_0() { return cNullAssignment_0; }
		
		//'null'
		public Keyword getNullNullKeyword_0_0() { return cNullNullKeyword_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanLiteral
		public RuleCall getValueBooleanLiteralEnumRuleCall_0() { return cValueBooleanLiteralEnumRuleCall_0; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// TODO validation
		//EnumValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FigureFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.FigureFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLineStyleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FigureFeature Feature:
		//	ColorFeature | Size | Position | Point | LineStyle
		@Override public ParserRule getRule() { return rule; }
		
		//ColorFeature | Size | Position | Point | LineStyle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColorFeature
		public RuleCall getColorFeatureParserRuleCall_0() { return cColorFeatureParserRuleCall_0; }
		
		//Size
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }
		
		//Position
		public RuleCall getPositionParserRuleCall_2() { return cPositionParserRuleCall_2; }
		
		//Point
		public RuleCall getPointParserRuleCall_3() { return cPointParserRuleCall_3; }
		
		//LineStyle
		public RuleCall getLineStyleParserRuleCall_4() { return cLineStyleParserRuleCall_4; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesLabelFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Label:
		//	{Label}
		//	'label'
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=LabelFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Label} 'label' //	(styled?='+' style=[Style])? 
		//'{' features+=LabelFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }
		
		//'label'
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=LabelFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//LabelFeature
		public RuleCall getFeaturesLabelFeatureParserRuleCall_3_0() { return cFeaturesLabelFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LabelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LabelFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForegroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFontPropertiesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPositionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVisibleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTextAlignParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//LabelFeature Feature:
		//	TextValue | Foreground | FontProperties | Size | Position | Visible | TextAlign
		@Override public ParserRule getRule() { return rule; }
		
		//TextValue | Foreground | FontProperties | Size | Position | Visible | TextAlign
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextValue
		public RuleCall getTextValueParserRuleCall_0() { return cTextValueParserRuleCall_0; }
		
		//Foreground
		public RuleCall getForegroundParserRuleCall_1() { return cForegroundParserRuleCall_1; }
		
		//FontProperties
		public RuleCall getFontPropertiesParserRuleCall_2() { return cFontPropertiesParserRuleCall_2; }
		
		//Size
		public RuleCall getSizeParserRuleCall_3() { return cSizeParserRuleCall_3; }
		
		//Position
		public RuleCall getPositionParserRuleCall_4() { return cPositionParserRuleCall_4; }
		
		//Visible
		public RuleCall getVisibleParserRuleCall_5() { return cVisibleParserRuleCall_5; }
		
		//TextAlign
		public RuleCall getTextAlignParserRuleCall_6() { return cTextAlignParserRuleCall_6; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cImageIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesImageFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO image provider problem
		//Image:
		//	'image' imageId=STRING
		//	//	(styled?='+' style=[Style])? 
		//	'{'
		//	features+=ImageFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'image' imageId=STRING //	(styled?='+' style=[Style])? 
		//'{' features+=ImageFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//imageId=STRING
		public Assignment getImageIdAssignment_1() { return cImageIdAssignment_1; }
		
		//STRING
		public RuleCall getImageIdSTRINGTerminalRuleCall_1_0() { return cImageIdSTRINGTerminalRuleCall_1_0; }
		
		////	(styled?='+' style=[Style])? 
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=ImageFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//ImageFeature
		public RuleCall getFeaturesImageFeatureParserRuleCall_3_0() { return cFeaturesImageFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ImageFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ImageFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransparencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ImageFeature Feature:
		//	Size | Position | Transparency
		@Override public ParserRule getRule() { return rule; }
		
		//Size | Position | Transparency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }
		
		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }
		
		//Transparency
		public RuleCall getTransparencyParserRuleCall_2() { return cTransparencyParserRuleCall_2; }
	}
	public class InvisibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Invisible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvisibleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvisibleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesInvisibleFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildrenChildElementParserRuleCall_4_1_0 = (RuleCall)cChildrenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Invisible:
		//	{Invisible}
		//	'invisible'
		//	//	(styled?='+' style=[Style])?
		//	'{'
		//	features+=InvisibleFeature* ('child' children+=ChildElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Invisible} 'invisible' //	(styled?='+' style=[Style])?
		//'{' features+=InvisibleFeature* ('child' children+=ChildElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Invisible}
		public Action getInvisibleAction_0() { return cInvisibleAction_0; }
		
		//'invisible'
		public Keyword getInvisibleKeyword_1() { return cInvisibleKeyword_1; }
		
		////	(styled?='+' style=[Style])?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=InvisibleFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//InvisibleFeature
		public RuleCall getFeaturesInvisibleFeatureParserRuleCall_3_0() { return cFeaturesInvisibleFeatureParserRuleCall_3_0; }
		
		//('child' children+=ChildElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'child'
		public Keyword getChildKeyword_4_0() { return cChildKeyword_4_0; }
		
		//children+=ChildElement
		public Assignment getChildrenAssignment_4_1() { return cChildrenAssignment_4_1; }
		
		//ChildElement
		public RuleCall getChildrenChildElementParserRuleCall_4_1_0() { return cChildrenChildElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InvisibleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.InvisibleFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkedFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLayoutParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InvisibleFeature Feature:
		//	Size | Position | LinkedFeature | Layout
		@Override public ParserRule getRule() { return rule; }
		
		//Size | Position | LinkedFeature | Layout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Size
		public RuleCall getSizeParserRuleCall_0() { return cSizeParserRuleCall_0; }
		
		//Position
		public RuleCall getPositionParserRuleCall_1() { return cPositionParserRuleCall_1; }
		
		//LinkedFeature
		public RuleCall getLinkedFeatureParserRuleCall_2() { return cLinkedFeatureParserRuleCall_2; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_3() { return cLayoutParserRuleCall_3; }
	}
	public class ColorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.ColorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForegroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColorFeature:
		//	Foreground | Background;
		@Override public ParserRule getRule() { return rule; }
		
		//Foreground | Background
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Foreground
		public RuleCall getForegroundParserRuleCall_0() { return cForegroundParserRuleCall_0; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }
	}
	public class ForegroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Foreground");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeForegroundKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Foreground ColorFeature:
		//	type='foreground' color=Color
		//	conditional=FeatureConditional?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//type='foreground' color=Color conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//type='foreground'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'foreground'
		public Keyword getTypeForegroundKeyword_0_0() { return cTypeForegroundKeyword_0_0; }
		
		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_1_0() { return cColorColorParserRuleCall_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeBackgroundKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Background ColorFeature:
		//	type='background' color=Color
		//	conditional=FeatureConditional?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//type='background' color=Color conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//type='background'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'background'
		public Keyword getTypeBackgroundKeyword_0_0() { return cTypeBackgroundKeyword_0_0; }
		
		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_1_0() { return cColorColorParserRuleCall_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TransparencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Transparency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransparencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPercentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPercentINTTerminalRuleCall_1_0 = (RuleCall)cPercentAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// TODO validation percent
		//Transparency:
		//	'transparency' percent=INT '%'
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'transparency' percent=INT '%' conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'transparency'
		public Keyword getTransparencyKeyword_0() { return cTransparencyKeyword_0; }
		
		//percent=INT
		public Assignment getPercentAssignment_1() { return cPercentAssignment_1; }
		
		//INT
		public RuleCall getPercentINTTerminalRuleCall_1_0() { return cPercentINTTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Assignment cWidthRelativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWidthRelativeRightSquareBracketKeyword_2_0 = (Keyword)cWidthRelativeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHeightAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cHeightINTTerminalRuleCall_3_0_0 = (RuleCall)cHeightAssignment_3_0.eContents().get(0);
		private final Assignment cHeightRelativeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cHeightRelativeRightSquareBracketKeyword_3_1_0 = (Keyword)cHeightRelativeAssignment_3_1.eContents().get(0);
		private final Assignment cResizableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cResizableResizableKeyword_4_0 = (Keyword)cResizableAssignment_4.eContents().get(0);
		private final Assignment cConditionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_5_0 = (RuleCall)cConditionalAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Size:
		//	'size' width=INT widthRelative?=']'? (height=INT heightRelative?=']'?)? resizable?='resizable'?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'size' width=INT widthRelative?=']'? (height=INT heightRelative?=']'?)? resizable?='resizable'?
		//conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }
		
		//widthRelative?=']'?
		public Assignment getWidthRelativeAssignment_2() { return cWidthRelativeAssignment_2; }
		
		//']'
		public Keyword getWidthRelativeRightSquareBracketKeyword_2_0() { return cWidthRelativeRightSquareBracketKeyword_2_0; }
		
		//(height=INT heightRelative?=']'?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//height=INT
		public Assignment getHeightAssignment_3_0() { return cHeightAssignment_3_0; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_0_0() { return cHeightINTTerminalRuleCall_3_0_0; }
		
		//heightRelative?=']'?
		public Assignment getHeightRelativeAssignment_3_1() { return cHeightRelativeAssignment_3_1; }
		
		//']'
		public Keyword getHeightRelativeRightSquareBracketKeyword_3_1_0() { return cHeightRelativeRightSquareBracketKeyword_3_1_0; }
		
		//resizable?='resizable'?
		public Assignment getResizableAssignment_4() { return cResizableAssignment_4; }
		
		//'resizable'
		public Keyword getResizableResizableKeyword_4_0() { return cResizableResizableKeyword_4_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_5() { return cConditionalAssignment_5; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_5_0() { return cConditionalFeatureConditionalParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Point:
		//	'point' x=INT y=INT
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'point' x=INT y=INT conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'point'
		public Keyword getPointKeyword_0() { return cPointKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cXRelativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cXRelativePercentSignKeyword_2_0 = (Keyword)cXRelativeAssignment_2.eContents().get(0);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Assignment cYRelativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cYRelativePercentSignKeyword_4_0 = (Keyword)cYRelativeAssignment_4.eContents().get(0);
		private final Assignment cConditionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_5_0 = (RuleCall)cConditionalAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Position:
		//	'position' x=INT xRelative?='%'? y=INT yRelative?='%'?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'position' x=INT xRelative?='%'? y=INT yRelative?='%'? conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'position'
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//xRelative?='%'?
		public Assignment getXRelativeAssignment_2() { return cXRelativeAssignment_2; }
		
		//'%'
		public Keyword getXRelativePercentSignKeyword_2_0() { return cXRelativePercentSignKeyword_2_0; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//yRelative?='%'?
		public Assignment getYRelativeAssignment_4() { return cYRelativeAssignment_4; }
		
		//'%'
		public Keyword getYRelativePercentSignKeyword_4_0() { return cYRelativePercentSignKeyword_4_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_5() { return cConditionalAssignment_5; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_5_0() { return cConditionalFeatureConditionalParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCornerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleINTTerminalRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Corner:
		//	'corner' angle=INT
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'corner' angle=INT conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'corner'
		public Keyword getCornerKeyword_0() { return cCornerKeyword_0; }
		
		//angle=INT
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_1_0() { return cAngleINTTerminalRuleCall_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVerticalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalVerticalKeyword_1_0_0 = (Keyword)cVerticalAssignment_1_0.eContents().get(0);
		private final Assignment cHorizontalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_1_0 = (Keyword)cHorizontalAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMarginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMarginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMarginINTTerminalRuleCall_2_1_0 = (RuleCall)cMarginAssignment_2_1.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Layout:
		//	'layout' (vertical?='vertical' | horizontal?='horizontal') ('margin' margin=INT)?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'layout' (vertical?='vertical' | horizontal?='horizontal') ('margin' margin=INT)? conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'layout'
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//(vertical?='vertical' | horizontal?='horizontal')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//vertical?='vertical'
		public Assignment getVerticalAssignment_1_0() { return cVerticalAssignment_1_0; }
		
		//'vertical'
		public Keyword getVerticalVerticalKeyword_1_0_0() { return cVerticalVerticalKeyword_1_0_0; }
		
		//horizontal?='horizontal'
		public Assignment getHorizontalAssignment_1_1() { return cHorizontalAssignment_1_1; }
		
		//'horizontal'
		public Keyword getHorizontalHorizontalKeyword_1_1_0() { return cHorizontalHorizontalKeyword_1_1_0; }
		
		//('margin' margin=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'margin'
		public Keyword getMarginKeyword_2_0() { return cMarginKeyword_2_0; }
		
		//margin=INT
		public Assignment getMarginAssignment_2_1() { return cMarginAssignment_2_1; }
		
		//INT
		public RuleCall getMarginINTTerminalRuleCall_2_1_0() { return cMarginINTTerminalRuleCall_2_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class VisibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Visible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvisibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_1_0 = (RuleCall)cConditionalAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Visible:
		//	'invisible' conditional=FeatureConditional
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'invisible' conditional=FeatureConditional ';'
		public Group getGroup() { return cGroup; }
		
		//'invisible'
		public Keyword getInvisibleKeyword_0() { return cInvisibleKeyword_0; }
		
		//conditional=FeatureConditional
		public Assignment getConditionalAssignment_1() { return cConditionalAssignment_1; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_1_0() { return cConditionalFeatureConditionalParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.TextValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsTextPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////--------------------------------
		//// Text
		//// TODO: validation of owned attribute
		//TextValue:
		//	{TextValue}
		//	'text' parts+=TextPart*
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{TextValue} 'text' parts+=TextPart* conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//{TextValue}
		public Action getTextValueAction_0() { return cTextValueAction_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//parts+=TextPart*
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//TextPart
		public RuleCall getPartsTextPartParserRuleCall_2_0() { return cPartsTextPartParserRuleCall_2_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_3_0() { return cConditionalFeatureConditionalParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TextPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.TextPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEditableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cEditableEditKeyword_1_0_0 = (Keyword)cEditableAssignment_1_0.eContents().get(0);
		private final Assignment cModelAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cModelAttributeEAttributeCrossReference_1_1_0 = (CrossReference)cModelAttributeAssignment_1_1.eContents().get(0);
		private final RuleCall cModelAttributeEAttributeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cModelAttributeEAttributeCrossReference_1_1_0.eContents().get(1);
		
		//TextPart:
		//	text=STRING | editable?='edit:'? modelAttribute=[ecore::EAttribute|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//text=STRING | editable?='edit:'? modelAttribute=[ecore::EAttribute|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }
		
		//editable?='edit:'? modelAttribute=[ecore::EAttribute|QualifiedName]
		public Group getGroup_1() { return cGroup_1; }
		
		//editable?='edit:'?
		public Assignment getEditableAssignment_1_0() { return cEditableAssignment_1_0; }
		
		//'edit:'
		public Keyword getEditableEditKeyword_1_0_0() { return cEditableEditKeyword_1_0_0; }
		
		//modelAttribute=[ecore::EAttribute|QualifiedName]
		public Assignment getModelAttributeAssignment_1_1() { return cModelAttributeAssignment_1_1; }
		
		//[ecore::EAttribute|QualifiedName]
		public CrossReference getModelAttributeEAttributeCrossReference_1_1_0() { return cModelAttributeEAttributeCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getModelAttributeEAttributeQualifiedNameParserRuleCall_1_1_0_1() { return cModelAttributeEAttributeQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class FontPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.FontProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFontPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFontKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFaceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cFaceArialKeyword_2_0_0 = (Keyword)cFaceAssignment_2_0.eContents().get(0);
		private final Keyword cVerdanaKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cCourierKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cTimesKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Assignment cBoldAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cBoldBoldKeyword_4_0 = (Keyword)cBoldAssignment_4.eContents().get(0);
		private final Assignment cItalicsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cItalicsItalicsKeyword_5_0 = (Keyword)cItalicsAssignment_5.eContents().get(0);
		private final Assignment cConditionalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_6_0 = (RuleCall)cConditionalAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FontProperties:
		//	{FontProperties}
		//	'font' (face='arial' | 'verdana' | 'courier' | 'times')? size=INT? bold?='bold'? italics?='italics'?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{FontProperties} 'font' (face='arial' | 'verdana' | 'courier' | 'times')? size=INT? bold?='bold'? italics?='italics'?
		//conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//{FontProperties}
		public Action getFontPropertiesAction_0() { return cFontPropertiesAction_0; }
		
		//'font'
		public Keyword getFontKeyword_1() { return cFontKeyword_1; }
		
		//(face='arial' | 'verdana' | 'courier' | 'times')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//face='arial'
		public Assignment getFaceAssignment_2_0() { return cFaceAssignment_2_0; }
		
		//'arial'
		public Keyword getFaceArialKeyword_2_0_0() { return cFaceArialKeyword_2_0_0; }
		
		//'verdana'
		public Keyword getVerdanaKeyword_2_1() { return cVerdanaKeyword_2_1; }
		
		//'courier'
		public Keyword getCourierKeyword_2_2() { return cCourierKeyword_2_2; }
		
		//'times'
		public Keyword getTimesKeyword_2_3() { return cTimesKeyword_2_3; }
		
		//size=INT?
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//bold?='bold'?
		public Assignment getBoldAssignment_4() { return cBoldAssignment_4; }
		
		//'bold'
		public Keyword getBoldBoldKeyword_4_0() { return cBoldBoldKeyword_4_0; }
		
		//italics?='italics'?
		public Assignment getItalicsAssignment_5() { return cItalicsAssignment_5; }
		
		//'italics'
		public Keyword getItalicsItalicsKeyword_5_0() { return cItalicsItalicsKeyword_5_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_6() { return cConditionalAssignment_6; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_6_0() { return cConditionalFeatureConditionalParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class TextAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.TextAlign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTextAlignValueEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TextAlign:
		//	'align' value=TextAlignValue
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'align' value=TextAlignValue conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'align'
		public Keyword getAlignKeyword_0() { return cAlignKeyword_0; }
		
		//value=TextAlignValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//TextAlignValue
		public RuleCall getValueTextAlignValueEnumRuleCall_1_0() { return cValueTextAlignValueEnumRuleCall_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LineStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LineStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinestyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleLineTypeEnumRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Assignment cManhattanAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManhattanManhattanKeyword_3_0 = (Keyword)cManhattanAssignment_3.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////-------------------------------
		//// Lines
		//LineStyle:
		//	{LineStyle}
		//	'linestyle' style=LineType? manhattan?='manhattan'?
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{LineStyle} 'linestyle' style=LineType? manhattan?='manhattan'? conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//{LineStyle}
		public Action getLineStyleAction_0() { return cLineStyleAction_0; }
		
		//'linestyle'
		public Keyword getLinestyleKeyword_1() { return cLinestyleKeyword_1; }
		
		//style=LineType?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }
		
		//LineType
		public RuleCall getStyleLineTypeEnumRuleCall_2_0() { return cStyleLineTypeEnumRuleCall_2_0; }
		
		//manhattan?='manhattan'?
		public Assignment getManhattanAssignment_3() { return cManhattanAssignment_3; }
		
		//'manhattan'
		public Keyword getManhattanManhattanKeyword_3_0() { return cManhattanManhattanKeyword_3_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_4_0() { return cConditionalFeatureConditionalParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class LineWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LineWidth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinewidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalFeatureConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LineWidth:
		//	'linewidth' width=INT
		//	conditional=FeatureConditional?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'linewidth' width=INT conditional=FeatureConditional? ';'
		public Group getGroup() { return cGroup; }
		
		//'linewidth'
		public Keyword getLinewidthKeyword_0() { return cLinewidthKeyword_0; }
		
		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }
		
		//conditional=FeatureConditional?
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//FeatureConditional
		public RuleCall getConditionalFeatureConditionalParserRuleCall_2_0() { return cConditionalFeatureConditionalParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	public class AnchorDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.AnchorDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCOMINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCOMINGIncomingKeyword_0_0 = (Keyword)cINCOMINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTGOINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTGOINGOutgoingKeyword_1_0 = (Keyword)cOUTGOINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AnchorDirection:
		//	INCOMING='incoming' |
		//	OUTGOING='outgoing';
		public EnumRule getRule() { return rule; }
		
		//INCOMING='incoming' | OUTGOING='outgoing'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INCOMING='incoming'
		public EnumLiteralDeclaration getINCOMINGEnumLiteralDeclaration_0() { return cINCOMINGEnumLiteralDeclaration_0; }
		
		//'incoming'
		public Keyword getINCOMINGIncomingKeyword_0_0() { return cINCOMINGIncomingKeyword_0_0; }
		
		//OUTGOING='outgoing'
		public EnumLiteralDeclaration getOUTGOINGEnumLiteralDeclaration_1() { return cOUTGOINGEnumLiteralDeclaration_1; }
		
		//'outgoing'
		public Keyword getOUTGOINGOutgoingKeyword_1_0() { return cOUTGOINGOutgoingKeyword_1_0; }
	}
	public class DefaultColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.DefaultColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWHITEWhiteKeyword_0_0 = (Keyword)cWHITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSILVEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSILVERSilverKeyword_1_0 = (Keyword)cSILVEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGRAYGrayKeyword_2_0 = (Keyword)cGRAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBLACKBlackKeyword_3_0 = (Keyword)cBLACKEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREDRedKeyword_4_0 = (Keyword)cREDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMAROONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMAROONMaroonKeyword_5_0 = (Keyword)cMAROONEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYELLOWYellowKeyword_6_0 = (Keyword)cYELLOWEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOLIVEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOLIVEOliveKeyword_7_0 = (Keyword)cOLIVEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLIMEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLIMELimeKeyword_8_0 = (Keyword)cLIMEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cGREENGreenKeyword_9_0 = (Keyword)cGREENEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cAQUAEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cAQUAAquaKeyword_10_0 = (Keyword)cAQUAEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTEALEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTEALTealKeyword_11_0 = (Keyword)cTEALEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cBLUEBlueKeyword_12_0 = (Keyword)cBLUEEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cNAVYEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cNAVYNavyKeyword_13_0 = (Keyword)cNAVYEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cFUCHSIAEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cFUCHSIAFuchsiaKeyword_14_0 = (Keyword)cFUCHSIAEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cPURPLEEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cPURPLEPurpleKeyword_15_0 = (Keyword)cPURPLEEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum DefaultColor:
		//	WHITE='white' |
		//	SILVER='silver' |
		//	GRAY='gray' |
		//	BLACK='black' |
		//	RED='red' |
		//	MAROON='maroon' |
		//	YELLOW='yellow' |
		//	OLIVE='olive' |
		//	LIME='lime' |
		//	GREEN='green' |
		//	AQUA='aqua' |
		//	TEAL='teal' |
		//	BLUE='blue' |
		//	NAVY='navy' |
		//	FUCHSIA='fuchsia' |
		//	PURPLE='purple';
		public EnumRule getRule() { return rule; }
		
		//WHITE='white' | SILVER='silver' | GRAY='gray' | BLACK='black' | RED='red' | MAROON='maroon' | YELLOW='yellow' |
		//OLIVE='olive' | LIME='lime' | GREEN='green' | AQUA='aqua' | TEAL='teal' | BLUE='blue' | NAVY='navy' | FUCHSIA='fuchsia'
		//| PURPLE='purple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WHITE='white'
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_0() { return cWHITEEnumLiteralDeclaration_0; }
		
		//'white'
		public Keyword getWHITEWhiteKeyword_0_0() { return cWHITEWhiteKeyword_0_0; }
		
		//SILVER='silver'
		public EnumLiteralDeclaration getSILVEREnumLiteralDeclaration_1() { return cSILVEREnumLiteralDeclaration_1; }
		
		//'silver'
		public Keyword getSILVERSilverKeyword_1_0() { return cSILVERSilverKeyword_1_0; }
		
		//GRAY='gray'
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_2() { return cGRAYEnumLiteralDeclaration_2; }
		
		//'gray'
		public Keyword getGRAYGrayKeyword_2_0() { return cGRAYGrayKeyword_2_0; }
		
		//BLACK='black'
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_3() { return cBLACKEnumLiteralDeclaration_3; }
		
		//'black'
		public Keyword getBLACKBlackKeyword_3_0() { return cBLACKBlackKeyword_3_0; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_4() { return cREDEnumLiteralDeclaration_4; }
		
		//'red'
		public Keyword getREDRedKeyword_4_0() { return cREDRedKeyword_4_0; }
		
		//MAROON='maroon'
		public EnumLiteralDeclaration getMAROONEnumLiteralDeclaration_5() { return cMAROONEnumLiteralDeclaration_5; }
		
		//'maroon'
		public Keyword getMAROONMaroonKeyword_5_0() { return cMAROONMaroonKeyword_5_0; }
		
		//YELLOW='yellow'
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_6() { return cYELLOWEnumLiteralDeclaration_6; }
		
		//'yellow'
		public Keyword getYELLOWYellowKeyword_6_0() { return cYELLOWYellowKeyword_6_0; }
		
		//OLIVE='olive'
		public EnumLiteralDeclaration getOLIVEEnumLiteralDeclaration_7() { return cOLIVEEnumLiteralDeclaration_7; }
		
		//'olive'
		public Keyword getOLIVEOliveKeyword_7_0() { return cOLIVEOliveKeyword_7_0; }
		
		//LIME='lime'
		public EnumLiteralDeclaration getLIMEEnumLiteralDeclaration_8() { return cLIMEEnumLiteralDeclaration_8; }
		
		//'lime'
		public Keyword getLIMELimeKeyword_8_0() { return cLIMELimeKeyword_8_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_9() { return cGREENEnumLiteralDeclaration_9; }
		
		//'green'
		public Keyword getGREENGreenKeyword_9_0() { return cGREENGreenKeyword_9_0; }
		
		//AQUA='aqua'
		public EnumLiteralDeclaration getAQUAEnumLiteralDeclaration_10() { return cAQUAEnumLiteralDeclaration_10; }
		
		//'aqua'
		public Keyword getAQUAAquaKeyword_10_0() { return cAQUAAquaKeyword_10_0; }
		
		//TEAL='teal'
		public EnumLiteralDeclaration getTEALEnumLiteralDeclaration_11() { return cTEALEnumLiteralDeclaration_11; }
		
		//'teal'
		public Keyword getTEALTealKeyword_11_0() { return cTEALTealKeyword_11_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_12() { return cBLUEEnumLiteralDeclaration_12; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_12_0() { return cBLUEBlueKeyword_12_0; }
		
		//NAVY='navy'
		public EnumLiteralDeclaration getNAVYEnumLiteralDeclaration_13() { return cNAVYEnumLiteralDeclaration_13; }
		
		//'navy'
		public Keyword getNAVYNavyKeyword_13_0() { return cNAVYNavyKeyword_13_0; }
		
		//FUCHSIA='fuchsia'
		public EnumLiteralDeclaration getFUCHSIAEnumLiteralDeclaration_14() { return cFUCHSIAEnumLiteralDeclaration_14; }
		
		//'fuchsia'
		public Keyword getFUCHSIAFuchsiaKeyword_14_0() { return cFUCHSIAFuchsiaKeyword_14_0; }
		
		//PURPLE='purple'
		public EnumLiteralDeclaration getPURPLEEnumLiteralDeclaration_15() { return cPURPLEEnumLiteralDeclaration_15; }
		
		//'purple'
		public Keyword getPURPLEPurpleKeyword_15_0() { return cPURPLEPurpleKeyword_15_0; }
	}
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cDIFFERENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator:
		//	EQUAL='=' |
		//	DIFFERENT='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | DIFFERENT='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//DIFFERENT='<>'
		public EnumLiteralDeclaration getDIFFERENTEnumLiteralDeclaration_1() { return cDIFFERENTEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getDIFFERENTLessThanSignGreaterThanSignKeyword_1_0() { return cDIFFERENTLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class BooleanLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteral:
		//	TRUE='true' |
		//	FALSE='false';
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	public class TextAlignValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.TextAlignValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCENTERCenterKeyword_1_0 = (Keyword)cCENTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRightKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TextAlignValue:
		//	LEFT='left' |
		//	CENTER='center' |
		//	RIGHT='right';
		public EnumRule getRule() { return rule; }
		
		//LEFT='left' | CENTER='center' | RIGHT='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT='left'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }
		
		//CENTER='center'
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_1() { return cCENTEREnumLiteralDeclaration_1; }
		
		//'center'
		public Keyword getCENTERCenterKeyword_1_0() { return cCENTERCenterKeyword_1_0; }
		
		//RIGHT='right'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_2_0() { return cRIGHTRightKeyword_2_0; }
	}
	public class LineTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.xdiagram.dsl.XdiagramDsl.LineType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOLIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOLIDSolidKeyword_0_0 = (Keyword)cSOLIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDASHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDASHDashedKeyword_1_0 = (Keyword)cDASHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOTDottedKeyword_2_0 = (Keyword)cDOTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum LineType:
		//	SOLID='solid' |
		//	DASH='dashed' |
		//	DOT='dotted';
		public EnumRule getRule() { return rule; }
		
		//SOLID='solid' | DASH='dashed' | DOT='dotted'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SOLID='solid'
		public EnumLiteralDeclaration getSOLIDEnumLiteralDeclaration_0() { return cSOLIDEnumLiteralDeclaration_0; }
		
		//'solid'
		public Keyword getSOLIDSolidKeyword_0_0() { return cSOLIDSolidKeyword_0_0; }
		
		//DASH='dashed'
		public EnumLiteralDeclaration getDASHEnumLiteralDeclaration_1() { return cDASHEnumLiteralDeclaration_1; }
		
		//'dashed'
		public Keyword getDASHDashedKeyword_1_0() { return cDASHDashedKeyword_1_0; }
		
		//DOT='dotted'
		public EnumLiteralDeclaration getDOTEnumLiteralDeclaration_2() { return cDOTEnumLiteralDeclaration_2; }
		
		//'dotted'
		public Keyword getDOTDottedKeyword_2_0() { return cDOTDottedKeyword_2_0; }
	}
	
	private final XDiagramElements pXDiagram;
	private final MetaModelElements pMetaModel;
	private final ImportStatementElements pImportStatement;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final DiagramElements pDiagram;
	private final DiagramElementElements pDiagramElement;
	private final FeatureElements pFeature;
	private final LinkedFeatureElements pLinkedFeature;
	private final StyleFeatureElements pStyleFeature;
	private final FeatureContainerElements pFeatureContainer;
	private final ChildElementElements pChildElement;
	private final FeatureConditionalElements pFeatureConditional;
	private final NodeElements pNode;
	private final LinkElements pLink;
	private final LinkFeatureElements pLinkFeature;
	private final DecoratorElements pDecorator;
	private final AnchorElements pAnchor;
	private final AnchorDirectionElements eAnchorDirection;
	private final CustomColorElements pCustomColor;
	private final ColorElements pColor;
	private final DefaultColorElements eDefaultColor;
	private final ConnectableElementElements pConnectableElement;
	private final DecoratorElementElements pDecoratorElement;
	private final ConnectableElementFeatureElements pConnectableElementFeature;
	private final CustomFigureElements pCustomFigure;
	private final CustomElements pCustom;
	private final RectangleElements pRectangle;
	private final RectangleFeatureElements pRectangleFeature;
	private final RhombusElements pRhombus;
	private final EllipseElements pEllipse;
	private final PolylineElements pPolyline;
	private final TriangleElements pTriangle;
	private final LineElements pLine;
	private final LineFeatureElements pLineFeature;
	private final ArrowElements pArrow;
	private final ContainsElements pContains;
	private final OperatorElements eOperator;
	private final ValueElements pValue;
	private final IntValueElements pIntValue;
	private final DoubleValueElements pDoubleValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final BooleanLiteralElements eBooleanLiteral;
	private final EnumValueElements pEnumValue;
	private final FigureFeatureElements pFigureFeature;
	private final LabelElements pLabel;
	private final LabelFeatureElements pLabelFeature;
	private final ImageElements pImage;
	private final ImageFeatureElements pImageFeature;
	private final InvisibleElements pInvisible;
	private final InvisibleFeatureElements pInvisibleFeature;
	private final ColorFeatureElements pColorFeature;
	private final ForegroundElements pForeground;
	private final BackgroundElements pBackground;
	private final TransparencyElements pTransparency;
	private final SizeElements pSize;
	private final PointElements pPoint;
	private final PositionElements pPosition;
	private final CornerElements pCorner;
	private final LayoutElements pLayout;
	private final VisibleElements pVisible;
	private final TextValueElements pTextValue;
	private final TextPartElements pTextPart;
	private final FontPropertiesElements pFontProperties;
	private final TextAlignElements pTextAlign;
	private final TextAlignValueElements eTextAlignValue;
	private final LineStyleElements pLineStyle;
	private final LineTypeElements eLineType;
	private final LineWidthElements pLineWidth;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XdiagramDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXDiagram = new XDiagramElements();
		this.pMetaModel = new MetaModelElements();
		this.pImportStatement = new ImportStatementElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pDiagram = new DiagramElements();
		this.pDiagramElement = new DiagramElementElements();
		this.pFeature = new FeatureElements();
		this.pLinkedFeature = new LinkedFeatureElements();
		this.pStyleFeature = new StyleFeatureElements();
		this.pFeatureContainer = new FeatureContainerElements();
		this.pChildElement = new ChildElementElements();
		this.pFeatureConditional = new FeatureConditionalElements();
		this.pNode = new NodeElements();
		this.pLink = new LinkElements();
		this.pLinkFeature = new LinkFeatureElements();
		this.pDecorator = new DecoratorElements();
		this.pAnchor = new AnchorElements();
		this.eAnchorDirection = new AnchorDirectionElements();
		this.pCustomColor = new CustomColorElements();
		this.pColor = new ColorElements();
		this.eDefaultColor = new DefaultColorElements();
		this.pConnectableElement = new ConnectableElementElements();
		this.pDecoratorElement = new DecoratorElementElements();
		this.pConnectableElementFeature = new ConnectableElementFeatureElements();
		this.pCustomFigure = new CustomFigureElements();
		this.pCustom = new CustomElements();
		this.pRectangle = new RectangleElements();
		this.pRectangleFeature = new RectangleFeatureElements();
		this.pRhombus = new RhombusElements();
		this.pEllipse = new EllipseElements();
		this.pPolyline = new PolylineElements();
		this.pTriangle = new TriangleElements();
		this.pLine = new LineElements();
		this.pLineFeature = new LineFeatureElements();
		this.pArrow = new ArrowElements();
		this.pContains = new ContainsElements();
		this.eOperator = new OperatorElements();
		this.pValue = new ValueElements();
		this.pIntValue = new IntValueElements();
		this.pDoubleValue = new DoubleValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.eBooleanLiteral = new BooleanLiteralElements();
		this.pEnumValue = new EnumValueElements();
		this.pFigureFeature = new FigureFeatureElements();
		this.pLabel = new LabelElements();
		this.pLabelFeature = new LabelFeatureElements();
		this.pImage = new ImageElements();
		this.pImageFeature = new ImageFeatureElements();
		this.pInvisible = new InvisibleElements();
		this.pInvisibleFeature = new InvisibleFeatureElements();
		this.pColorFeature = new ColorFeatureElements();
		this.pForeground = new ForegroundElements();
		this.pBackground = new BackgroundElements();
		this.pTransparency = new TransparencyElements();
		this.pSize = new SizeElements();
		this.pPoint = new PointElements();
		this.pPosition = new PositionElements();
		this.pCorner = new CornerElements();
		this.pLayout = new LayoutElements();
		this.pVisible = new VisibleElements();
		this.pTextValue = new TextValueElements();
		this.pTextPart = new TextPartElements();
		this.pFontProperties = new FontPropertiesElements();
		this.pTextAlign = new TextAlignElements();
		this.eTextAlignValue = new TextAlignValueElements();
		this.pLineStyle = new LineStyleElements();
		this.eLineType = new LineTypeElements();
		this.pLineWidth = new LineWidthElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pt.iscte.xdiagram.dsl.XdiagramDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XDiagram:
	//	metamodel=MetaModel
	//	diagram=Diagram (elements+=DiagramElement | colors+=CustomColor | figures+=CustomFigure)*;
	public XDiagramElements getXDiagramAccess() {
		return pXDiagram;
	}
	
	public ParserRule getXDiagramRule() {
		return getXDiagramAccess().getRule();
	}
	
	//// validation
	//MetaModel:
	//	'metamodel' '{'
	//	'plugin' plugin=STRING
	//	'ecore-file' ecorePath=STRING
	//	'}';
	public MetaModelElements getMetaModelAccess() {
		return pMetaModel;
	}
	
	public ParserRule getMetaModelRule() {
		return getMetaModelAccess().getRule();
	}
	
	//// importedNamespace apparently cannot be on the root element
	//ImportStatement:
	//	{ImportStatement} ('import' importedNamespace=QualifiedNameWithWildCard)?;
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildCard:
	//	QualifiedName ('.' '*')?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}
	
	//Diagram:
	//	'diagram' modelClass=[ecore::EClass|QualifiedName] '{'
	//	contains+=Contains*
	//	'}';
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	////ToolGroup:
	////	'toolgroup' name=ID (description=STRING)? ';'
	////;
	//DiagramElement:
	//	Node | Link;
	public DiagramElementElements getDiagramElementAccess() {
		return pDiagramElement;
	}
	
	public ParserRule getDiagramElementRule() {
		return getDiagramElementAccess().getRule();
	}
	
	////Style:
	////	'style' name=ID  (styled?='+' style=[Style])? '{'
	////	      features+=StyleFeature*
	////	'}'
	////;
	/// **
	// * Every feature has to be added here, and have:
	// * (conditional=FeatureConditional)?
	// * / Feature:
	//	StyleFeature | LinkedFeature;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//LinkedFeature Feature:
	//	Contains | Anchor
	public LinkedFeatureElements getLinkedFeatureAccess() {
		return pLinkedFeature;
	}
	
	public ParserRule getLinkedFeatureRule() {
		return getLinkedFeatureAccess().getRule();
	}
	
	//StyleFeature Feature:
	//	Size | Position | Point | Corner | Background | Foreground | Transparency | FontProperties | TextValue | TextAlign |
	//	LineStyle | LineWidth
	public StyleFeatureElements getStyleFeatureAccess() {
		return pStyleFeature;
	}
	
	public ParserRule getStyleFeatureRule() {
		return getStyleFeatureAccess().getRule();
	}
	
	//FeatureContainer:
	//	ConnectableElement | DecoratorElement | Link //| Style
	//;
	public FeatureContainerElements getFeatureContainerAccess() {
		return pFeatureContainer;
	}
	
	public ParserRule getFeatureContainerRule() {
		return getFeatureContainerAccess().getRule();
	}
	
	//ChildElement FeatureContainer:
	//	ConnectableElement | Line | Arrow
	public ChildElementElements getChildElementAccess() {
		return pChildElement;
	}
	
	public ParserRule getChildElementRule() {
		return getChildElementAccess().getRule();
	}
	
	//// TODO validate ATT / Value 
	//FeatureConditional:
	//	'if' modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value;
	public FeatureConditionalElements getFeatureConditionalAccess() {
		return pFeatureConditional;
	}
	
	public ParserRule getFeatureConditionalRule() {
		return getFeatureConditionalAccess().getRule();
	}
	
	//Node: //(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
	//	'node' modelClass=[ecore::EClass|QualifiedName] rootFigure=ConnectableElement;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Link: //(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
	//	'link' (reference?='reference' modelReference=[ecore::EReference|QualifiedName] | complex?='class'
	//	modelClass=[ecore::EClass|QualifiedName] 'source' sourceReference=[ecore::EReference|QualifiedName] 'target'
	//	targetReference=[ecore::EReference|QualifiedName]) //    (styled?='+' style=[Style])?
	//	'{' features+=LinkFeature* decorators+=Decorator* '}';
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//LinkFeature Feature:
	//	Foreground | LineStyle | LineWidth
	public LinkFeatureElements getLinkFeatureAccess() {
		return pLinkFeature;
	}
	
	public ParserRule getLinkFeatureRule() {
		return getLinkFeatureAccess().getRule();
	}
	
	//Decorator:
	//	'decorator' position=INT '%' element=DecoratorElement;
	public DecoratorElements getDecoratorAccess() {
		return pDecorator;
	}
	
	public ParserRule getDecoratorRule() {
		return getDecoratorAccess().getRule();
	}
	
	//// TODO validation
	//Anchor:
	//	'anchor' direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] ('max' max=INT)?
	//	conditional=FeatureConditional?
	//	';';
	public AnchorElements getAnchorAccess() {
		return pAnchor;
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}
	
	//enum AnchorDirection:
	//	INCOMING='incoming' |
	//	OUTGOING='outgoing';
	public AnchorDirectionElements getAnchorDirectionAccess() {
		return eAnchorDirection;
	}
	
	public EnumRule getAnchorDirectionRule() {
		return getAnchorDirectionAccess().getRule();
	}
	
	////---------------------------------------
	//// Colors
	//CustomColor:
	//	'color' name=ID R=INT G=INT B=INT ';';
	public CustomColorElements getCustomColorAccess() {
		return pCustomColor;
	}
	
	public ParserRule getCustomColorRule() {
		return getCustomColorAccess().getRule();
	}
	
	//Color:
	//	default=DefaultColor | custom=[CustomColor];
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum DefaultColor:
	//	WHITE='white' |
	//	SILVER='silver' |
	//	GRAY='gray' |
	//	BLACK='black' |
	//	RED='red' |
	//	MAROON='maroon' |
	//	YELLOW='yellow' |
	//	OLIVE='olive' |
	//	LIME='lime' |
	//	GREEN='green' |
	//	AQUA='aqua' |
	//	TEAL='teal' |
	//	BLUE='blue' |
	//	NAVY='navy' |
	//	FUCHSIA='fuchsia' |
	//	PURPLE='purple';
	public DefaultColorElements getDefaultColorAccess() {
		return eDefaultColor;
	}
	
	public EnumRule getDefaultColorRule() {
		return getDefaultColorAccess().getRule();
	}
	
	////---------------------------------------
	//// Connectable Elements
	/// *
	// * Every connectable element must be included here, and have:
	// * ('child' children+=ChildElement)*
	// * (styled?='+' style=[Style])?
	// * / ConnectableElement:
	//	Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle;
	public ConnectableElementElements getConnectableElementAccess() {
		return pConnectableElement;
	}
	
	public ParserRule getConnectableElementRule() {
		return getConnectableElementAccess().getRule();
	}
	
	//DecoratorElement FeatureContainer:
	//	Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line
	public DecoratorElementElements getDecoratorElementAccess() {
		return pDecoratorElement;
	}
	
	public ParserRule getDecoratorElementRule() {
		return getDecoratorElementAccess().getRule();
	}
	
	//ConnectableElementFeature Feature:
	//	Position | Size | ColorFeature | Transparency | LineStyle | LineWidth | Contains | Anchor | Layout | Visible
	public ConnectableElementFeatureElements getConnectableElementFeatureAccess() {
		return pConnectableElementFeature;
	}
	
	public ParserRule getConnectableElementFeatureRule() {
		return getConnectableElementFeatureAccess().getRule();
	}
	
	//CustomFigure:
	//	'figure' name=ID 'as' element=ConnectableElement;
	public CustomFigureElements getCustomFigureAccess() {
		return pCustomFigure;
	}
	
	public ParserRule getCustomFigureRule() {
		return getCustomFigureAccess().getRule();
	}
	
	//Custom:
	//	'figure' figure=[CustomFigure]
	//	//(styled?='+' style=[Style])?
	//	'{'
	//	features+=LinkedFeature* ('child' children+=ChildElement)*
	//	'}';
	public CustomElements getCustomAccess() {
		return pCustom;
	}
	
	public ParserRule getCustomRule() {
		return getCustomAccess().getRule();
	}
	
	//Rectangle:
	//	(rectangle?='rectangle' | square?='square')
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=RectangleFeature* ('child' children+=ChildElement)*
	//	'}';
	public RectangleElements getRectangleAccess() {
		return pRectangle;
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}
	
	//RectangleFeature Feature:
	//	ConnectableElementFeature | Corner
	public RectangleFeatureElements getRectangleFeatureAccess() {
		return pRectangleFeature;
	}
	
	public ParserRule getRectangleFeatureRule() {
		return getRectangleFeatureAccess().getRule();
	}
	
	//Rhombus:
	//	{Rhombus}
	//	'rhombus'
	//	//	(styled?='+' style=[Style])?
	//	'{'
	//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
	//	'}';
	public RhombusElements getRhombusAccess() {
		return pRhombus;
	}
	
	public ParserRule getRhombusRule() {
		return getRhombusAccess().getRule();
	}
	
	//Ellipse:
	//	(ellipse?='ellipse' | circle?='circle')
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
	//	'}';
	public EllipseElements getEllipseAccess() {
		return pEllipse;
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}
	
	//Polyline:
	//	(polygon?='polygon' | polyline?='polyline')
	//	//	(styled?='+' style=[Style])?
	//	'{'
	//	features+=Point
	//	features+=Point
	//	features+=Point*
	//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
	//	'}';
	public PolylineElements getPolylineAccess() {
		return pPolyline;
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}
	
	//Triangle:
	//	{Triangle}
	//	'triangle'
	//	//	(styled?='+' style=[Style])?
	//	'{'
	//	features+=ConnectableElementFeature* ('child' children+=ChildElement)*
	//	'}';
	public TriangleElements getTriangleAccess() {
		return pTriangle;
	}
	
	public ParserRule getTriangleRule() {
		return getTriangleAccess().getRule();
	}
	
	//Line:
	//	{Line} (horizontal?='hline' | vertical?='vline')
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=LineFeature*
	//	'}';
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//LineFeature Feature:
	//	LineWidth | LineStyle | Foreground | Position | Size | Visible
	public LineFeatureElements getLineFeatureAccess() {
		return pLineFeature;
	}
	
	public ParserRule getLineFeatureRule() {
		return getLineFeatureAccess().getRule();
	}
	
	//Arrow:
	//	{Arrow}
	//	'arrow'
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=LineFeature*
	//	'}';
	public ArrowElements getArrowAccess() {
		return pArrow;
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}
	
	//Contains:
	//	'contains' modelReference=[ecore::EReference|QualifiedName] conditional=FeatureConditional?
	//	';';
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//enum Operator:
	//	EQUAL='=' |
	//	DIFFERENT='<>';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Value:
	//	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//DoubleValue:
	//	valueInt=INT '.' valueDecimal=INT;
	public DoubleValueElements getDoubleValueAccess() {
		return pDoubleValue;
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}
	
	//StringValue:
	//	null?='null' | value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue:
	//	value=BooleanLiteral;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//enum BooleanLiteral:
	//	TRUE='true' |
	//	FALSE='false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return eBooleanLiteral;
	}
	
	public EnumRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//// TODO validation
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//FigureFeature Feature:
	//	ColorFeature | Size | Position | Point | LineStyle
	public FigureFeatureElements getFigureFeatureAccess() {
		return pFigureFeature;
	}
	
	public ParserRule getFigureFeatureRule() {
		return getFigureFeatureAccess().getRule();
	}
	
	//Label:
	//	{Label}
	//	'label'
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=LabelFeature* ('child' children+=ChildElement)*
	//	'}';
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//LabelFeature Feature:
	//	TextValue | Foreground | FontProperties | Size | Position | Visible | TextAlign
	public LabelFeatureElements getLabelFeatureAccess() {
		return pLabelFeature;
	}
	
	public ParserRule getLabelFeatureRule() {
		return getLabelFeatureAccess().getRule();
	}
	
	//// TODO image provider problem
	//Image:
	//	'image' imageId=STRING
	//	//	(styled?='+' style=[Style])? 
	//	'{'
	//	features+=ImageFeature* ('child' children+=ChildElement)*
	//	'}';
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//ImageFeature Feature:
	//	Size | Position | Transparency
	public ImageFeatureElements getImageFeatureAccess() {
		return pImageFeature;
	}
	
	public ParserRule getImageFeatureRule() {
		return getImageFeatureAccess().getRule();
	}
	
	//Invisible:
	//	{Invisible}
	//	'invisible'
	//	//	(styled?='+' style=[Style])?
	//	'{'
	//	features+=InvisibleFeature* ('child' children+=ChildElement)*
	//	'}';
	public InvisibleElements getInvisibleAccess() {
		return pInvisible;
	}
	
	public ParserRule getInvisibleRule() {
		return getInvisibleAccess().getRule();
	}
	
	//InvisibleFeature Feature:
	//	Size | Position | LinkedFeature | Layout
	public InvisibleFeatureElements getInvisibleFeatureAccess() {
		return pInvisibleFeature;
	}
	
	public ParserRule getInvisibleFeatureRule() {
		return getInvisibleFeatureAccess().getRule();
	}
	
	//ColorFeature:
	//	Foreground | Background;
	public ColorFeatureElements getColorFeatureAccess() {
		return pColorFeature;
	}
	
	public ParserRule getColorFeatureRule() {
		return getColorFeatureAccess().getRule();
	}
	
	//Foreground ColorFeature:
	//	type='foreground' color=Color
	//	conditional=FeatureConditional?
	//	';'
	public ForegroundElements getForegroundAccess() {
		return pForeground;
	}
	
	public ParserRule getForegroundRule() {
		return getForegroundAccess().getRule();
	}
	
	//Background ColorFeature:
	//	type='background' color=Color
	//	conditional=FeatureConditional?
	//	';'
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//// TODO validation percent
	//Transparency:
	//	'transparency' percent=INT '%'
	//	conditional=FeatureConditional?
	//	';';
	public TransparencyElements getTransparencyAccess() {
		return pTransparency;
	}
	
	public ParserRule getTransparencyRule() {
		return getTransparencyAccess().getRule();
	}
	
	//Size:
	//	'size' width=INT widthRelative?=']'? (height=INT heightRelative?=']'?)? resizable?='resizable'?
	//	conditional=FeatureConditional?
	//	';';
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//Point:
	//	'point' x=INT y=INT
	//	conditional=FeatureConditional?
	//	';';
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Position:
	//	'position' x=INT xRelative?='%'? y=INT yRelative?='%'?
	//	conditional=FeatureConditional?
	//	';';
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Corner:
	//	'corner' angle=INT
	//	conditional=FeatureConditional?
	//	';';
	public CornerElements getCornerAccess() {
		return pCorner;
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}
	
	//Layout:
	//	'layout' (vertical?='vertical' | horizontal?='horizontal') ('margin' margin=INT)?
	//	conditional=FeatureConditional?
	//	';';
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Visible:
	//	'invisible' conditional=FeatureConditional
	//	';';
	public VisibleElements getVisibleAccess() {
		return pVisible;
	}
	
	public ParserRule getVisibleRule() {
		return getVisibleAccess().getRule();
	}
	
	////--------------------------------
	//// Text
	//// TODO: validation of owned attribute
	//TextValue:
	//	{TextValue}
	//	'text' parts+=TextPart*
	//	conditional=FeatureConditional?
	//	';';
	public TextValueElements getTextValueAccess() {
		return pTextValue;
	}
	
	public ParserRule getTextValueRule() {
		return getTextValueAccess().getRule();
	}
	
	//TextPart:
	//	text=STRING | editable?='edit:'? modelAttribute=[ecore::EAttribute|QualifiedName];
	public TextPartElements getTextPartAccess() {
		return pTextPart;
	}
	
	public ParserRule getTextPartRule() {
		return getTextPartAccess().getRule();
	}
	
	//FontProperties:
	//	{FontProperties}
	//	'font' (face='arial' | 'verdana' | 'courier' | 'times')? size=INT? bold?='bold'? italics?='italics'?
	//	conditional=FeatureConditional?
	//	';';
	public FontPropertiesElements getFontPropertiesAccess() {
		return pFontProperties;
	}
	
	public ParserRule getFontPropertiesRule() {
		return getFontPropertiesAccess().getRule();
	}
	
	//TextAlign:
	//	'align' value=TextAlignValue
	//	conditional=FeatureConditional?
	//	';';
	public TextAlignElements getTextAlignAccess() {
		return pTextAlign;
	}
	
	public ParserRule getTextAlignRule() {
		return getTextAlignAccess().getRule();
	}
	
	//enum TextAlignValue:
	//	LEFT='left' |
	//	CENTER='center' |
	//	RIGHT='right';
	public TextAlignValueElements getTextAlignValueAccess() {
		return eTextAlignValue;
	}
	
	public EnumRule getTextAlignValueRule() {
		return getTextAlignValueAccess().getRule();
	}
	
	////-------------------------------
	//// Lines
	//LineStyle:
	//	{LineStyle}
	//	'linestyle' style=LineType? manhattan?='manhattan'?
	//	conditional=FeatureConditional?
	//	';';
	public LineStyleElements getLineStyleAccess() {
		return pLineStyle;
	}
	
	public ParserRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}
	
	//enum LineType:
	//	SOLID='solid' |
	//	DASH='dashed' |
	//	DOT='dotted';
	public LineTypeElements getLineTypeAccess() {
		return eLineType;
	}
	
	public EnumRule getLineTypeRule() {
		return getLineTypeAccess().getRule();
	}
	
	//LineWidth:
	//	'linewidth' width=INT
	//	conditional=FeatureConditional?
	//	';';
	public LineWidthElements getLineWidthAccess() {
		return pLineWidth;
	}
	
	public ParserRule getLineWidthRule() {
		return getLineWidthAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
