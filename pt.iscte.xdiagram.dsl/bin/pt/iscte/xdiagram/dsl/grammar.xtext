grammar pt.iscte.xdiagram.dsl.XdiagramDsl with org.eclipse.xtext.common.Terminals

generate model "http://www.iscte.pt/xdiagram/dsl/grammar"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore


XDiagram:
	//'xdiagram' id=ID desc=STRING
    //('metamodel' importURI=STRING)?
    //imports+=ImportStatement   
    metamodel=MetaModel
    diagram=Diagram
//    groups+=ToolGroup*
    
    (
    	(elements += DiagramElement) |
//    	(styles += Style) |
    	(colors += CustomColor) |
    	(figures += CustomFigure)
    )*
;

// validation
MetaModel:
	'metamodel' '{' 
		'plugin-id' plugin=STRING 
		'ecore-file' ecorePath=STRING
	'}'
;

// importedNamespace apparently cannot be on the root element
ImportStatement:
	{ImportStatement}
	('import' importedNamespace=QualifiedNameWithWildCard)?
;

QualifiedName:
  ID ('.' ID)*
;

QualifiedNameWithWildCard returns ecore::EString :
    QualifiedName  ('.' '*')?;
    



Diagram:
	'diagram' modelClass=[ecore::EClass|QualifiedName] '{'
	contains+=Contains*
	'}'
;

//ToolGroup:
//	'toolgroup' name=ID (description=STRING)? ';'
//;

DiagramElement:
	(Node | Link)
;


//Style:
//	'style' name=ID  (styled?='+' style=[Style])? '{'
//	      features+=StyleFeature*
//	'}'
//;




/**
 * Every feature has to be added here, and have:
 * (conditional=FeatureConditional)?
 */
Feature:
		StyleFeature |
		LinkedFeature
;

LinkedFeature returns Feature:
	Contains | 
	Anchor
;

StyleFeature returns Feature:
	Size | Position | Point | Corner |
	Background | Foreground | Transparency |
	FontProperties |TextValue | TextAlign |
	LineStyle | LineWidth
;

FeatureContainer:
	ConnectableElement | DecoratorElement | Link //| Style
;

ChildElement returns FeatureContainer:
	ConnectableElement | Line | Arrow
;

// TODO validate ATT / Value 
FeatureConditional:
	'if' modelAttribute=[ecore::EAttribute|QualifiedName] operator=Operator value=Value
;







Node:
	//(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
    'node' modelClass=[ecore::EClass|QualifiedName] rootFigure = ConnectableElement
;
    
   

Link:
	//(tool?='tool' toolName=STRING (group?='group' groupId=[ToolGroup])? (icon?='icon' imageId=ID)?)?
    'link'(
    	(
    		reference?='reference' modelReference=[ecore::EReference|QualifiedName]
    	) 
    	| 
    	(
    		complex?='class' modelClass=[ecore::EClass|QualifiedName] 
    		'source' sourceReference=[ecore::EReference|QualifiedName] 
    		'target' targetReference=[ecore::EReference|QualifiedName]
    	)
    )
//    (styled?='+' style=[Style])?
    '{'
    	features += LinkFeature*
    	decorators += Decorator*	
    '}'
;
    

LinkFeature returns Feature:
	Foreground | LineStyle | LineWidth
;
    
    
    


Decorator:
	'decorator' position=INT '%' element = DecoratorElement
;








// TODO validation
Anchor:
	'anchor' direction=AnchorDirection modelReference=[ecore::EReference|QualifiedName] ('max' max=INT)?
	(conditional=FeatureConditional)?
	';'
;


enum AnchorDirection:
	INCOMING='incoming' |
	OUTGOING='outgoing'
;













//---------------------------------------
// Colors


CustomColor:
	'color' name=ID R=INT G=INT B=INT ';'
;

Color:
	(default=DefaultColor) | (custom=[CustomColor])
;


enum DefaultColor:
	WHITE='white' |
	SILVER='silver' |
	GRAY='gray' |
	BLACK='black' |
	RED='red' |
	MAROON='maroon' |
	YELLOW='yellow' |
	OLIVE='olive' |
	LIME='lime' |
	GREEN='green' |
	AQUA='aqua' |
	TEAL='teal' |
	BLUE='blue' |
	NAVY='navy' |
	FUCHSIA='fuchsia' |
	PURPLE='purple'
;










//---------------------------------------
// Connectable Elements
/*
 * Every connectable element must be included here, and have:
 * ('child' children+=ChildElement)*
 * (styled?='+' style=[Style])?
 */
ConnectableElement:
	Rectangle | Rhombus | Ellipse | Polyline | Label | Image | Invisible | Custom | Triangle
;

DecoratorElement returns FeatureContainer:
	Ellipse | Rhombus | Polyline | Triangle | Label | Image | Arrow | Line
;




ConnectableElementFeature returns Feature:
	Position | Size | ColorFeature | Transparency | LineStyle | LineWidth | Contains | Anchor | Layout | Visible
;





CustomFigure:
	'figure' name=ID 'as' element=ConnectableElement
;





Custom:
	'figure' figure=[CustomFigure] 
	//(styled?='+' style=[Style])?
	'{'
		features+=LinkedFeature*
		('child' children+=ChildElement)*
	'}'
;

Rectangle:
	(rectangle?='rectangle' | square?='square')
//	(styled?='+' style=[Style])? 
	'{'
		features+=RectangleFeature*
		('child' children+=ChildElement)*
	'}'
;

RectangleFeature returns Feature:
	ConnectableElementFeature | Corner
;

Rhombus:
	{Rhombus}
	'rhombus' 
//	(styled?='+' style=[Style])?
	'{'
		features+=ConnectableElementFeature*
		('child' children+=ChildElement)*
	'}'
;

Ellipse:
	(ellipse?='ellipse' | circle?='circle') 
//	(styled?='+' style=[Style])? 
	'{'
		features+=ConnectableElementFeature*
		('child' children+=ChildElement)*
	'}'
;


Polyline: 
	(polygon?='polygon' | polyline?='polyline') 
//	(styled?='+' style=[Style])?
	'{'
		features+=Point
		features+=Point
		features+=Point*
		features+=ConnectableElementFeature*
		('child' children+=ChildElement)*
	'}'
;

Triangle:
	{Triangle}
	'triangle'
//	(styled?='+' style=[Style])?
	'{'
		features+=ConnectableElementFeature*
		('child' children+=ChildElement)*
	'}'
;



Line:
	{Line}
	(horizontal?='hline' | vertical?='vline')
//	(styled?='+' style=[Style])? 
	'{'
		features+=LineFeature*
	'}'
;

LineFeature returns Feature:
	LineWidth | LineStyle | Foreground | Position | Size | Visible
;

Arrow:
	{Arrow}
	'arrow' 
//	(styled?='+' style=[Style])? 
	'{'
		features+=LineFeature*
	'}'
;







Contains:
	'contains' modelReference=[ecore::EReference|QualifiedName] 
	(conditional=FeatureConditional)?
	';'
;


//TODO < > <= =>
enum Operator:
	EQUAL='=' |
	DIFFERENT='<>'
;



Value:
	IntValue | DoubleValue | StringValue | BooleanValue | EnumValue
;

IntValue:
	value=INT
;

DoubleValue:
	valueInt=INT '.' valueDecimal=INT
;

StringValue:
	(null?='null' | value=STRING)
;

BooleanValue:
	value=BooleanLiteral
;

enum BooleanLiteral:
	TRUE='true' |
	FALSE='false'
;

// TODO validation
EnumValue:
	name=ID
;







FigureFeature returns Feature:
	ColorFeature | Size | Position | Point | LineStyle
;


Label:
	{Label}
	'label'
//	(styled?='+' style=[Style])? 
	'{'
	features+=LabelFeature*
	('child' children+=ChildElement)*
	'}'
;

LabelFeature returns Feature:
	TextValue | Foreground | FontProperties | Size | Position | Visible | TextAlign
;



// TODO image provider problem
Image:
	'image' imageId=STRING
//	(styled?='+' style=[Style])? 
	'{'
	features+=ImageFeature*
	('child' children+=ChildElement)*
	'}'
;

ImageFeature returns Feature:
	Size | Position | Transparency
;


Invisible:
	{Invisible}
	'invisible'
//	(styled?='+' style=[Style])?
	'{'
	features+=InvisibleFeature*
	('child' children+=ChildElement)*
	'}'
;

InvisibleFeature returns Feature:
	Size | Position | LinkedFeature | Layout
;









ColorFeature:
	Foreground | Background
;

Foreground returns ColorFeature:
	type='foreground' color=Color
	(conditional=FeatureConditional)?
	';'
;

Background returns ColorFeature:
	type='background' color=Color
	(conditional=FeatureConditional)?
	';'
;

// TODO validation percent
Transparency:
	'transparency' percent=INT '%'
	(conditional=FeatureConditional)?
	';'
;





Size:
	'size' width=INT (widthRelative?=']')? (height=INT (heightRelative?=']')?)? (resizable?='resizable')?
	(conditional=FeatureConditional)?
	';'
;

Point:
	'point' x=INT y=INT
	(conditional=FeatureConditional)?
	';'
;

Position:
	'position' x=INT (xRelative?='%')? y=INT (yRelative?='%')?
	(conditional=FeatureConditional)?
	';'
;


Corner:
	'corner' angle=INT
	(conditional=FeatureConditional)?
	';'
;



Layout:
	'layout' (vertical?='vertical' | horizontal?='horizontal') ('margin' margin=INT)?
	(conditional=FeatureConditional)?	
	';'
;



Visible:
	'invisible' conditional=FeatureConditional
	';'
;





//--------------------------------
// Text

// TODO: validation of owned attribute
TextValue:
	{TextValue}
	'text' parts+=TextPart*
	(conditional=FeatureConditional)?
	';'
;

TextPart:
	text=STRING | ((editable?='edit:')? modelAttribute=[ecore::EAttribute|QualifiedName] )
;

FontProperties:
	{FontProperties}
	'font' (face='arial'|'verdana'|'courier'|'times')? (size=INT)? (bold?='bold')? (italics?='italics')?
	(conditional=FeatureConditional)?
	';'
;

TextAlign:
	'align' value=TextAlignValue
	(conditional=FeatureConditional)?
	';'	
;

enum TextAlignValue:
	LEFT='left' |
	CENTER='center' |
	RIGHT='right'
;





//-------------------------------
// Lines


LineStyle:
	{LineStyle}
	'linestyle' (style=LineType)? (manhattan?='manhattan')?
	(conditional=FeatureConditional)?
	';'
;

enum LineType:
	SOLID='solid' |
	DASH='dashed' |
	DOT='dotted' 
;

LineWidth:
	'linewidth' width=INT
	(conditional=FeatureConditional)?
	';'
;

