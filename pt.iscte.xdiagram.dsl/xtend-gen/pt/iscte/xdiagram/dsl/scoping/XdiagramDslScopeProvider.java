/**
 * generated by Xtext 2.10.0
 */
package pt.iscte.xdiagram.dsl.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import pt.iscte.xdiagram.dsl.model.Anchor;
import pt.iscte.xdiagram.dsl.model.AnchorDirection;
import pt.iscte.xdiagram.dsl.model.ConnectableElement;
import pt.iscte.xdiagram.dsl.model.Contains;
import pt.iscte.xdiagram.dsl.model.Diagram;
import pt.iscte.xdiagram.dsl.model.DiagramElement;
import pt.iscte.xdiagram.dsl.model.Link;
import pt.iscte.xdiagram.dsl.model.MetaModel;
import pt.iscte.xdiagram.dsl.model.ModelPackage;
import pt.iscte.xdiagram.dsl.model.Node;
import pt.iscte.xdiagram.dsl.model.XDiagram;
import pt.iscte.xdiagram.dsl.scoping.AbstractXdiagramDslScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class XdiagramDslScopeProvider extends AbstractXdiagramDslScopeProvider {
  public static class XdiagramScope implements IScope {
    private final EObject context;
    
    private final EReference reference;
    
    private EPackage ePackage;
    
    public XdiagramScope(final EObject context, final EReference reference) {
      this.context = context;
      this.reference = reference;
      this.loadEPackage();
      boolean _notEquals = (!Objects.equal(this.ePackage, null));
      if (_notEquals) {
        this.loadData();
      }
    }
    
    public EPackage loadEPackage() {
      EPackage _xblockexpression = null;
      {
        EObject _crawlUp = this.crawlUp(this.context, ModelPackage.Literals.XDIAGRAM);
        XDiagram xdiagram = ((XDiagram) _crawlUp);
        EPackage _xifexpression = null;
        if ((((!Objects.equal(xdiagram.getMetamodel(), null)) && (!Objects.equal(xdiagram.getMetamodel().getPlugin(), null))) && 
          (!Objects.equal(xdiagram.getMetamodel().getEcorePath(), null)))) {
          EPackage _xblockexpression_1 = null;
          {
            MetaModel _metamodel = xdiagram.getMetamodel();
            String ecorePlugin = _metamodel.getPlugin();
            MetaModel _metamodel_1 = xdiagram.getMetamodel();
            String ecorePath = _metamodel_1.getEcorePath();
            boolean _startsWith = ecorePath.startsWith("/");
            if (_startsWith) {
              ecorePath.substring(1);
            }
            String location = ((ecorePlugin + "/") + ecorePath);
            URI modelLocation = URI.createPlatformResourceURI(location, true);
            ResourceSetImpl rs = new ResourceSetImpl();
            Resource resource = null;
            try {
              Resource _resource = rs.getResource(modelLocation, true);
              resource = _resource;
            } catch (final Throwable _t) {
              if (_t instanceof Exception) {
                final Exception e = (Exception)_t;
                URI _createPlatformPluginURI = URI.createPlatformPluginURI(location, true);
                modelLocation = _createPlatformPluginURI;
                try {
                  Resource _resource_1 = rs.getResource(modelLocation, true);
                  resource = _resource_1;
                } catch (final Throwable _t_1) {
                  if (_t_1 instanceof Exception) {
                    final Exception e2 = (Exception)_t_1;
                  } else {
                    throw Exceptions.sneakyThrow(_t_1);
                  }
                }
              } else {
                throw Exceptions.sneakyThrow(_t);
              }
            }
            EPackage _xifexpression_1 = null;
            boolean _notEquals = (!Objects.equal(resource, null));
            if (_notEquals) {
              EList<EObject> _contents = resource.getContents();
              EObject _get = _contents.get(0);
              _xifexpression_1 = this.ePackage = ((EPackage) _get);
            }
            _xblockexpression_1 = _xifexpression_1;
          }
          _xifexpression = _xblockexpression_1;
        }
        _xblockexpression = _xifexpression;
      }
      return _xblockexpression;
    }
    
    private Map<QualifiedName, IEObjectDescription> eClassMap = new HashMap<QualifiedName, IEObjectDescription>();
    
    private Multimap<QualifiedName, IEObjectDescription> referenceLinksMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> parentChildrenMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> attributesMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> complexRefsMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> complexRefsSourceMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> targetRefsMap = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> incomingRef = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    private Multimap<QualifiedName, IEObjectDescription> outgoingRef = ArrayListMultimap.<QualifiedName, IEObjectDescription>create();
    
    public void loadData() {
      EList<EClassifier> _eClassifiers = this.ePackage.getEClassifiers();
      for (final EClassifier c : _eClassifiers) {
        if ((c instanceof EClass)) {
          EClass eClass = ((EClass) c);
          String _name = eClass.getName();
          QualifiedName classQname = QualifiedName.create(_name);
          EObjectDescription _eObjectDescription = new EObjectDescription(classQname, c, null);
          this.eClassMap.put(classQname, _eObjectDescription);
          EList<EAttribute> _eAllAttributes = ((EClass)c).getEAllAttributes();
          for (final EAttribute a : _eAllAttributes) {
            {
              String _name_1 = a.getName();
              QualifiedName _create = QualifiedName.create(_name_1);
              EObjectDescription adesc = new EObjectDescription(_create, a, null);
              this.attributesMap.put(classQname, adesc);
            }
          }
          EList<EReference> _eAllReferences = ((EClass)c).getEAllReferences();
          for (final EReference r : _eAllReferences) {
            {
              String _name_1 = ((EClass)c).getName();
              String _name_2 = r.getName();
              QualifiedName qname = QualifiedName.create(_name_1, _name_2);
              EObjectDescription rdesc = new EObjectDescription(qname, r, null);
              boolean _isContainment = r.isContainment();
              boolean _not = (!_isContainment);
              if (_not) {
                this.referenceLinksMap.put(qname, rdesc);
              }
              EClassifier _eType = r.getEType();
              String _name_3 = _eType.getName();
              String _name_4 = r.getName();
              QualifiedName iname = QualifiedName.create(_name_3, _name_4);
              EClassifier _eType_1 = r.getEType();
              String _name_5 = _eType_1.getName();
              QualifiedName _create = QualifiedName.create(_name_5);
              EObjectDescription _eObjectDescription_1 = new EObjectDescription(iname, r, null);
              this.incomingRef.put(_create, _eObjectDescription_1);
              String _name_6 = r.getName();
              QualifiedName _create_1 = QualifiedName.create(_name_6);
              EObjectDescription _eObjectDescription_2 = new EObjectDescription(_create_1, r, null);
              this.outgoingRef.put(classQname, _eObjectDescription_2);
              boolean _isContainment_1 = r.isContainment();
              if (_isContainment_1) {
                String _name_7 = ((EClass)c).getName();
                QualifiedName _create_2 = QualifiedName.create(_name_7);
                qname = _create_2;
                String _name_8 = r.getName();
                QualifiedName _create_3 = QualifiedName.create(_name_8);
                EObjectDescription _eObjectDescription_3 = new EObjectDescription(_create_3, r, null);
                rdesc = _eObjectDescription_3;
                this.parentChildrenMap.put(qname, rdesc);
                EClassifier _eType_2 = r.getEType();
                EList<EReference> _eAllReferences_1 = ((EClass) _eType_2).getEAllReferences();
                for (final EReference r_uni : _eAllReferences_1) {
                  if (((r_uni.getLowerBound() == 1) && (r_uni.getUpperBound() == 1))) {
                    EClassifier _eType_3 = r.getEType();
                    String _name_9 = _eType_3.getName();
                    QualifiedName uname = QualifiedName.create(_name_9);
                    EClassifier _eType_4 = r.getEType();
                    EObjectDescription udesc = new EObjectDescription(uname, _eType_4, null);
                    this.complexRefsMap.put(uname, udesc);
                    String _name_10 = ((EClass)c).getName();
                    String _name_11 = r.getName();
                    QualifiedName sname = QualifiedName.create(_name_10, _name_11);
                    EObjectDescription sdesc = new EObjectDescription(sname, r, null);
                    this.complexRefsSourceMap.put(uname, sdesc);
                  }
                }
              } else {
                if ((((!r.isContainment()) && (r.getLowerBound() == 1)) && (r.getUpperBound() == 1))) {
                  String _name_12 = r.getName();
                  QualifiedName _create_4 = QualifiedName.create(_name_12);
                  EObjectDescription tdesc = new EObjectDescription(_create_4, r, null);
                  this.targetRefsMap.put(classQname, tdesc);
                }
              }
            }
          }
        }
      }
    }
    
    public EObject crawlUp(final EObject o, final EClass clazz) {
      EObject n = o.eContainer();
      while ((!clazz.isInstance(n))) {
        EObject _eContainer = n.eContainer();
        n = _eContainer;
      }
      return n;
    }
    
    public DiagramElement getDiagramElement(final EObject o) {
      EObject n = o.eContainer();
      while ((!(n instanceof DiagramElement))) {
        EObject _eContainer = n.eContainer();
        n = _eContainer;
      }
      return ((DiagramElement) n);
    }
    
    @Override
    public Iterable<IEObjectDescription> getAllElements() {
      if (((this.context instanceof Diagram) || (this.context instanceof Node))) {
        Collection<IEObjectDescription> _values = this.eClassMap.values();
        final Function1<IEObjectDescription, Boolean> _function = (IEObjectDescription it) -> {
          EObject _eObjectOrProxy = it.getEObjectOrProxy();
          boolean _isAbstract = ((EClass) _eObjectOrProxy).isAbstract();
          return Boolean.valueOf((!_isAbstract));
        };
        return IterableExtensions.<IEObjectDescription>filter(_values, _function);
      } else {
        if ((this.context instanceof Contains)) {
          EObject _eContainer = ((Contains)this.context).eContainer();
          if ((_eContainer instanceof Diagram)) {
            EObject _eContainer_1 = ((Contains)this.context).eContainer();
            final Diagram diagram = ((Diagram) _eContainer_1);
            EClass _modelClass = diagram.getModelClass();
            String _name = _modelClass.getName();
            QualifiedName _create = QualifiedName.create(_name);
            return this.parentChildrenMap.get(_create);
          } else {
            EObject _eContainer_2 = ((Contains)this.context).eContainer();
            if ((_eContainer_2 instanceof ConnectableElement)) {
              DiagramElement _diagramElement = this.getDiagramElement(this.context);
              final Node node = ((Node) _diagramElement);
              EClass _modelClass_1 = node.getModelClass();
              String _name_1 = _modelClass_1.getName();
              QualifiedName _create_1 = QualifiedName.create(_name_1);
              return this.parentChildrenMap.get(_create_1);
            }
          }
        } else {
          if (((this.context instanceof Link) && ((Link) this.context).isReference())) {
            return this.referenceLinksMap.values();
          } else {
            if (((this.context instanceof Link) && ((Link) this.context).isComplex())) {
              String _name_2 = this.reference.getName();
              boolean _equals = _name_2.equals("modelClass");
              if (_equals) {
                return this.complexRefsMap.values();
              } else {
                boolean _equals_1 = this.reference.equals(ModelPackage.Literals.LINK__SOURCE_REFERENCE);
                if (_equals_1) {
                  EClass _modelClass_2 = ((Link) this.context).getModelClass();
                  String _name_3 = _modelClass_2.getName();
                  QualifiedName qname = QualifiedName.create(_name_3);
                  return this.complexRefsSourceMap.get(qname);
                } else {
                  boolean _equals_2 = this.reference.equals(ModelPackage.Literals.LINK__TARGET_REFERENCE);
                  if (_equals_2) {
                    EClass _modelClass_3 = ((Link) this.context).getModelClass();
                    String _name_4 = _modelClass_3.getName();
                    QualifiedName qname_1 = QualifiedName.create(_name_4);
                    return this.targetRefsMap.get(qname_1);
                  }
                }
              }
            } else {
              String _name_5 = this.reference.getName();
              boolean _equals_3 = _name_5.equals("modelAttribute");
              if (_equals_3) {
                EObject owner = this.crawlUp(this.context, ModelPackage.Literals.DIAGRAM_ELEMENT);
                if (((owner instanceof Link) && ((Link) owner).isReference())) {
                  Iterator<Object> _emptyIterator = Collections.<Object>emptyIterator();
                  return ((Iterable<IEObjectDescription>) _emptyIterator);
                } else {
                  if ((owner instanceof Node)) {
                    EClass _modelClass_4 = ((Node)owner).getModelClass();
                    String _name_6 = _modelClass_4.getName();
                    QualifiedName _create_2 = QualifiedName.create(_name_6);
                    return this.attributesMap.get(_create_2);
                  } else {
                    if ((owner instanceof Link)) {
                      EClass _modelClass_5 = ((Link)owner).getModelClass();
                      String _name_7 = _modelClass_5.getName();
                      QualifiedName _create_3 = QualifiedName.create(_name_7);
                      return this.attributesMap.get(_create_3);
                    }
                  }
                }
              } else {
                if ((this.context instanceof Anchor)) {
                  EObject _crawlUp = this.crawlUp(this.context, ModelPackage.Literals.NODE);
                  Node owner_1 = ((Node) _crawlUp);
                  EClass _modelClass_6 = owner_1.getModelClass();
                  String _name_8 = _modelClass_6.getName();
                  QualifiedName qname_2 = QualifiedName.create(_name_8);
                  AnchorDirection _direction = ((Anchor)this.context).getDirection();
                  boolean _equals_4 = Objects.equal(_direction, AnchorDirection.OUTGOING);
                  if (_equals_4) {
                    return this.outgoingRef.get(qname_2);
                  } else {
                    AnchorDirection _direction_1 = ((Anchor)this.context).getDirection();
                    boolean _equals_5 = Objects.equal(_direction_1, AnchorDirection.INCOMING);
                    if (_equals_5) {
                      return this.incomingRef.get(qname_2);
                    }
                  }
                } else {
                  return Collections.<IEObjectDescription>emptyList();
                }
              }
            }
          }
        }
      }
      return null;
    }
    
    @Override
    public Iterable<IEObjectDescription> getElements(final EObject object) {
      return Collections.<IEObjectDescription>emptyList();
    }
    
    @Override
    public IEObjectDescription getSingleElement(final EObject object) {
      return null;
    }
    
    @Override
    public Iterable<IEObjectDescription> getElements(final QualifiedName name) {
      return Collections.<IEObjectDescription>emptyList();
    }
    
    @Override
    public IEObjectDescription getSingleElement(final QualifiedName name) {
      if ((this.context instanceof Contains)) {
        EObject _eContainer = ((Contains)this.context).eContainer();
        if ((_eContainer instanceof Diagram)) {
          EObject _eContainer_1 = ((Contains)this.context).eContainer();
          final Diagram diagram = ((Diagram) _eContainer_1);
          EClass _modelClass = diagram.getModelClass();
          EList<EReference> _eAllContainments = _modelClass.getEAllContainments();
          for (final EReference r : _eAllContainments) {
            String _name = r.getName();
            String _string = name.toString();
            boolean _equals = _name.equals(_string);
            if (_equals) {
              return new EObjectDescription(name, r, null);
            }
          }
        } else {
          EObject _eContainer_2 = ((Contains)this.context).eContainer();
          if ((_eContainer_2 instanceof ConnectableElement)) {
            EObject n = ((Contains)this.context).eContainer();
            while ((!(n instanceof Node))) {
              EObject _eContainer_3 = n.eContainer();
              n = _eContainer_3;
            }
            final Node node = ((Node) n);
            EClass _modelClass_1 = node.getModelClass();
            EList<EReference> _eAllContainments_1 = _modelClass_1.getEAllContainments();
            for (final EReference r_1 : _eAllContainments_1) {
              String _name_1 = r_1.getName();
              String _string_1 = name.toString();
              boolean _equals_1 = _name_1.equals(_string_1);
              if (_equals_1) {
                String _name_2 = r_1.getName();
                QualifiedName _create = QualifiedName.create(_name_2);
                return new EObjectDescription(_create, r_1, null);
              }
            }
          }
        }
      } else {
        if (((this.context instanceof Link) && ((Link) this.context).isReference())) {
          Collection<IEObjectDescription> list = this.referenceLinksMap.get(name);
          IEObjectDescription _xifexpression = null;
          boolean _isEmpty = list.isEmpty();
          if (_isEmpty) {
            _xifexpression = null;
          } else {
            final Collection<IEObjectDescription> _converted_list = (Collection<IEObjectDescription>)list;
            _xifexpression = ((IEObjectDescription[])Conversions.unwrapArray(_converted_list, IEObjectDescription.class))[0];
          }
          return _xifexpression;
        } else {
          if (((this.context instanceof Link) && ((Link) this.context).isComplex())) {
            String _name_3 = this.reference.getName();
            boolean _equals_2 = _name_3.equals("modelClass");
            if (_equals_2) {
              Collection<IEObjectDescription> _values = this.complexRefsMap.values();
              for (final IEObjectDescription d : _values) {
                QualifiedName _name_4 = d.getName();
                boolean _equals_3 = _name_4.equals(name);
                if (_equals_3) {
                  return d;
                }
              }
            } else {
              boolean _equals_4 = this.reference.equals(ModelPackage.Literals.LINK__SOURCE_REFERENCE);
              if (_equals_4) {
                EClass _modelClass_2 = ((Link) this.context).getModelClass();
                String _name_5 = _modelClass_2.getName();
                QualifiedName qname = QualifiedName.create(_name_5);
                Collection<IEObjectDescription> _get = this.complexRefsSourceMap.get(qname);
                for (final IEObjectDescription d_1 : _get) {
                  QualifiedName _name_6 = d_1.getName();
                  boolean _equals_5 = _name_6.equals(name);
                  if (_equals_5) {
                    return d_1;
                  }
                }
              } else {
                boolean _equals_6 = this.reference.equals(ModelPackage.Literals.LINK__TARGET_REFERENCE);
                if (_equals_6) {
                  EClass _modelClass_3 = ((Link) this.context).getModelClass();
                  String _name_7 = _modelClass_3.getName();
                  QualifiedName qname_1 = QualifiedName.create(_name_7);
                  Collection<IEObjectDescription> _get_1 = this.targetRefsMap.get(qname_1);
                  for (final IEObjectDescription d_2 : _get_1) {
                    QualifiedName _name_8 = d_2.getName();
                    boolean _equals_7 = _name_8.equals(name);
                    if (_equals_7) {
                      return d_2;
                    }
                  }
                }
              }
            }
          } else {
            String _name_9 = this.reference.getName();
            boolean _equals_8 = _name_9.equals("modelAttribute");
            if (_equals_8) {
              DiagramElement owner = this.getDiagramElement(this.context);
              if ((Objects.equal(owner.getModelClass(), null) || Objects.equal(owner.getModelClass().getName(), null))) {
                return null;
              }
              EClass _modelClass_4 = owner.getModelClass();
              String _name_10 = _modelClass_4.getName();
              QualifiedName _create_1 = QualifiedName.create(_name_10);
              Collection<IEObjectDescription> list_1 = this.attributesMap.get(_create_1);
              for (final IEObjectDescription d_3 : list_1) {
                QualifiedName _name_11 = d_3.getName();
                boolean _equals_9 = _name_11.equals(name);
                if (_equals_9) {
                  return d_3;
                }
              }
              return null;
            } else {
              if ((this.context instanceof Anchor)) {
                EObject _crawlUp = this.crawlUp(this.context, ModelPackage.Literals.NODE);
                Node owner_1 = ((Node) _crawlUp);
                EClass _modelClass_5 = owner_1.getModelClass();
                String _name_12 = _modelClass_5.getName();
                QualifiedName qname_2 = QualifiedName.create(_name_12);
                AnchorDirection _direction = ((Anchor)this.context).getDirection();
                boolean _equals_10 = Objects.equal(_direction, AnchorDirection.OUTGOING);
                if (_equals_10) {
                  Collection<IEObjectDescription> _get_2 = this.outgoingRef.get(qname_2);
                  for (final IEObjectDescription d_4 : _get_2) {
                    QualifiedName _name_13 = d_4.getName();
                    boolean _equals_11 = _name_13.equals(name);
                    if (_equals_11) {
                      return d_4;
                    }
                  }
                  return null;
                } else {
                  AnchorDirection _direction_1 = ((Anchor)this.context).getDirection();
                  boolean _equals_12 = Objects.equal(_direction_1, AnchorDirection.INCOMING);
                  if (_equals_12) {
                    Collection<IEObjectDescription> _get_3 = this.incomingRef.get(qname_2);
                    for (final IEObjectDescription d_5 : _get_3) {
                      QualifiedName _name_14 = d_5.getName();
                      boolean _equals_13 = _name_14.equals(name);
                      if (_equals_13) {
                        return d_5;
                      }
                    }
                    return null;
                  }
                }
              }
            }
          }
        }
      }
      return this.eClassMap.get(name);
    }
  }
  
  public XdiagramDslScopeProvider() {
  }
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    EClassifier _eType = reference.getEType();
    String _name = _eType.getName();
    boolean _matches = _name.matches("EClass|EReference|EAttribute");
    if (_matches) {
      _xifexpression = new XdiagramDslScopeProvider.XdiagramScope(context, reference);
    } else {
      _xifexpression = super.getScope(context, reference);
    }
    return _xifexpression;
  }
}
